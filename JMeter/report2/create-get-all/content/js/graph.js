/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 547.0, "minX": 0.0, "maxY": 46361.0, "series": [{"data": [[0.0, 547.0], [0.1, 548.0], [0.2, 552.0], [0.3, 552.0], [0.4, 569.0], [0.5, 571.0], [0.6, 581.0], [0.7, 603.0], [0.8, 604.0], [0.9, 610.0], [1.0, 614.0], [1.1, 615.0], [1.2, 620.0], [1.3, 620.0], [1.4, 621.0], [1.5, 622.0], [1.6, 626.0], [1.7, 626.0], [1.8, 628.0], [1.9, 628.0], [2.0, 633.0], [2.1, 637.0], [2.2, 638.0], [2.3, 638.0], [2.4, 638.0], [2.5, 639.0], [2.6, 640.0], [2.7, 640.0], [2.8, 642.0], [2.9, 644.0], [3.0, 648.0], [3.1, 649.0], [3.2, 649.0], [3.3, 649.0], [3.4, 653.0], [3.5, 655.0], [3.6, 656.0], [3.7, 658.0], [3.8, 661.0], [3.9, 662.0], [4.0, 662.0], [4.1, 664.0], [4.2, 666.0], [4.3, 666.0], [4.4, 667.0], [4.5, 668.0], [4.6, 673.0], [4.7, 676.0], [4.8, 677.0], [4.9, 678.0], [5.0, 679.0], [5.1, 680.0], [5.2, 683.0], [5.3, 683.0], [5.4, 684.0], [5.5, 684.0], [5.6, 684.0], [5.7, 687.0], [5.8, 689.0], [5.9, 690.0], [6.0, 692.0], [6.1, 693.0], [6.2, 694.0], [6.3, 698.0], [6.4, 700.0], [6.5, 701.0], [6.6, 701.0], [6.7, 702.0], [6.8, 704.0], [6.9, 704.0], [7.0, 705.0], [7.1, 708.0], [7.2, 712.0], [7.3, 717.0], [7.4, 722.0], [7.5, 723.0], [7.6, 723.0], [7.7, 723.0], [7.8, 727.0], [7.9, 727.0], [8.0, 729.0], [8.1, 732.0], [8.2, 733.0], [8.3, 737.0], [8.4, 740.0], [8.5, 742.0], [8.6, 748.0], [8.7, 748.0], [8.8, 750.0], [8.9, 755.0], [9.0, 756.0], [9.1, 759.0], [9.2, 763.0], [9.3, 773.0], [9.4, 782.0], [9.5, 795.0], [9.6, 803.0], [9.7, 851.0], [9.8, 1260.0], [9.9, 2282.0], [10.0, 2285.0], [10.1, 2288.0], [10.2, 2295.0], [10.3, 2327.0], [10.4, 2410.0], [10.5, 2425.0], [10.6, 2438.0], [10.7, 2454.0], [10.8, 2455.0], [10.9, 2465.0], [11.0, 2470.0], [11.1, 2518.0], [11.2, 2522.0], [11.3, 2554.0], [11.4, 2576.0], [11.5, 2829.0], [11.6, 3134.0], [11.7, 3209.0], [11.8, 3620.0], [11.9, 3635.0], [12.0, 3703.0], [12.1, 3716.0], [12.2, 4036.0], [12.3, 4081.0], [12.4, 4085.0], [12.5, 4109.0], [12.6, 4114.0], [12.7, 4153.0], [12.8, 4169.0], [12.9, 4219.0], [13.0, 4295.0], [13.1, 4375.0], [13.2, 4447.0], [13.3, 4447.0], [13.4, 4448.0], [13.5, 4449.0], [13.6, 4450.0], [13.7, 4459.0], [13.8, 4550.0], [13.9, 4559.0], [14.0, 4568.0], [14.1, 4578.0], [14.2, 4579.0], [14.3, 4600.0], [14.4, 4611.0], [14.5, 4615.0], [14.6, 4620.0], [14.7, 4622.0], [14.8, 4730.0], [14.9, 4730.0], [15.0, 4735.0], [15.1, 4758.0], [15.2, 4923.0], [15.3, 5024.0], [15.4, 5029.0], [15.5, 5214.0], [15.6, 5280.0], [15.7, 5282.0], [15.8, 5339.0], [15.9, 5340.0], [16.0, 5427.0], [16.1, 5516.0], [16.2, 5524.0], [16.3, 5526.0], [16.4, 5532.0], [16.5, 5540.0], [16.6, 5545.0], [16.7, 5547.0], [16.8, 5556.0], [16.9, 5557.0], [17.0, 5558.0], [17.1, 5676.0], [17.2, 5698.0], [17.3, 5943.0], [17.4, 5947.0], [17.5, 5949.0], [17.6, 5951.0], [17.7, 5958.0], [17.8, 5959.0], [17.9, 6063.0], [18.0, 6077.0], [18.1, 6081.0], [18.2, 6085.0], [18.3, 6098.0], [18.4, 6098.0], [18.5, 6101.0], [18.6, 6103.0], [18.7, 6134.0], [18.8, 6138.0], [18.9, 6138.0], [19.0, 6164.0], [19.1, 6185.0], [19.2, 6186.0], [19.3, 6191.0], [19.4, 6297.0], [19.5, 6317.0], [19.6, 6327.0], [19.7, 6335.0], [19.8, 6349.0], [19.9, 6489.0], [20.0, 6489.0], [20.1, 6494.0], [20.2, 6501.0], [20.3, 6501.0], [20.4, 6502.0], [20.5, 6503.0], [20.6, 6506.0], [20.7, 6506.0], [20.8, 6508.0], [20.9, 6509.0], [21.0, 6510.0], [21.1, 6515.0], [21.2, 6516.0], [21.3, 6517.0], [21.4, 6518.0], [21.5, 6519.0], [21.6, 6524.0], [21.7, 6525.0], [21.8, 6528.0], [21.9, 6536.0], [22.0, 6538.0], [22.1, 6538.0], [22.2, 6538.0], [22.3, 6539.0], [22.4, 6541.0], [22.5, 6544.0], [22.6, 6551.0], [22.7, 6552.0], [22.8, 6555.0], [22.9, 6558.0], [23.0, 6562.0], [23.1, 6565.0], [23.2, 6566.0], [23.3, 6569.0], [23.4, 6570.0], [23.5, 6573.0], [23.6, 6574.0], [23.7, 6579.0], [23.8, 6581.0], [23.9, 6583.0], [24.0, 6586.0], [24.1, 6590.0], [24.2, 6591.0], [24.3, 6594.0], [24.4, 6595.0], [24.5, 6597.0], [24.6, 6599.0], [24.7, 6599.0], [24.8, 6603.0], [24.9, 6605.0], [25.0, 6608.0], [25.1, 6609.0], [25.2, 6609.0], [25.3, 6613.0], [25.4, 6614.0], [25.5, 6615.0], [25.6, 6619.0], [25.7, 6620.0], [25.8, 6622.0], [25.9, 6622.0], [26.0, 6623.0], [26.1, 6623.0], [26.2, 6625.0], [26.3, 6628.0], [26.4, 6629.0], [26.5, 6638.0], [26.6, 6639.0], [26.7, 6642.0], [26.8, 6643.0], [26.9, 6645.0], [27.0, 6646.0], [27.1, 6650.0], [27.2, 6652.0], [27.3, 6653.0], [27.4, 6654.0], [27.5, 6654.0], [27.6, 6654.0], [27.7, 6657.0], [27.8, 6658.0], [27.9, 6659.0], [28.0, 6659.0], [28.1, 6660.0], [28.2, 6661.0], [28.3, 6662.0], [28.4, 6663.0], [28.5, 6665.0], [28.6, 6674.0], [28.7, 6676.0], [28.8, 6677.0], [28.9, 6680.0], [29.0, 6683.0], [29.1, 6685.0], [29.2, 6686.0], [29.3, 6692.0], [29.4, 6692.0], [29.5, 6693.0], [29.6, 6699.0], [29.7, 6701.0], [29.8, 6701.0], [29.9, 6704.0], [30.0, 6704.0], [30.1, 6706.0], [30.2, 6707.0], [30.3, 6707.0], [30.4, 6709.0], [30.5, 6712.0], [30.6, 6715.0], [30.7, 6716.0], [30.8, 6719.0], [30.9, 6719.0], [31.0, 6721.0], [31.1, 6721.0], [31.2, 6723.0], [31.3, 6724.0], [31.4, 6724.0], [31.5, 6725.0], [31.6, 6728.0], [31.7, 6728.0], [31.8, 6729.0], [31.9, 6732.0], [32.0, 6737.0], [32.1, 6740.0], [32.2, 6742.0], [32.3, 6742.0], [32.4, 6745.0], [32.5, 6746.0], [32.6, 6746.0], [32.7, 6747.0], [32.8, 6750.0], [32.9, 6751.0], [33.0, 6753.0], [33.1, 6755.0], [33.2, 6756.0], [33.3, 6760.0], [33.4, 6761.0], [33.5, 6769.0], [33.6, 6769.0], [33.7, 6770.0], [33.8, 6770.0], [33.9, 6771.0], [34.0, 6772.0], [34.1, 6773.0], [34.2, 6774.0], [34.3, 6775.0], [34.4, 6776.0], [34.5, 6776.0], [34.6, 6777.0], [34.7, 6778.0], [34.8, 6779.0], [34.9, 6779.0], [35.0, 6779.0], [35.1, 6780.0], [35.2, 6781.0], [35.3, 6781.0], [35.4, 6782.0], [35.5, 6782.0], [35.6, 6782.0], [35.7, 6784.0], [35.8, 6784.0], [35.9, 6785.0], [36.0, 6785.0], [36.1, 6786.0], [36.2, 6786.0], [36.3, 6787.0], [36.4, 6787.0], [36.5, 6788.0], [36.6, 6789.0], [36.7, 6789.0], [36.8, 6790.0], [36.9, 6790.0], [37.0, 6791.0], [37.1, 6791.0], [37.2, 6793.0], [37.3, 6793.0], [37.4, 6794.0], [37.5, 6794.0], [37.6, 6795.0], [37.7, 6795.0], [37.8, 6795.0], [37.9, 6795.0], [38.0, 6796.0], [38.1, 6796.0], [38.2, 6797.0], [38.3, 6799.0], [38.4, 6799.0], [38.5, 6800.0], [38.6, 6800.0], [38.7, 6800.0], [38.8, 6800.0], [38.9, 6801.0], [39.0, 6802.0], [39.1, 6804.0], [39.2, 6804.0], [39.3, 6804.0], [39.4, 6805.0], [39.5, 6807.0], [39.6, 6807.0], [39.7, 6808.0], [39.8, 6808.0], [39.9, 6810.0], [40.0, 6810.0], [40.1, 6811.0], [40.2, 6811.0], [40.3, 6811.0], [40.4, 6812.0], [40.5, 6812.0], [40.6, 6813.0], [40.7, 6814.0], [40.8, 6815.0], [40.9, 6815.0], [41.0, 6815.0], [41.1, 6816.0], [41.2, 6816.0], [41.3, 6816.0], [41.4, 6816.0], [41.5, 6816.0], [41.6, 6817.0], [41.7, 6817.0], [41.8, 6818.0], [41.9, 6819.0], [42.0, 6819.0], [42.1, 6819.0], [42.2, 6820.0], [42.3, 6820.0], [42.4, 6820.0], [42.5, 6820.0], [42.6, 6820.0], [42.7, 6820.0], [42.8, 6821.0], [42.9, 6821.0], [43.0, 6822.0], [43.1, 6822.0], [43.2, 6822.0], [43.3, 6822.0], [43.4, 6822.0], [43.5, 6822.0], [43.6, 6822.0], [43.7, 6822.0], [43.8, 6823.0], [43.9, 6823.0], [44.0, 6823.0], [44.1, 6824.0], [44.2, 6824.0], [44.3, 6826.0], [44.4, 6830.0], [44.5, 6831.0], [44.6, 6831.0], [44.7, 6832.0], [44.8, 6834.0], [44.9, 6834.0], [45.0, 6835.0], [45.1, 6835.0], [45.2, 6836.0], [45.3, 6836.0], [45.4, 6836.0], [45.5, 6838.0], [45.6, 6839.0], [45.7, 6840.0], [45.8, 6840.0], [45.9, 6840.0], [46.0, 6840.0], [46.1, 6842.0], [46.2, 6842.0], [46.3, 6843.0], [46.4, 6843.0], [46.5, 6843.0], [46.6, 6844.0], [46.7, 6846.0], [46.8, 6846.0], [46.9, 6846.0], [47.0, 6846.0], [47.1, 6847.0], [47.2, 6849.0], [47.3, 6849.0], [47.4, 6850.0], [47.5, 6850.0], [47.6, 6851.0], [47.7, 6851.0], [47.8, 6852.0], [47.9, 6852.0], [48.0, 6852.0], [48.1, 6853.0], [48.2, 6854.0], [48.3, 6854.0], [48.4, 6856.0], [48.5, 6856.0], [48.6, 6856.0], [48.7, 6856.0], [48.8, 6856.0], [48.9, 6856.0], [49.0, 6858.0], [49.1, 6859.0], [49.2, 6859.0], [49.3, 6860.0], [49.4, 6861.0], [49.5, 6861.0], [49.6, 6861.0], [49.7, 6862.0], [49.8, 6862.0], [49.9, 6863.0], [50.0, 6863.0], [50.1, 6864.0], [50.2, 6866.0], [50.3, 6867.0], [50.4, 6867.0], [50.5, 6869.0], [50.6, 6870.0], [50.7, 6871.0], [50.8, 6871.0], [50.9, 6872.0], [51.0, 6873.0], [51.1, 6874.0], [51.2, 6874.0], [51.3, 6875.0], [51.4, 6877.0], [51.5, 6880.0], [51.6, 6882.0], [51.7, 6886.0], [51.8, 6890.0], [51.9, 6892.0], [52.0, 6893.0], [52.1, 6893.0], [52.2, 6896.0], [52.3, 6900.0], [52.4, 6901.0], [52.5, 6902.0], [52.6, 6905.0], [52.7, 6907.0], [52.8, 6909.0], [52.9, 6910.0], [53.0, 6922.0], [53.1, 6943.0], [53.2, 6963.0], [53.3, 6978.0], [53.4, 6979.0], [53.5, 6982.0], [53.6, 6985.0], [53.7, 6989.0], [53.8, 6990.0], [53.9, 6997.0], [54.0, 7014.0], [54.1, 7045.0], [54.2, 7048.0], [54.3, 7048.0], [54.4, 7050.0], [54.5, 7051.0], [54.6, 7053.0], [54.7, 7053.0], [54.8, 7054.0], [54.9, 7054.0], [55.0, 7056.0], [55.1, 7056.0], [55.2, 7070.0], [55.3, 7070.0], [55.4, 7074.0], [55.5, 7074.0], [55.6, 7075.0], [55.7, 7076.0], [55.8, 7078.0], [55.9, 7079.0], [56.0, 7080.0], [56.1, 7082.0], [56.2, 7085.0], [56.3, 7086.0], [56.4, 7091.0], [56.5, 7093.0], [56.6, 7096.0], [56.7, 7098.0], [56.8, 7100.0], [56.9, 7102.0], [57.0, 7103.0], [57.1, 7108.0], [57.2, 7108.0], [57.3, 7110.0], [57.4, 7126.0], [57.5, 7130.0], [57.6, 7142.0], [57.7, 7159.0], [57.8, 7173.0], [57.9, 7180.0], [58.0, 7192.0], [58.1, 7193.0], [58.2, 7195.0], [58.3, 7238.0], [58.4, 7255.0], [58.5, 7259.0], [58.6, 7280.0], [58.7, 7284.0], [58.8, 7288.0], [58.9, 7288.0], [59.0, 7289.0], [59.1, 7291.0], [59.2, 7297.0], [59.3, 7297.0], [59.4, 7303.0], [59.5, 7307.0], [59.6, 7312.0], [59.7, 7323.0], [59.8, 7332.0], [59.9, 7345.0], [60.0, 7349.0], [60.1, 7377.0], [60.2, 7380.0], [60.3, 7385.0], [60.4, 7388.0], [60.5, 7390.0], [60.6, 7392.0], [60.7, 7394.0], [60.8, 7394.0], [60.9, 7395.0], [61.0, 7396.0], [61.1, 7399.0], [61.2, 7402.0], [61.3, 7406.0], [61.4, 7407.0], [61.5, 7412.0], [61.6, 7414.0], [61.7, 7415.0], [61.8, 7417.0], [61.9, 7417.0], [62.0, 7421.0], [62.1, 7437.0], [62.2, 7451.0], [62.3, 7453.0], [62.4, 7457.0], [62.5, 7465.0], [62.6, 7468.0], [62.7, 7470.0], [62.8, 7472.0], [62.9, 7473.0], [63.0, 7482.0], [63.1, 7490.0], [63.2, 7492.0], [63.3, 7495.0], [63.4, 7495.0], [63.5, 7500.0], [63.6, 7504.0], [63.7, 7508.0], [63.8, 7513.0], [63.9, 7520.0], [64.0, 7520.0], [64.1, 7526.0], [64.2, 7529.0], [64.3, 7531.0], [64.4, 7532.0], [64.5, 7535.0], [64.6, 7541.0], [64.7, 7542.0], [64.8, 7543.0], [64.9, 7552.0], [65.0, 7553.0], [65.1, 7560.0], [65.2, 7565.0], [65.3, 7586.0], [65.4, 7611.0], [65.5, 7654.0], [65.6, 7658.0], [65.7, 7682.0], [65.8, 7702.0], [65.9, 7716.0], [66.0, 7730.0], [66.1, 7755.0], [66.2, 7776.0], [66.3, 7778.0], [66.4, 7787.0], [66.5, 7788.0], [66.6, 7795.0], [66.7, 7800.0], [66.8, 7801.0], [66.9, 7825.0], [67.0, 7826.0], [67.1, 7826.0], [67.2, 7844.0], [67.3, 7856.0], [67.4, 7860.0], [67.5, 7869.0], [67.6, 7870.0], [67.7, 7888.0], [67.8, 7910.0], [67.9, 7921.0], [68.0, 7922.0], [68.1, 7952.0], [68.2, 7959.0], [68.3, 7960.0], [68.4, 7962.0], [68.5, 7964.0], [68.6, 7969.0], [68.7, 7969.0], [68.8, 7970.0], [68.9, 7970.0], [69.0, 7971.0], [69.1, 7974.0], [69.2, 7976.0], [69.3, 7976.0], [69.4, 7978.0], [69.5, 7980.0], [69.6, 7981.0], [69.7, 7981.0], [69.8, 7985.0], [69.9, 7989.0], [70.0, 7996.0], [70.1, 8004.0], [70.2, 8016.0], [70.3, 8033.0], [70.4, 8040.0], [70.5, 8048.0], [70.6, 8049.0], [70.7, 8052.0], [70.8, 8060.0], [70.9, 8082.0], [71.0, 8085.0], [71.1, 8088.0], [71.2, 8093.0], [71.3, 8094.0], [71.4, 8095.0], [71.5, 8096.0], [71.6, 8098.0], [71.7, 8100.0], [71.8, 8102.0], [71.9, 8104.0], [72.0, 8109.0], [72.1, 8112.0], [72.2, 8112.0], [72.3, 8114.0], [72.4, 8115.0], [72.5, 8116.0], [72.6, 8116.0], [72.7, 8117.0], [72.8, 8120.0], [72.9, 8121.0], [73.0, 8122.0], [73.1, 8124.0], [73.2, 8124.0], [73.3, 8125.0], [73.4, 8126.0], [73.5, 8126.0], [73.6, 8127.0], [73.7, 8130.0], [73.8, 8131.0], [73.9, 8132.0], [74.0, 8132.0], [74.1, 8133.0], [74.2, 8135.0], [74.3, 8137.0], [74.4, 8137.0], [74.5, 8137.0], [74.6, 8137.0], [74.7, 8138.0], [74.8, 8141.0], [74.9, 8144.0], [75.0, 8144.0], [75.1, 8145.0], [75.2, 8145.0], [75.3, 8145.0], [75.4, 8146.0], [75.5, 8146.0], [75.6, 8147.0], [75.7, 8148.0], [75.8, 8148.0], [75.9, 8148.0], [76.0, 8150.0], [76.1, 8154.0], [76.2, 8154.0], [76.3, 8156.0], [76.4, 8157.0], [76.5, 8158.0], [76.6, 8158.0], [76.7, 8159.0], [76.8, 8159.0], [76.9, 8159.0], [77.0, 8161.0], [77.1, 8161.0], [77.2, 8161.0], [77.3, 8162.0], [77.4, 8162.0], [77.5, 8162.0], [77.6, 8164.0], [77.7, 8164.0], [77.8, 8164.0], [77.9, 8165.0], [78.0, 8165.0], [78.1, 8166.0], [78.2, 8167.0], [78.3, 8168.0], [78.4, 8168.0], [78.5, 8170.0], [78.6, 8172.0], [78.7, 8172.0], [78.8, 8173.0], [78.9, 8173.0], [79.0, 8174.0], [79.1, 8174.0], [79.2, 8175.0], [79.3, 8175.0], [79.4, 8175.0], [79.5, 8175.0], [79.6, 8175.0], [79.7, 8176.0], [79.8, 8177.0], [79.9, 8177.0], [80.0, 8177.0], [80.1, 8180.0], [80.2, 8180.0], [80.3, 8181.0], [80.4, 8181.0], [80.5, 8183.0], [80.6, 8183.0], [80.7, 8183.0], [80.8, 8184.0], [80.9, 8186.0], [81.0, 8186.0], [81.1, 8186.0], [81.2, 8187.0], [81.3, 8188.0], [81.4, 8188.0], [81.5, 8188.0], [81.6, 8188.0], [81.7, 8188.0], [81.8, 8188.0], [81.9, 8190.0], [82.0, 8190.0], [82.1, 8190.0], [82.2, 8191.0], [82.3, 8191.0], [82.4, 8193.0], [82.5, 8193.0], [82.6, 8194.0], [82.7, 8194.0], [82.8, 8194.0], [82.9, 8194.0], [83.0, 8195.0], [83.1, 8196.0], [83.2, 8198.0], [83.3, 8199.0], [83.4, 8199.0], [83.5, 8200.0], [83.6, 8201.0], [83.7, 8201.0], [83.8, 8201.0], [83.9, 8202.0], [84.0, 8203.0], [84.1, 8206.0], [84.2, 8206.0], [84.3, 8207.0], [84.4, 8208.0], [84.5, 8208.0], [84.6, 8208.0], [84.7, 8209.0], [84.8, 8211.0], [84.9, 8211.0], [85.0, 8211.0], [85.1, 8211.0], [85.2, 8211.0], [85.3, 8213.0], [85.4, 8213.0], [85.5, 8213.0], [85.6, 8213.0], [85.7, 8214.0], [85.8, 8214.0], [85.9, 8214.0], [86.0, 8214.0], [86.1, 8216.0], [86.2, 8216.0], [86.3, 8219.0], [86.4, 8219.0], [86.5, 8219.0], [86.6, 8220.0], [86.7, 8221.0], [86.8, 8222.0], [86.9, 8224.0], [87.0, 8225.0], [87.1, 8226.0], [87.2, 8226.0], [87.3, 8227.0], [87.4, 8228.0], [87.5, 8229.0], [87.6, 8229.0], [87.7, 8230.0], [87.8, 8230.0], [87.9, 8231.0], [88.0, 8231.0], [88.1, 8232.0], [88.2, 8232.0], [88.3, 8232.0], [88.4, 8235.0], [88.5, 8237.0], [88.6, 8237.0], [88.7, 8238.0], [88.8, 8240.0], [88.9, 8241.0], [89.0, 8241.0], [89.1, 8243.0], [89.2, 8243.0], [89.3, 8243.0], [89.4, 8245.0], [89.5, 8246.0], [89.6, 8249.0], [89.7, 8250.0], [89.8, 8250.0], [89.9, 8251.0], [90.0, 8251.0], [90.1, 8253.0], [90.2, 8253.0], [90.3, 8254.0], [90.4, 8255.0], [90.5, 8256.0], [90.6, 8257.0], [90.7, 8257.0], [90.8, 8258.0], [90.9, 8260.0], [91.0, 8262.0], [91.1, 8264.0], [91.2, 8273.0], [91.3, 8273.0], [91.4, 8276.0], [91.5, 8277.0], [91.6, 8279.0], [91.7, 8279.0], [91.8, 8284.0], [91.9, 8286.0], [92.0, 8287.0], [92.1, 8290.0], [92.2, 8293.0], [92.3, 8298.0], [92.4, 8302.0], [92.5, 8303.0], [92.6, 8305.0], [92.7, 8306.0], [92.8, 8307.0], [92.9, 8310.0], [93.0, 8312.0], [93.1, 8315.0], [93.2, 8315.0], [93.3, 8321.0], [93.4, 8323.0], [93.5, 8328.0], [93.6, 8330.0], [93.7, 8402.0], [93.8, 8407.0], [93.9, 8408.0], [94.0, 8412.0], [94.1, 8416.0], [94.2, 8416.0], [94.3, 8418.0], [94.4, 8422.0], [94.5, 8425.0], [94.6, 8429.0], [94.7, 8432.0], [94.8, 8436.0], [94.9, 8439.0], [95.0, 8441.0], [95.1, 8442.0], [95.2, 8445.0], [95.3, 8446.0], [95.4, 8450.0], [95.5, 8453.0], [95.6, 8456.0], [95.7, 8458.0], [95.8, 8459.0], [95.9, 8461.0], [96.0, 8462.0], [96.1, 8564.0], [96.2, 8624.0], [96.3, 8630.0], [96.4, 8635.0], [96.5, 8636.0], [96.6, 8640.0], [96.7, 8640.0], [96.8, 8643.0], [96.9, 8646.0], [97.0, 8647.0], [97.1, 8647.0], [97.2, 8651.0], [97.3, 8655.0], [97.4, 8658.0], [97.5, 8660.0], [97.6, 8665.0], [97.7, 8669.0], [97.8, 8671.0], [97.9, 8675.0], [98.0, 8676.0], [98.1, 8680.0], [98.2, 8682.0], [98.3, 8683.0], [98.4, 8684.0], [98.5, 8688.0], [98.6, 8690.0], [98.7, 8694.0], [98.8, 8699.0], [98.9, 8701.0], [99.0, 8703.0], [99.1, 8705.0], [99.2, 8705.0], [99.3, 8709.0], [99.4, 8711.0], [99.5, 8716.0], [99.6, 8719.0], [99.7, 8721.0], [99.8, 8725.0], [99.9, 8728.0]], "isOverall": false, "label": "Create", "isController": false}, {"data": [[0.0, 885.0], [0.1, 1048.0], [0.2, 1258.0], [0.3, 1258.0], [0.4, 1567.0], [0.5, 1709.0], [0.6, 1818.0], [0.7, 1915.0], [0.8, 1956.0], [0.9, 2080.0], [1.0, 2174.0], [1.1, 2230.0], [1.2, 2366.0], [1.3, 2443.0], [1.4, 2443.0], [1.5, 2456.0], [1.6, 2555.0], [1.7, 2710.0], [1.8, 2801.0], [1.9, 2866.0], [2.0, 2961.0], [2.1, 3008.0], [2.2, 3078.0], [2.3, 3165.0], [2.4, 3212.0], [2.5, 3269.0], [2.6, 3325.0], [2.7, 3393.0], [2.8, 3511.0], [2.9, 3543.0], [3.0, 3613.0], [3.1, 3621.0], [3.2, 3666.0], [3.3, 3721.0], [3.4, 3760.0], [3.5, 3816.0], [3.6, 3899.0], [3.7, 3945.0], [3.8, 3967.0], [3.9, 4005.0], [4.0, 4048.0], [4.1, 4095.0], [4.2, 4140.0], [4.3, 4185.0], [4.4, 4273.0], [4.5, 4369.0], [4.6, 4387.0], [4.7, 4425.0], [4.8, 4500.0], [4.9, 4540.0], [5.0, 4599.0], [5.1, 4630.0], [5.2, 4675.0], [5.3, 4723.0], [5.4, 4801.0], [5.5, 4835.0], [5.6, 4904.0], [5.7, 4921.0], [5.8, 5035.0], [5.9, 5077.0], [6.0, 5082.0], [6.1, 5125.0], [6.2, 5178.0], [6.3, 5201.0], [6.4, 5259.0], [6.5, 5368.0], [6.6, 5415.0], [6.7, 5465.0], [6.8, 5486.0], [6.9, 5513.0], [7.0, 5536.0], [7.1, 5584.0], [7.2, 5688.0], [7.3, 5701.0], [7.4, 5723.0], [7.5, 5770.0], [7.6, 5828.0], [7.7, 5860.0], [7.8, 5930.0], [7.9, 5973.0], [8.0, 6021.0], [8.1, 6097.0], [8.2, 6120.0], [8.3, 6150.0], [8.4, 6176.0], [8.5, 6286.0], [8.6, 6310.0], [8.7, 6327.0], [8.8, 6434.0], [8.9, 6483.0], [9.0, 6508.0], [9.1, 6523.0], [9.2, 6542.0], [9.3, 6571.0], [9.4, 6618.0], [9.5, 6659.0], [9.6, 6702.0], [9.7, 6704.0], [9.8, 6744.0], [9.9, 6748.0], [10.0, 6861.0], [10.1, 6987.0], [10.2, 7101.0], [10.3, 7168.0], [10.4, 7291.0], [10.5, 7320.0], [10.6, 7413.0], [10.7, 7500.0], [10.8, 7625.0], [10.9, 7754.0], [11.0, 7867.0], [11.1, 7986.0], [11.2, 8029.0], [11.3, 8140.0], [11.4, 8212.0], [11.5, 8239.0], [11.6, 8249.0], [11.7, 8306.0], [11.8, 8333.0], [11.9, 8463.0], [12.0, 8561.0], [12.1, 8621.0], [12.2, 8727.0], [12.3, 8729.0], [12.4, 8871.0], [12.5, 8979.0], [12.6, 9124.0], [12.7, 9266.0], [12.8, 9357.0], [12.9, 9413.0], [13.0, 9416.0], [13.1, 9654.0], [13.2, 9694.0], [13.3, 9824.0], [13.4, 9954.0], [13.5, 10085.0], [13.6, 10198.0], [13.7, 10212.0], [13.8, 10244.0], [13.9, 10364.0], [14.0, 10496.0], [14.1, 10661.0], [14.2, 10742.0], [14.3, 10853.0], [14.4, 10916.0], [14.5, 11034.0], [14.6, 11159.0], [14.7, 11289.0], [14.8, 11318.0], [14.9, 11472.0], [15.0, 11512.0], [15.1, 11553.0], [15.2, 11579.0], [15.3, 11592.0], [15.4, 11600.0], [15.5, 11664.0], [15.6, 11706.0], [15.7, 11735.0], [15.8, 11778.0], [15.9, 11889.0], [16.0, 11906.0], [16.1, 11935.0], [16.2, 12076.0], [16.3, 12154.0], [16.4, 12271.0], [16.5, 12384.0], [16.6, 12504.0], [16.7, 12625.0], [16.8, 12737.0], [16.9, 12795.0], [17.0, 12843.0], [17.1, 12883.0], [17.2, 12903.0], [17.3, 12947.0], [17.4, 12968.0], [17.5, 12990.0], [17.6, 13063.0], [17.7, 13153.0], [17.8, 13170.0], [17.9, 13240.0], [18.0, 13250.0], [18.1, 13327.0], [18.2, 13396.0], [18.3, 13466.0], [18.4, 13540.0], [18.5, 13609.0], [18.6, 13681.0], [18.7, 13709.0], [18.8, 13789.0], [18.9, 13860.0], [19.0, 13881.0], [19.1, 13888.0], [19.2, 13888.0], [19.3, 13911.0], [19.4, 13931.0], [19.5, 13933.0], [19.6, 13946.0], [19.7, 13960.0], [19.8, 13989.0], [19.9, 14000.0], [20.0, 14003.0], [20.1, 14008.0], [20.2, 14020.0], [20.3, 14054.0], [20.4, 14064.0], [20.5, 14075.0], [20.6, 14091.0], [20.7, 14152.0], [20.8, 14223.0], [20.9, 14296.0], [21.0, 14358.0], [21.1, 14437.0], [21.2, 14506.0], [21.3, 14574.0], [21.4, 14617.0], [21.5, 14660.0], [21.6, 14701.0], [21.7, 14753.0], [21.8, 14797.0], [21.9, 14847.0], [22.0, 14899.0], [22.1, 14937.0], [22.2, 14977.0], [22.3, 15014.0], [22.4, 15054.0], [22.5, 15093.0], [22.6, 15142.0], [22.7, 15196.0], [22.8, 15239.0], [22.9, 15288.0], [23.0, 15322.0], [23.1, 15395.0], [23.2, 15439.0], [23.3, 15490.0], [23.4, 15532.0], [23.5, 15576.0], [23.6, 15611.0], [23.7, 15655.0], [23.8, 15692.0], [23.9, 15765.0], [24.0, 15833.0], [24.1, 15897.0], [24.2, 15980.0], [24.3, 16058.0], [24.4, 16138.0], [24.5, 16184.0], [24.6, 16219.0], [24.7, 16260.0], [24.8, 16304.0], [24.9, 16346.0], [25.0, 16396.0], [25.1, 16460.0], [25.2, 16527.0], [25.3, 16533.0], [25.4, 16607.0], [25.5, 16652.0], [25.6, 16694.0], [25.7, 16726.0], [25.8, 16766.0], [25.9, 16810.0], [26.0, 16850.0], [26.1, 16889.0], [26.2, 16927.0], [26.3, 16971.0], [26.4, 17013.0], [26.5, 17047.0], [26.6, 17081.0], [26.7, 17117.0], [26.8, 17157.0], [26.9, 17213.0], [27.0, 17253.0], [27.1, 17290.0], [27.2, 17331.0], [27.3, 17374.0], [27.4, 17417.0], [27.5, 17466.0], [27.6, 17504.0], [27.7, 17544.0], [27.8, 17586.0], [27.9, 17623.0], [28.0, 17656.0], [28.1, 17698.0], [28.2, 17715.0], [28.3, 17747.0], [28.4, 17804.0], [28.5, 17840.0], [28.6, 17887.0], [28.7, 17944.0], [28.8, 17981.0], [28.9, 18021.0], [29.0, 18063.0], [29.1, 18102.0], [29.2, 18141.0], [29.3, 18183.0], [29.4, 18227.0], [29.5, 18265.0], [29.6, 18312.0], [29.7, 18369.0], [29.8, 18438.0], [29.9, 18475.0], [30.0, 18514.0], [30.1, 18548.0], [30.2, 18587.0], [30.3, 18626.0], [30.4, 18673.0], [30.5, 18703.0], [30.6, 18731.0], [30.7, 18742.0], [30.8, 18780.0], [30.9, 18815.0], [31.0, 18853.0], [31.1, 18896.0], [31.2, 18941.0], [31.3, 19000.0], [31.4, 19067.0], [31.5, 19105.0], [31.6, 19151.0], [31.7, 19188.0], [31.8, 19223.0], [31.9, 19261.0], [32.0, 19304.0], [32.1, 19361.0], [32.2, 19395.0], [32.3, 19441.0], [32.4, 19493.0], [32.5, 19541.0], [32.6, 19602.0], [32.7, 19648.0], [32.8, 19680.0], [32.9, 19718.0], [33.0, 19762.0], [33.1, 19828.0], [33.2, 19847.0], [33.3, 19870.0], [33.4, 19907.0], [33.5, 19921.0], [33.6, 19965.0], [33.7, 20006.0], [33.8, 20046.0], [33.9, 20115.0], [34.0, 20120.0], [34.1, 20157.0], [34.2, 20199.0], [34.3, 20241.0], [34.4, 20283.0], [34.5, 20324.0], [34.6, 20363.0], [34.7, 20403.0], [34.8, 20442.0], [34.9, 20476.0], [35.0, 20508.0], [35.1, 20554.0], [35.2, 20614.0], [35.3, 20650.0], [35.4, 20701.0], [35.5, 20812.0], [35.6, 20886.0], [35.7, 20946.0], [35.8, 21009.0], [35.9, 21080.0], [36.0, 21149.0], [36.1, 21205.0], [36.2, 21207.0], [36.3, 21213.0], [36.4, 21231.0], [36.5, 21232.0], [36.6, 21308.0], [36.7, 21384.0], [36.8, 21445.0], [36.9, 21524.0], [37.0, 21597.0], [37.1, 21674.0], [37.2, 21735.0], [37.3, 21739.0], [37.4, 21857.0], [37.5, 21896.0], [37.6, 21912.0], [37.7, 21977.0], [37.8, 22040.0], [37.9, 22099.0], [38.0, 22154.0], [38.1, 22234.0], [38.2, 22281.0], [38.3, 22342.0], [38.4, 22401.0], [38.5, 22456.0], [38.6, 22492.0], [38.7, 22533.0], [38.8, 22585.0], [38.9, 22626.0], [39.0, 22663.0], [39.1, 22714.0], [39.2, 22756.0], [39.3, 22799.0], [39.4, 22827.0], [39.5, 22871.0], [39.6, 22910.0], [39.7, 22950.0], [39.8, 23023.0], [39.9, 23078.0], [40.0, 23116.0], [40.1, 23184.0], [40.2, 23192.0], [40.3, 23246.0], [40.4, 23307.0], [40.5, 23344.0], [40.6, 23382.0], [40.7, 23427.0], [40.8, 23461.0], [40.9, 23517.0], [41.0, 23552.0], [41.1, 23610.0], [41.2, 23651.0], [41.3, 23701.0], [41.4, 23739.0], [41.5, 23791.0], [41.6, 23793.0], [41.7, 23817.0], [41.8, 23883.0], [41.9, 23931.0], [42.0, 23963.0], [42.1, 24001.0], [42.2, 24053.0], [42.3, 24092.0], [42.4, 24133.0], [42.5, 24196.0], [42.6, 24243.0], [42.7, 24282.0], [42.8, 24326.0], [42.9, 24357.0], [43.0, 24396.0], [43.1, 24442.0], [43.2, 24488.0], [43.3, 24536.0], [43.4, 24578.0], [43.5, 24593.0], [43.6, 24632.0], [43.7, 24679.0], [43.8, 24745.0], [43.9, 24780.0], [44.0, 24815.0], [44.1, 24856.0], [44.2, 24897.0], [44.3, 24944.0], [44.4, 24983.0], [44.5, 25045.0], [44.6, 25081.0], [44.7, 25122.0], [44.8, 25157.0], [44.9, 25201.0], [45.0, 25240.0], [45.1, 25286.0], [45.2, 25332.0], [45.3, 25379.0], [45.4, 25416.0], [45.5, 25458.0], [45.6, 25497.0], [45.7, 25536.0], [45.8, 25577.0], [45.9, 25610.0], [46.0, 25648.0], [46.1, 25686.0], [46.2, 25730.0], [46.3, 25765.0], [46.4, 25812.0], [46.5, 25846.0], [46.6, 25890.0], [46.7, 25958.0], [46.8, 26031.0], [46.9, 26069.0], [47.0, 26121.0], [47.1, 26159.0], [47.2, 26199.0], [47.3, 26238.0], [47.4, 26344.0], [47.5, 26347.0], [47.6, 26351.0], [47.7, 26354.0], [47.8, 26370.0], [47.9, 26410.0], [48.0, 26444.0], [48.1, 26487.0], [48.2, 26525.0], [48.3, 26565.0], [48.4, 26604.0], [48.5, 26645.0], [48.6, 26685.0], [48.7, 26727.0], [48.8, 26767.0], [48.9, 26801.0], [49.0, 26840.0], [49.1, 26882.0], [49.2, 26921.0], [49.3, 26958.0], [49.4, 27003.0], [49.5, 27046.0], [49.6, 27106.0], [49.7, 27150.0], [49.8, 27194.0], [49.9, 27234.0], [50.0, 27276.0], [50.1, 27306.0], [50.2, 27344.0], [50.3, 27388.0], [50.4, 27428.0], [50.5, 27447.0], [50.6, 27479.0], [50.7, 27516.0], [50.8, 27566.0], [50.9, 27610.0], [51.0, 27671.0], [51.1, 27719.0], [51.2, 27773.0], [51.3, 27795.0], [51.4, 27839.0], [51.5, 27896.0], [51.6, 27961.0], [51.7, 28025.0], [51.8, 28094.0], [51.9, 28156.0], [52.0, 28218.0], [52.1, 28283.0], [52.2, 28342.0], [52.3, 28409.0], [52.4, 28483.0], [52.5, 28547.0], [52.6, 28614.0], [52.7, 28676.0], [52.8, 28740.0], [52.9, 28796.0], [53.0, 28864.0], [53.1, 28898.0], [53.2, 28936.0], [53.3, 28975.0], [53.4, 29016.0], [53.5, 29052.0], [53.6, 29091.0], [53.7, 29131.0], [53.8, 29174.0], [53.9, 29203.0], [54.0, 29244.0], [54.1, 29282.0], [54.2, 29329.0], [54.3, 29384.0], [54.4, 29429.0], [54.5, 29473.0], [54.6, 29506.0], [54.7, 29553.0], [54.8, 29586.0], [54.9, 29634.0], [55.0, 29676.0], [55.1, 29712.0], [55.2, 29758.0], [55.3, 29804.0], [55.4, 29837.0], [55.5, 29878.0], [55.6, 29915.0], [55.7, 29949.0], [55.8, 29986.0], [55.9, 30041.0], [56.0, 30079.0], [56.1, 30122.0], [56.2, 30167.0], [56.3, 30229.0], [56.4, 30290.0], [56.5, 30360.0], [56.6, 30429.0], [56.7, 30505.0], [56.8, 30548.0], [56.9, 30593.0], [57.0, 30635.0], [57.1, 30679.0], [57.2, 30723.0], [57.3, 30793.0], [57.4, 30828.0], [57.5, 30881.0], [57.6, 30899.0], [57.7, 30958.0], [57.8, 30991.0], [57.9, 31033.0], [58.0, 31074.0], [58.1, 31151.0], [58.2, 31224.0], [58.3, 31259.0], [58.4, 31263.0], [58.5, 31328.0], [58.6, 31375.0], [58.7, 31420.0], [58.8, 31464.0], [58.9, 31503.0], [59.0, 31538.0], [59.1, 31578.0], [59.2, 31621.0], [59.3, 31655.0], [59.4, 31690.0], [59.5, 31736.0], [59.6, 31768.0], [59.7, 31813.0], [59.8, 31859.0], [59.9, 31899.0], [60.0, 31945.0], [60.1, 31986.0], [60.2, 32021.0], [60.3, 32062.0], [60.4, 32107.0], [60.5, 32136.0], [60.6, 32180.0], [60.7, 32220.0], [60.8, 32256.0], [60.9, 32291.0], [61.0, 32336.0], [61.1, 32377.0], [61.2, 32413.0], [61.3, 32463.0], [61.4, 32506.0], [61.5, 32546.0], [61.6, 32589.0], [61.7, 32630.0], [61.8, 32672.0], [61.9, 32706.0], [62.0, 32758.0], [62.1, 32796.0], [62.2, 32836.0], [62.3, 32880.0], [62.4, 32928.0], [62.5, 32970.0], [62.6, 33006.0], [62.7, 33040.0], [62.8, 33087.0], [62.9, 33128.0], [63.0, 33171.0], [63.1, 33203.0], [63.2, 33251.0], [63.3, 33288.0], [63.4, 33290.0], [63.5, 33317.0], [63.6, 33335.0], [63.7, 33358.0], [63.8, 33371.0], [63.9, 33404.0], [64.0, 33404.0], [64.1, 33412.0], [64.2, 33450.0], [64.3, 33455.0], [64.4, 33459.0], [64.5, 33497.0], [64.6, 33550.0], [64.7, 33551.0], [64.8, 33591.0], [64.9, 33595.0], [65.0, 33600.0], [65.1, 33631.0], [65.2, 33639.0], [65.3, 33641.0], [65.4, 33670.0], [65.5, 33714.0], [65.6, 33763.0], [65.7, 33801.0], [65.8, 33841.0], [65.9, 33883.0], [66.0, 33895.0], [66.1, 33923.0], [66.2, 33960.0], [66.3, 34012.0], [66.4, 34037.0], [66.5, 34075.0], [66.6, 34130.0], [66.7, 34177.0], [66.8, 34214.0], [66.9, 34262.0], [67.0, 34265.0], [67.1, 34307.0], [67.2, 34311.0], [67.3, 34337.0], [67.4, 34357.0], [67.5, 34360.0], [67.6, 34402.0], [67.7, 34408.0], [67.8, 34452.0], [67.9, 34457.0], [68.0, 34504.0], [68.1, 34505.0], [68.2, 34543.0], [68.3, 34553.0], [68.4, 34593.0], [68.5, 34670.0], [68.6, 34745.0], [68.7, 34794.0], [68.8, 34811.0], [68.9, 34815.0], [69.0, 34843.0], [69.1, 34861.0], [69.2, 34872.0], [69.3, 34884.0], [69.4, 34903.0], [69.5, 34950.0], [69.6, 34955.0], [69.7, 34965.0], [69.8, 35017.0], [69.9, 35029.0], [70.0, 35086.0], [70.1, 35160.0], [70.2, 35230.0], [70.3, 35304.0], [70.4, 35375.0], [70.5, 35443.0], [70.6, 35508.0], [70.7, 35570.0], [70.8, 35578.0], [70.9, 35646.0], [71.0, 35649.0], [71.1, 35687.0], [71.2, 35719.0], [71.3, 35719.0], [71.4, 35731.0], [71.5, 35773.0], [71.6, 35812.0], [71.7, 35859.0], [71.8, 35899.0], [71.9, 35942.0], [72.0, 35986.0], [72.1, 36032.0], [72.2, 36070.0], [72.3, 36121.0], [72.4, 36169.0], [72.5, 36209.0], [72.6, 36255.0], [72.7, 36291.0], [72.8, 36327.0], [72.9, 36371.0], [73.0, 36411.0], [73.1, 36455.0], [73.2, 36501.0], [73.3, 36544.0], [73.4, 36590.0], [73.5, 36634.0], [73.6, 36672.0], [73.7, 36718.0], [73.8, 36760.0], [73.9, 36798.0], [74.0, 36843.0], [74.1, 36885.0], [74.2, 36914.0], [74.3, 36952.0], [74.4, 36999.0], [74.5, 37035.0], [74.6, 37078.0], [74.7, 37122.0], [74.8, 37162.0], [74.9, 37209.0], [75.0, 37243.0], [75.1, 37282.0], [75.2, 37323.0], [75.3, 37369.0], [75.4, 37448.0], [75.5, 37495.0], [75.6, 37537.0], [75.7, 37573.0], [75.8, 37616.0], [75.9, 37653.0], [76.0, 37697.0], [76.1, 37734.0], [76.2, 37773.0], [76.3, 37813.0], [76.4, 37856.0], [76.5, 37894.0], [76.6, 37933.0], [76.7, 37976.0], [76.8, 37989.0], [76.9, 38013.0], [77.0, 38029.0], [77.1, 38043.0], [77.2, 38071.0], [77.3, 38072.0], [77.4, 38108.0], [77.5, 38149.0], [77.6, 38192.0], [77.7, 38241.0], [77.8, 38279.0], [77.9, 38321.0], [78.0, 38367.0], [78.1, 38413.0], [78.2, 38452.0], [78.3, 38491.0], [78.4, 38541.0], [78.5, 38576.0], [78.6, 38623.0], [78.7, 38665.0], [78.8, 38715.0], [78.9, 38763.0], [79.0, 38809.0], [79.1, 38863.0], [79.2, 38911.0], [79.3, 38950.0], [79.4, 38994.0], [79.5, 39019.0], [79.6, 39057.0], [79.7, 39106.0], [79.8, 39157.0], [79.9, 39200.0], [80.0, 39238.0], [80.1, 39286.0], [80.2, 39323.0], [80.3, 39365.0], [80.4, 39410.0], [80.5, 39457.0], [80.6, 39498.0], [80.7, 39558.0], [80.8, 39600.0], [80.9, 39641.0], [81.0, 39684.0], [81.1, 39733.0], [81.2, 39780.0], [81.3, 39818.0], [81.4, 39857.0], [81.5, 39885.0], [81.6, 39927.0], [81.7, 39972.0], [81.8, 40018.0], [81.9, 40063.0], [82.0, 40102.0], [82.1, 40163.0], [82.2, 40212.0], [82.3, 40232.0], [82.4, 40269.0], [82.5, 40314.0], [82.6, 40351.0], [82.7, 40393.0], [82.8, 40439.0], [82.9, 40486.0], [83.0, 40490.0], [83.1, 40523.0], [83.2, 40537.0], [83.3, 40567.0], [83.4, 40580.0], [83.5, 40660.0], [83.6, 40698.0], [83.7, 40740.0], [83.8, 40786.0], [83.9, 40825.0], [84.0, 40868.0], [84.1, 40887.0], [84.2, 40914.0], [84.3, 40954.0], [84.4, 40995.0], [84.5, 41041.0], [84.6, 41084.0], [84.7, 41124.0], [84.8, 41125.0], [84.9, 41175.0], [85.0, 41219.0], [85.1, 41265.0], [85.2, 41350.0], [85.3, 41363.0], [85.4, 41391.0], [85.5, 41437.0], [85.6, 41479.0], [85.7, 41495.0], [85.8, 41519.0], [85.9, 41540.0], [86.0, 41558.0], [86.1, 41582.0], [86.2, 41600.0], [86.3, 41627.0], [86.4, 41667.0], [86.5, 41715.0], [86.6, 41753.0], [86.7, 41790.0], [86.8, 41835.0], [86.9, 41873.0], [87.0, 41918.0], [87.1, 41954.0], [87.2, 42010.0], [87.3, 42048.0], [87.4, 42095.0], [87.5, 42137.0], [87.6, 42173.0], [87.7, 42215.0], [87.8, 42273.0], [87.9, 42331.0], [88.0, 42390.0], [88.1, 42439.0], [88.2, 42477.0], [88.3, 42518.0], [88.4, 42560.0], [88.5, 42602.0], [88.6, 42650.0], [88.7, 42676.0], [88.8, 42699.0], [88.9, 42742.0], [89.0, 42777.0], [89.1, 42811.0], [89.2, 42856.0], [89.3, 42897.0], [89.4, 42935.0], [89.5, 42969.0], [89.6, 43004.0], [89.7, 43043.0], [89.8, 43079.0], [89.9, 43115.0], [90.0, 43152.0], [90.1, 43187.0], [90.2, 43230.0], [90.3, 43271.0], [90.4, 43313.0], [90.5, 43352.0], [90.6, 43395.0], [90.7, 43432.0], [90.8, 43480.0], [90.9, 43533.0], [91.0, 43571.0], [91.1, 43610.0], [91.2, 43648.0], [91.3, 43694.0], [91.4, 43738.0], [91.5, 43777.0], [91.6, 43829.0], [91.7, 43868.0], [91.8, 43910.0], [91.9, 43947.0], [92.0, 44001.0], [92.1, 44047.0], [92.2, 44085.0], [92.3, 44127.0], [92.4, 44172.0], [92.5, 44209.0], [92.6, 44252.0], [92.7, 44284.0], [92.8, 44324.0], [92.9, 44335.0], [93.0, 44355.0], [93.1, 44378.0], [93.2, 44397.0], [93.3, 44417.0], [93.4, 44436.0], [93.5, 44452.0], [93.6, 44454.0], [93.7, 44476.0], [93.8, 44490.0], [93.9, 44518.0], [94.0, 44543.0], [94.1, 44565.0], [94.2, 44582.0], [94.3, 44618.0], [94.4, 44652.0], [94.5, 44682.0], [94.6, 44724.0], [94.7, 44755.0], [94.8, 44821.0], [94.9, 44829.0], [95.0, 44834.0], [95.1, 44865.0], [95.2, 44902.0], [95.3, 44937.0], [95.4, 44938.0], [95.5, 44967.0], [95.6, 44977.0], [95.7, 45002.0], [95.8, 45013.0], [95.9, 45038.0], [96.0, 45048.0], [96.1, 45069.0], [96.2, 45080.0], [96.3, 45086.0], [96.4, 45117.0], [96.5, 45127.0], [96.6, 45155.0], [96.7, 45161.0], [96.8, 45193.0], [96.9, 45202.0], [97.0, 45233.0], [97.1, 45290.0], [97.2, 45334.0], [97.3, 45371.0], [97.4, 45414.0], [97.5, 45458.0], [97.6, 45506.0], [97.7, 45549.0], [97.8, 45583.0], [97.9, 45611.0], [98.0, 45658.0], [98.1, 45694.0], [98.2, 45726.0], [98.3, 45762.0], [98.4, 45798.0], [98.5, 45834.0], [98.6, 45874.0], [98.7, 45910.0], [98.8, 45952.0], [98.9, 45992.0], [99.0, 46027.0], [99.1, 46066.0], [99.2, 46091.0], [99.3, 46130.0], [99.4, 46193.0], [99.5, 46209.0], [99.6, 46244.0], [99.7, 46282.0], [99.8, 46323.0], [99.9, 46361.0]], "isOverall": false, "label": "GetAll", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 500.0, "maxY": 138.0, "series": [{"data": [[600.0, 57.0], [700.0, 32.0], [800.0, 2.0], [1200.0, 1.0], [2300.0, 1.0], [2200.0, 4.0], [2400.0, 7.0], [2500.0, 4.0], [2800.0, 1.0], [3100.0, 1.0], [3200.0, 1.0], [3600.0, 2.0], [3700.0, 2.0], [4000.0, 3.0], [4100.0, 4.0], [4200.0, 2.0], [4300.0, 1.0], [4400.0, 6.0], [4500.0, 5.0], [4600.0, 5.0], [4700.0, 4.0], [4900.0, 1.0], [5000.0, 2.0], [5200.0, 3.0], [5300.0, 2.0], [5400.0, 1.0], [5500.0, 10.0], [5600.0, 2.0], [5900.0, 6.0], [6100.0, 8.0], [6000.0, 6.0], [6300.0, 4.0], [6200.0, 1.0], [6500.0, 46.0], [6600.0, 49.0], [6400.0, 3.0], [6700.0, 88.0], [6800.0, 138.0], [6900.0, 17.0], [7100.0, 15.0], [7000.0, 28.0], [7400.0, 23.0], [7300.0, 18.0], [7200.0, 11.0], [7600.0, 4.0], [7500.0, 19.0], [7900.0, 23.0], [7800.0, 11.0], [7700.0, 9.0], [8000.0, 16.0], [8100.0, 119.0], [8200.0, 89.0], [8300.0, 13.0], [8400.0, 24.0], [8500.0, 1.0], [8700.0, 11.0], [8600.0, 27.0], [500.0, 7.0]], "isOverall": false, "label": "Create", "isController": false}, {"data": [[32900.0, 2.0], [33700.0, 2.0], [34500.0, 5.0], [35300.0, 2.0], [36100.0, 2.0], [36900.0, 3.0], [37700.0, 2.0], [38500.0, 2.0], [39300.0, 2.0], [40100.0, 2.0], [40900.0, 3.0], [41700.0, 3.0], [42500.0, 2.0], [43300.0, 3.0], [44100.0, 2.0], [44900.0, 5.0], [45700.0, 3.0], [800.0, 1.0], [1000.0, 1.0], [1200.0, 1.0], [1400.0, 1.0], [1500.0, 1.0], [1700.0, 1.0], [1800.0, 1.0], [1900.0, 2.0], [2000.0, 1.0], [2100.0, 1.0], [2200.0, 1.0], [2300.0, 1.0], [2400.0, 2.0], [2500.0, 1.0], [2700.0, 1.0], [2800.0, 2.0], [2900.0, 1.0], [3000.0, 2.0], [3100.0, 1.0], [3200.0, 2.0], [3300.0, 2.0], [3500.0, 2.0], [3600.0, 3.0], [3700.0, 2.0], [3800.0, 2.0], [3900.0, 2.0], [4000.0, 3.0], [4100.0, 2.0], [4200.0, 2.0], [4300.0, 2.0], [4400.0, 1.0], [4500.0, 3.0], [4600.0, 2.0], [4700.0, 1.0], [4800.0, 2.0], [4900.0, 2.0], [5000.0, 3.0], [5100.0, 2.0], [5200.0, 2.0], [5300.0, 1.0], [5400.0, 3.0], [5500.0, 3.0], [5600.0, 1.0], [5700.0, 3.0], [5800.0, 2.0], [5900.0, 2.0], [6000.0, 2.0], [6100.0, 3.0], [6200.0, 1.0], [6300.0, 2.0], [6400.0, 2.0], [6500.0, 4.0], [6600.0, 2.0], [6700.0, 4.0], [6800.0, 1.0], [6900.0, 1.0], [7100.0, 2.0], [7300.0, 1.0], [7200.0, 1.0], [7400.0, 1.0], [7500.0, 1.0], [7600.0, 1.0], [7700.0, 1.0], [7800.0, 1.0], [7900.0, 1.0], [8000.0, 1.0], [8100.0, 1.0], [8200.0, 3.0], [8400.0, 1.0], [8600.0, 1.0], [8800.0, 1.0], [9200.0, 1.0], [9400.0, 2.0], [9600.0, 2.0], [9800.0, 1.0], [10000.0, 1.0], [10200.0, 2.0], [10400.0, 1.0], [10600.0, 1.0], [10800.0, 1.0], [11000.0, 1.0], [11200.0, 1.0], [11400.0, 1.0], [11600.0, 2.0], [11800.0, 1.0], [12000.0, 1.0], [12200.0, 1.0], [12600.0, 1.0], [12800.0, 2.0], [13000.0, 1.0], [13200.0, 2.0], [13400.0, 1.0], [13600.0, 2.0], [13800.0, 3.0], [14000.0, 8.0], [14200.0, 2.0], [14400.0, 1.0], [14600.0, 2.0], [14800.0, 2.0], [15000.0, 3.0], [15200.0, 2.0], [15400.0, 2.0], [15600.0, 3.0], [15800.0, 2.0], [16000.0, 1.0], [16200.0, 2.0], [17200.0, 3.0], [16400.0, 1.0], [16800.0, 3.0], [17600.0, 3.0], [18000.0, 2.0], [18400.0, 2.0], [19200.0, 2.0], [18800.0, 3.0], [19600.0, 3.0], [20000.0, 2.0], [20400.0, 3.0], [20800.0, 2.0], [21200.0, 5.0], [21600.0, 1.0], [22000.0, 2.0], [22400.0, 3.0], [22800.0, 2.0], [23200.0, 1.0], [23600.0, 2.0], [24000.0, 3.0], [24400.0, 2.0], [24800.0, 3.0], [25200.0, 3.0], [25600.0, 3.0], [26000.0, 2.0], [26400.0, 3.0], [26800.0, 3.0], [27200.0, 2.0], [27600.0, 2.0], [28000.0, 2.0], [28400.0, 2.0], [28800.0, 2.0], [29200.0, 3.0], [29600.0, 2.0], [30000.0, 2.0], [30400.0, 1.0], [30800.0, 3.0], [31200.0, 3.0], [31600.0, 3.0], [32000.0, 2.0], [32400.0, 2.0], [32800.0, 2.0], [33600.0, 5.0], [34400.0, 4.0], [35200.0, 1.0], [36000.0, 2.0], [36800.0, 2.0], [37600.0, 3.0], [38400.0, 3.0], [39200.0, 3.0], [40000.0, 2.0], [40800.0, 3.0], [41600.0, 3.0], [42400.0, 2.0], [43200.0, 2.0], [44000.0, 3.0], [44800.0, 4.0], [45600.0, 3.0], [33100.0, 2.0], [33900.0, 2.0], [34700.0, 2.0], [35500.0, 3.0], [36300.0, 2.0], [37100.0, 2.0], [37900.0, 3.0], [38700.0, 2.0], [39500.0, 1.0], [40300.0, 3.0], [41100.0, 3.0], [41900.0, 2.0], [42700.0, 2.0], [43500.0, 2.0], [44300.0, 5.0], [45100.0, 5.0], [45900.0, 3.0], [16500.0, 2.0], [16900.0, 2.0], [17300.0, 2.0], [17700.0, 2.0], [18100.0, 3.0], [18500.0, 3.0], [18900.0, 1.0], [19300.0, 3.0], [19700.0, 2.0], [20100.0, 4.0], [20500.0, 2.0], [20900.0, 1.0], [21300.0, 2.0], [21700.0, 2.0], [22100.0, 1.0], [22500.0, 2.0], [22900.0, 2.0], [23300.0, 3.0], [23700.0, 4.0], [24100.0, 2.0], [24500.0, 3.0], [24900.0, 2.0], [25300.0, 2.0], [25700.0, 2.0], [26100.0, 3.0], [26500.0, 2.0], [26900.0, 2.0], [27300.0, 3.0], [27700.0, 3.0], [28100.0, 1.0], [28500.0, 1.0], [28900.0, 2.0], [29300.0, 2.0], [29700.0, 2.0], [30100.0, 2.0], [30500.0, 3.0], [30900.0, 2.0], [31300.0, 2.0], [31700.0, 2.0], [32100.0, 3.0], [32500.0, 3.0], [33000.0, 3.0], [33800.0, 4.0], [34600.0, 1.0], [35400.0, 1.0], [36200.0, 3.0], [37000.0, 2.0], [37800.0, 3.0], [38600.0, 2.0], [39400.0, 3.0], [40200.0, 3.0], [41000.0, 2.0], [41800.0, 2.0], [42600.0, 4.0], [43400.0, 2.0], [44200.0, 3.0], [45000.0, 7.0], [45800.0, 2.0], [33300.0, 4.0], [34100.0, 2.0], [34900.0, 4.0], [35700.0, 4.0], [36500.0, 3.0], [37300.0, 2.0], [38100.0, 3.0], [38900.0, 3.0], [39700.0, 2.0], [40500.0, 4.0], [41300.0, 3.0], [42100.0, 2.0], [42900.0, 2.0], [43700.0, 2.0], [44500.0, 4.0], [45300.0, 2.0], [46100.0, 2.0], [8300.0, 2.0], [8500.0, 1.0], [8700.0, 2.0], [8900.0, 1.0], [9100.0, 1.0], [9300.0, 1.0], [10100.0, 1.0], [9900.0, 1.0], [10300.0, 1.0], [10700.0, 1.0], [10900.0, 1.0], [11100.0, 1.0], [11300.0, 1.0], [11500.0, 4.0], [11700.0, 3.0], [11900.0, 2.0], [12100.0, 1.0], [12300.0, 1.0], [12500.0, 1.0], [12700.0, 2.0], [12900.0, 4.0], [13100.0, 2.0], [13300.0, 2.0], [13500.0, 1.0], [13700.0, 2.0], [13900.0, 6.0], [14100.0, 1.0], [14300.0, 1.0], [14500.0, 2.0], [14700.0, 3.0], [14900.0, 2.0], [15100.0, 2.0], [15300.0, 2.0], [15500.0, 2.0], [15700.0, 1.0], [15900.0, 1.0], [16100.0, 2.0], [16300.0, 3.0], [16600.0, 3.0], [17000.0, 3.0], [17400.0, 2.0], [18200.0, 2.0], [17800.0, 3.0], [18600.0, 2.0], [19000.0, 2.0], [19400.0, 2.0], [19800.0, 3.0], [20200.0, 2.0], [20600.0, 2.0], [21000.0, 2.0], [21400.0, 1.0], [21800.0, 2.0], [22200.0, 2.0], [22600.0, 2.0], [23000.0, 2.0], [23400.0, 2.0], [23800.0, 2.0], [24200.0, 2.0], [24600.0, 2.0], [25000.0, 2.0], [25400.0, 3.0], [25800.0, 3.0], [26200.0, 1.0], [26600.0, 3.0], [27000.0, 2.0], [27400.0, 3.0], [27800.0, 2.0], [28200.0, 2.0], [28600.0, 2.0], [29000.0, 3.0], [29400.0, 2.0], [29800.0, 3.0], [30200.0, 2.0], [30600.0, 2.0], [31000.0, 2.0], [31400.0, 2.0], [31800.0, 3.0], [32200.0, 3.0], [32600.0, 2.0], [33200.0, 4.0], [34000.0, 3.0], [34800.0, 6.0], [35600.0, 3.0], [36400.0, 2.0], [37200.0, 3.0], [38000.0, 5.0], [38800.0, 2.0], [39600.0, 3.0], [40400.0, 3.0], [41200.0, 2.0], [42000.0, 3.0], [42800.0, 3.0], [43600.0, 3.0], [44400.0, 6.0], [45200.0, 3.0], [46000.0, 3.0], [33500.0, 4.0], [34300.0, 5.0], [35100.0, 1.0], [35900.0, 2.0], [36700.0, 3.0], [37500.0, 2.0], [38300.0, 2.0], [39100.0, 2.0], [39900.0, 2.0], [40700.0, 2.0], [41500.0, 4.0], [42300.0, 2.0], [43100.0, 3.0], [43900.0, 2.0], [44700.0, 2.0], [45500.0, 3.0], [46300.0, 2.0], [16700.0, 2.0], [17100.0, 2.0], [17500.0, 3.0], [17900.0, 2.0], [18300.0, 2.0], [18700.0, 4.0], [19100.0, 3.0], [19500.0, 1.0], [19900.0, 3.0], [20300.0, 2.0], [20700.0, 1.0], [21100.0, 1.0], [21500.0, 2.0], [21900.0, 2.0], [22300.0, 1.0], [22700.0, 3.0], [23100.0, 3.0], [23500.0, 2.0], [23900.0, 2.0], [24300.0, 3.0], [24700.0, 2.0], [25100.0, 2.0], [25500.0, 2.0], [25900.0, 1.0], [26300.0, 5.0], [26700.0, 2.0], [27100.0, 3.0], [27500.0, 2.0], [27900.0, 1.0], [28300.0, 1.0], [28700.0, 2.0], [29100.0, 2.0], [29500.0, 3.0], [29900.0, 3.0], [30300.0, 1.0], [30700.0, 2.0], [31100.0, 1.0], [31500.0, 3.0], [31900.0, 2.0], [32300.0, 2.0], [32700.0, 3.0], [33400.0, 7.0], [34200.0, 3.0], [35000.0, 3.0], [35800.0, 3.0], [36600.0, 2.0], [37400.0, 3.0], [38200.0, 2.0], [39000.0, 2.0], [39800.0, 3.0], [40600.0, 2.0], [41400.0, 3.0], [42200.0, 2.0], [43000.0, 3.0], [43800.0, 2.0], [44600.0, 3.0], [45400.0, 2.0], [46200.0, 3.0]], "isOverall": false, "label": "GetAll", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 46300.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 103.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1897.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 103.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1897.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 42.5, "minX": 1.68062082E12, "maxY": 685.1148225469717, "series": [{"data": [[1.68062082E12, 685.1148225469717], [1.68062088E12, 42.5]], "isOverall": false, "label": "CreateGetAll", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68062088E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 563.6, "minX": 1.0, "maxY": 46361.0, "series": [{"data": [[133.0, 590.3333333333334], [134.0, 563.6], [139.0, 622.6666666666666], [141.0, 626.0], [142.0, 618.0], [145.0, 676.0], [156.0, 725.75], [157.0, 719.8571428571428], [160.0, 767.0], [163.0, 777.5], [165.0, 701.5], [167.0, 744.0], [168.0, 670.75], [171.0, 737.0], [172.0, 851.0], [189.0, 629.0], [191.0, 690.0], [201.0, 689.0], [209.0, 703.75], [222.0, 676.0], [223.0, 662.5], [224.0, 676.5], [226.0, 633.0], [227.0, 684.0], [228.0, 615.0], [229.0, 683.0], [230.0, 657.0], [233.0, 621.0], [255.0, 646.6666666666666], [256.0, 652.0], [258.0, 640.0], [261.0, 683.1], [268.0, 649.0], [283.0, 661.0], [284.0, 664.0], [288.0, 680.5], [289.0, 668.6666666666666], [294.0, 723.0], [304.0, 1260.0], [629.0, 2327.0], [631.0, 2283.5], [632.0, 2288.0], [633.0, 2295.0], [661.0, 2425.0], [662.0, 2454.0], [663.0, 2410.0], [675.0, 2470.0], [677.0, 2465.0], [678.0, 2438.0], [679.0, 2518.0], [680.0, 2455.0], [695.0, 2554.0], [696.0, 2522.0], [697.0, 2576.0], [754.0, 2829.0], [811.0, 3134.0], [836.0, 3209.0], [893.0, 7396.076923076923], [894.0, 7297.0], [880.0, 8434.79166666667], [882.0, 8236.40789473684], [881.0, 8305.0], [892.0, 7515.0], [890.0, 7755.0], [889.0, 7869.5], [888.0, 7971.571428571428], [879.0, 8564.0], [878.0, 8676.605263157895], [886.0, 8134.666666666667], [885.0, 8176.525423728812], [884.0, 8164.0819672131165], [883.0, 8196.249999999998], [913.0, 6338.0], [906.0, 5139.5], [907.0, 3635.0], [922.0, 5951.166666666667], [919.0, 6094.875], [918.0, 6157.5], [915.0, 6316.333333333333], [909.0, 6541.0], [897.0, 6984.0], [896.0, 7077.285714285714], [901.0, 6808.343396226417], [900.0, 6619.0], [902.0, 7170.906432748539], [905.0, 6705.25], [958.0, 4169.0], [930.0, 3709.5], [928.0, 5687.0], [931.0, 5540.099999999999], [935.0, 5339.5], [933.0, 5427.0], [942.0, 5026.5], [938.0, 5214.0], [936.0, 5281.0], [959.0, 4125.333333333333], [947.0, 4738.25], [944.0, 4923.0], [957.0, 4219.0], [955.0, 4295.0], [954.0, 4375.0], [952.0, 4450.0], [950.0, 4566.8], [949.0, 4613.6], [961.0, 4036.0], [960.0, 4083.0]], "isOverall": false, "label": "Create", "isController": false}, {"data": [[824.9660000000005, 6516.87900000001]], "isOverall": false, "label": "Create-Aggregated", "isController": false}, {"data": [[2.0, 46323.0], [3.0, 46282.0], [4.0, 46244.0], [5.0, 46209.0], [6.0, 46193.0], [7.0, 46130.0], [8.0, 46091.0], [9.0, 46066.0], [10.0, 46027.0], [11.0, 45992.0], [12.0, 45952.0], [13.0, 45910.0], [14.0, 45874.0], [15.0, 45834.0], [16.0, 45798.0], [17.0, 45762.0], [18.0, 45726.0], [19.0, 45694.0], [20.0, 45658.0], [21.0, 45611.0], [22.0, 45583.0], [23.0, 45549.0], [24.0, 45506.0], [25.0, 45458.0], [26.0, 45414.0], [27.0, 45371.0], [28.0, 45334.0], [29.0, 45290.0], [30.0, 45233.0], [31.0, 45193.0], [33.0, 45117.0], [32.0, 45155.0], [35.0, 45038.0], [34.0, 45080.0], [37.0, 44967.0], [36.0, 45002.0], [39.0, 45069.0], [38.0, 44937.0], [41.0, 45161.0], [40.0, 45202.0], [43.0, 45086.0], [42.0, 45127.0], [45.0, 45013.0], [44.0, 45048.0], [47.0, 44938.0], [46.0, 44977.0], [49.0, 44865.0], [48.0, 44902.0], [51.0, 44821.0], [50.0, 44829.0], [53.0, 44724.0], [52.0, 44755.0], [55.0, 44652.0], [54.0, 44682.0], [57.0, 44582.0], [56.0, 44618.0], [59.0, 44834.0], [58.0, 44543.0], [61.0, 44454.0], [60.0, 44490.0], [63.0, 44378.0], [62.0, 44417.0], [67.0, 44518.0], [66.0, 44565.0], [65.0, 44452.0], [64.0, 44335.0], [71.0, 44355.0], [70.0, 44397.0], [69.0, 44436.0], [68.0, 44476.0], [75.0, 44209.0], [74.0, 44252.0], [73.0, 44284.0], [72.0, 44324.0], [79.0, 44047.0], [78.0, 44085.0], [77.0, 44127.0], [76.0, 44172.0], [83.0, 43868.0], [82.0, 43910.0], [81.0, 43947.0], [80.0, 44001.0], [87.0, 43694.0], [86.0, 43738.0], [85.0, 43777.0], [84.0, 43829.0], [91.0, 43533.0], [90.0, 43571.0], [89.0, 43610.0], [88.0, 43648.0], [95.0, 43352.0], [94.0, 43395.0], [93.0, 43432.0], [92.0, 43480.0], [99.0, 43187.0], [98.0, 43230.0], [97.0, 43271.0], [96.0, 43313.0], [103.0, 43043.0], [102.0, 43079.0], [101.0, 43115.0], [100.0, 43152.0], [107.0, 42897.0], [106.0, 42935.0], [105.0, 42969.0], [104.0, 43004.0], [111.0, 42742.0], [110.0, 42777.0], [109.0, 42811.0], [108.0, 42856.0], [115.0, 42602.0], [114.0, 42650.0], [113.0, 42676.0], [112.0, 42699.0], [119.0, 42439.0], [118.0, 42477.0], [117.0, 42518.0], [116.0, 42560.0], [123.0, 42215.0], [122.0, 42273.0], [121.0, 42331.0], [120.0, 42390.0], [127.0, 42048.0], [126.0, 42095.0], [125.0, 42137.0], [124.0, 42173.0], [135.0, 41715.0], [134.0, 41753.0], [133.0, 41790.0], [132.0, 41835.0], [131.0, 41873.0], [130.0, 41918.0], [129.0, 41954.0], [128.0, 42010.0], [143.0, 41519.0], [142.0, 41558.0], [141.0, 41600.0], [140.0, 41495.0], [139.0, 41540.0], [138.0, 41582.0], [137.0, 41627.0], [136.0, 41667.0], [151.0, 41175.0], [150.0, 41219.0], [149.0, 41265.0], [148.0, 41363.0], [147.0, 41350.0], [146.0, 41391.0], [145.0, 41437.0], [144.0, 41479.0], [159.0, 40887.0], [158.0, 40914.0], [157.0, 40954.0], [156.0, 40995.0], [155.0, 41041.0], [154.0, 41084.0], [153.0, 41125.0], [152.0, 41124.0], [167.0, 40523.0], [166.0, 40567.0], [165.0, 40660.0], [164.0, 40698.0], [163.0, 40740.0], [162.0, 40786.0], [161.0, 40825.0], [160.0, 40868.0], [175.0, 40314.0], [174.0, 40351.0], [173.0, 40393.0], [172.0, 40439.0], [171.0, 40490.0], [170.0, 40537.0], [169.0, 40580.0], [168.0, 40486.0], [183.0, 39972.0], [182.0, 40018.0], [181.0, 40063.0], [180.0, 40102.0], [179.0, 40163.0], [178.0, 40212.0], [177.0, 40232.0], [176.0, 40269.0], [191.0, 39641.0], [190.0, 39684.0], [189.0, 39733.0], [188.0, 39780.0], [187.0, 39818.0], [186.0, 39857.0], [185.0, 39885.0], [184.0, 39927.0], [199.0, 39286.0], [198.0, 39323.0], [197.0, 39365.0], [196.0, 39410.0], [195.0, 39457.0], [194.0, 39498.0], [193.0, 39558.0], [192.0, 39600.0], [207.0, 38950.0], [206.0, 38994.0], [205.0, 39019.0], [204.0, 39057.0], [203.0, 39106.0], [202.0, 39157.0], [201.0, 39200.0], [200.0, 39238.0], [215.0, 38576.0], [214.0, 38623.0], [213.0, 38665.0], [212.0, 38715.0], [211.0, 38763.0], [210.0, 38809.0], [209.0, 38863.0], [208.0, 38911.0], [223.0, 38241.0], [222.0, 38279.0], [221.0, 38321.0], [220.0, 38367.0], [219.0, 38413.0], [218.0, 38452.0], [217.0, 38491.0], [216.0, 38541.0], [231.0, 38043.0], [230.0, 38071.0], [229.0, 37989.0], [228.0, 38029.0], [227.0, 38072.0], [226.0, 38108.0], [225.0, 38149.0], [224.0, 38192.0], [239.0, 37734.0], [238.0, 37773.0], [237.0, 37813.0], [236.0, 37856.0], [235.0, 37894.0], [234.0, 37933.0], [233.0, 37976.0], [232.0, 38013.0], [247.0, 37405.0], [246.0, 37448.0], [245.0, 37495.0], [244.0, 37537.0], [243.0, 37573.0], [242.0, 37616.0], [241.0, 37653.0], [240.0, 37697.0], [255.0, 37078.0], [254.0, 37122.0], [253.0, 37162.0], [252.0, 37209.0], [251.0, 37243.0], [250.0, 37282.0], [249.0, 37323.0], [248.0, 37369.0], [270.0, 36455.0], [271.0, 36411.0], [269.0, 36501.0], [268.0, 36544.0], [267.0, 36590.0], [266.0, 36634.0], [265.0, 36672.0], [264.0, 36718.0], [263.0, 36760.0], [257.0, 36999.0], [256.0, 37035.0], [259.0, 36914.0], [258.0, 36952.0], [262.0, 36798.0], [261.0, 36843.0], [260.0, 36885.0], [286.0, 35773.0], [287.0, 35731.0], [285.0, 35812.0], [284.0, 35859.0], [283.0, 35899.0], [282.0, 35942.0], [281.0, 35986.0], [280.0, 36032.0], [279.0, 36070.0], [273.0, 36327.0], [272.0, 36371.0], [275.0, 36255.0], [274.0, 36291.0], [278.0, 36121.0], [277.0, 36169.0], [276.0, 36209.0], [302.0, 35017.0], [303.0, 34950.0], [301.0, 35086.0], [300.0, 35160.0], [299.0, 35230.0], [298.0, 35304.0], [297.0, 35375.0], [296.0, 35443.0], [295.0, 35508.0], [289.0, 35719.0], [288.0, 35687.0], [291.0, 35578.0], [290.0, 35649.0], [294.0, 35570.0], [293.0, 35646.0], [292.0, 35719.0], [318.0, 34543.0], [319.0, 34505.0], [317.0, 34593.0], [316.0, 34670.0], [315.0, 34745.0], [314.0, 34815.0], [313.0, 34884.0], [312.0, 34955.0], [311.0, 34903.0], [305.0, 34811.0], [304.0, 34872.0], [307.0, 34794.0], [306.0, 34861.0], [310.0, 34965.0], [309.0, 35029.0], [308.0, 34843.0], [334.0, 34177.0], [335.0, 34130.0], [333.0, 34214.0], [332.0, 34262.0], [331.0, 34307.0], [330.0, 34357.0], [329.0, 34402.0], [328.0, 34452.0], [327.0, 34504.0], [321.0, 34408.0], [320.0, 34457.0], [323.0, 34311.0], [322.0, 34360.0], [326.0, 34553.0], [325.0, 34337.0], [324.0, 34265.0], [350.0, 33497.0], [351.0, 33455.0], [349.0, 33551.0], [348.0, 33591.0], [347.0, 33631.0], [346.0, 33670.0], [345.0, 33714.0], [344.0, 33763.0], [343.0, 33801.0], [337.0, 34037.0], [336.0, 34075.0], [339.0, 33960.0], [338.0, 34012.0], [342.0, 33841.0], [341.0, 33883.0], [340.0, 33923.0], [367.0, 33317.0], [363.0, 17242.5], [366.0, 33358.0], [365.0, 33404.0], [364.0, 33459.0], [355.0, 33404.0], [354.0, 33450.0], [353.0, 33371.0], [352.0, 33412.0], [362.0, 33641.0], [361.0, 33550.0], [360.0, 33595.0], [359.0, 33639.0], [358.0, 33288.0], [357.0, 33335.0], [356.0, 33895.0], [382.0, 32706.0], [383.0, 32672.0], [381.0, 32758.0], [380.0, 32796.0], [379.0, 32836.0], [378.0, 32880.0], [377.0, 32928.0], [376.0, 32970.0], [375.0, 33006.0], [369.0, 33251.0], [368.0, 33290.0], [371.0, 33171.0], [370.0, 33203.0], [374.0, 33040.0], [373.0, 33087.0], [372.0, 33128.0], [398.0, 16555.0], [399.0, 32021.0], [397.0, 32107.0], [396.0, 32136.0], [395.0, 32180.0], [394.0, 32220.0], [393.0, 32256.0], [392.0, 32291.0], [391.0, 32336.0], [385.0, 32589.0], [384.0, 32630.0], [387.0, 32506.0], [386.0, 32546.0], [390.0, 32377.0], [389.0, 32413.0], [388.0, 32463.0], [414.0, 31420.0], [415.0, 31375.0], [413.0, 31464.0], [412.0, 31503.0], [411.0, 31538.0], [410.0, 31578.0], [409.0, 31621.0], [408.0, 31655.0], [407.0, 31690.0], [401.0, 31945.0], [400.0, 31986.0], [403.0, 31859.0], [402.0, 31899.0], [406.0, 31736.0], [405.0, 31768.0], [404.0, 31813.0], [430.0, 30679.0], [431.0, 30635.0], [429.0, 30723.0], [428.0, 30793.0], [427.0, 30828.0], [426.0, 30881.0], [425.0, 30899.0], [424.0, 30958.0], [423.0, 30991.0], [417.0, 31263.0], [416.0, 31328.0], [419.0, 31224.0], [418.0, 31259.0], [422.0, 31033.0], [421.0, 31074.0], [420.0, 31151.0], [446.0, 29878.0], [439.0, 15712.5], [433.0, 30548.0], [432.0, 30593.0], [435.0, 30429.0], [434.0, 30505.0], [438.0, 30229.0], [437.0, 30290.0], [436.0, 30360.0], [447.0, 29837.0], [445.0, 29915.0], [444.0, 29949.0], [443.0, 29986.0], [442.0, 30041.0], [441.0, 30079.0], [440.0, 30122.0], [462.0, 29203.0], [463.0, 29174.0], [461.0, 29244.0], [460.0, 29282.0], [459.0, 29329.0], [458.0, 29384.0], [457.0, 29429.0], [456.0, 29473.0], [455.0, 29506.0], [449.0, 29758.0], [448.0, 29804.0], [451.0, 29676.0], [450.0, 29712.0], [454.0, 29553.0], [453.0, 29586.0], [452.0, 29634.0], [479.0, 28342.0], [472.0, 15115.5], [478.0, 28409.0], [477.0, 28483.0], [476.0, 28547.0], [467.0, 29016.0], [466.0, 29052.0], [465.0, 29091.0], [464.0, 29131.0], [475.0, 28614.0], [474.0, 28676.0], [473.0, 28740.0], [471.0, 28864.0], [470.0, 28898.0], [469.0, 28936.0], [468.0, 28975.0], [494.0, 27516.0], [495.0, 27479.0], [493.0, 27566.0], [492.0, 27610.0], [491.0, 27671.0], [490.0, 27719.0], [489.0, 27773.0], [488.0, 27795.0], [487.0, 27839.0], [481.0, 28218.0], [480.0, 28283.0], [483.0, 28094.0], [482.0, 28156.0], [486.0, 27896.0], [485.0, 27961.0], [484.0, 28025.0], [510.0, 26882.0], [499.0, 14455.5], [498.0, 27388.0], [497.0, 27428.0], [496.0, 27447.0], [503.0, 27194.0], [502.0, 27234.0], [501.0, 27276.0], [500.0, 27306.0], [511.0, 26840.0], [509.0, 26921.0], [508.0, 26958.0], [507.0, 27003.0], [506.0, 27046.0], [505.0, 27106.0], [504.0, 27150.0], [540.0, 25686.0], [522.0, 14059.5], [521.0, 26444.0], [520.0, 26487.0], [523.0, 26370.0], [525.0, 26351.0], [524.0, 26354.0], [527.0, 26344.0], [513.0, 26767.0], [512.0, 26801.0], [515.0, 26685.0], [514.0, 26727.0], [517.0, 26604.0], [516.0, 26645.0], [519.0, 26525.0], [518.0, 26565.0], [526.0, 26347.0], [543.0, 13697.5], [529.0, 26199.0], [528.0, 26238.0], [531.0, 26121.0], [530.0, 26159.0], [533.0, 26031.0], [532.0, 26069.0], [535.0, 25890.0], [534.0, 25958.0], [542.0, 25610.0], [541.0, 25648.0], [539.0, 25730.0], [538.0, 25765.0], [537.0, 25812.0], [536.0, 25846.0], [573.0, 24326.0], [562.0, 13347.5], [561.0, 24815.0], [560.0, 24856.0], [563.0, 24745.0], [565.0, 24632.0], [564.0, 24679.0], [567.0, 24578.0], [566.0, 24593.0], [575.0, 24243.0], [574.0, 24282.0], [572.0, 24357.0], [571.0, 24396.0], [570.0, 24442.0], [569.0, 24488.0], [568.0, 24536.0], [551.0, 25240.0], [550.0, 25286.0], [549.0, 25332.0], [548.0, 25379.0], [547.0, 25416.0], [546.0, 25458.0], [545.0, 25497.0], [544.0, 25536.0], [559.0, 24897.0], [558.0, 24944.0], [557.0, 24983.0], [556.0, 25045.0], [555.0, 25081.0], [554.0, 25122.0], [553.0, 25157.0], [552.0, 25201.0], [605.0, 22910.0], [577.0, 13044.5], [591.0, 23552.0], [576.0, 24196.0], [590.0, 23610.0], [589.0, 23651.0], [588.0, 23701.0], [587.0, 23739.0], [586.0, 23791.0], [585.0, 23793.0], [584.0, 23817.0], [600.0, 23184.0], [583.0, 23883.0], [582.0, 23931.0], [581.0, 23963.0], [580.0, 24001.0], [579.0, 24053.0], [578.0, 24092.0], [598.0, 12663.0], [597.0, 23307.0], [596.0, 23344.0], [595.0, 23382.0], [594.0, 23427.0], [593.0, 23461.0], [592.0, 23517.0], [599.0, 23192.0], [607.0, 22827.0], [606.0, 22871.0], [604.0, 22950.0], [603.0, 23023.0], [602.0, 23078.0], [601.0, 23116.0], [637.0, 21231.0], [614.0, 12353.5], [623.0, 22040.0], [609.0, 22756.0], [608.0, 22799.0], [611.0, 22663.0], [610.0, 22714.0], [613.0, 22585.0], [612.0, 22626.0], [622.0, 22099.0], [621.0, 22154.0], [620.0, 22234.0], [619.0, 22281.0], [618.0, 22342.0], [617.0, 22401.0], [616.0, 22456.0], [632.0, 21524.0], [615.0, 22492.0], [629.0, 11982.5], [628.0, 21739.0], [627.0, 21857.0], [626.0, 21896.0], [625.0, 21912.0], [624.0, 21977.0], [631.0, 21597.0], [630.0, 21674.0], [639.0, 21207.0], [638.0, 21213.0], [636.0, 21232.0], [635.0, 21308.0], [634.0, 21384.0], [633.0, 21445.0], [669.0, 19847.0], [647.0, 11533.5], [655.0, 20363.0], [640.0, 21205.0], [642.0, 21080.0], [641.0, 21149.0], [644.0, 20946.0], [643.0, 21009.0], [646.0, 20812.0], [645.0, 20886.0], [654.0, 20403.0], [653.0, 20442.0], [652.0, 20476.0], [651.0, 20508.0], [650.0, 20554.0], [649.0, 20614.0], [648.0, 20650.0], [664.0, 20006.0], [661.0, 11281.5], [660.0, 20157.0], [659.0, 20199.0], [658.0, 20241.0], [657.0, 20283.0], [656.0, 20324.0], [663.0, 20046.0], [662.0, 20115.0], [671.0, 19762.0], [670.0, 19828.0], [668.0, 19870.0], [667.0, 19907.0], [666.0, 19921.0], [665.0, 19965.0], [701.0, 18514.0], [675.0, 11029.0], [687.0, 19067.0], [672.0, 19718.0], [674.0, 19648.0], [673.0, 19680.0], [686.0, 19105.0], [685.0, 19151.0], [684.0, 19188.0], [683.0, 19223.0], [682.0, 19261.0], [681.0, 19304.0], [680.0, 19361.0], [696.0, 18703.0], [679.0, 19395.0], [678.0, 19441.0], [677.0, 19493.0], [676.0, 19541.0], [694.0, 10648.5], [693.0, 18780.0], [692.0, 18815.0], [691.0, 18853.0], [690.0, 18896.0], [689.0, 18941.0], [688.0, 19000.0], [695.0, 18731.0], [703.0, 18438.0], [702.0, 18475.0], [700.0, 18548.0], [699.0, 18587.0], [698.0, 18626.0], [697.0, 18673.0], [732.0, 17213.0], [735.0, 17081.0], [721.0, 17656.0], [720.0, 17698.0], [723.0, 17586.0], [722.0, 17623.0], [725.0, 17504.0], [724.0, 17544.0], [734.0, 17117.0], [733.0, 17157.0], [731.0, 17253.0], [730.0, 17290.0], [729.0, 17331.0], [728.0, 17374.0], [719.0, 17715.0], [705.0, 18312.0], [704.0, 18369.0], [707.0, 18227.0], [706.0, 18265.0], [709.0, 18141.0], [708.0, 18183.0], [711.0, 18063.0], [710.0, 18102.0], [718.0, 17747.0], [717.0, 17804.0], [716.0, 17840.0], [715.0, 17887.0], [714.0, 17944.0], [713.0, 17981.0], [712.0, 18021.0], [727.0, 17417.0], [726.0, 17466.0], [765.0, 15611.0], [741.0, 9780.0], [751.0, 16396.0], [736.0, 17047.0], [738.0, 16971.0], [737.0, 17013.0], [740.0, 16889.0], [739.0, 16927.0], [750.0, 16460.0], [749.0, 16527.0], [748.0, 16533.0], [747.0, 16607.0], [746.0, 16652.0], [745.0, 16694.0], [744.0, 16726.0], [760.0, 15897.0], [743.0, 16766.0], [742.0, 16810.0], [755.0, 9510.0], [754.0, 16260.0], [753.0, 16304.0], [752.0, 16346.0], [757.0, 16138.0], [756.0, 16184.0], [759.0, 15980.0], [758.0, 16058.0], [767.0, 15532.0], [766.0, 15576.0], [764.0, 15655.0], [763.0, 15692.0], [762.0, 15765.0], [761.0, 15833.0], [795.0, 14075.0], [797.0, 8536.0], [770.0, 9130.5], [783.0, 14797.0], [769.0, 15439.0], [768.0, 15490.0], [782.0, 14847.0], [781.0, 14899.0], [780.0, 14937.0], [779.0, 14977.0], [778.0, 15014.0], [777.0, 15054.0], [776.0, 15093.0], [792.0, 14296.0], [775.0, 15142.0], [774.0, 15196.0], [773.0, 15239.0], [772.0, 15288.0], [771.0, 15322.0], [785.0, 8831.0], [784.0, 14753.0], [787.0, 14617.0], [786.0, 14660.0], [789.0, 14506.0], [788.0, 14574.0], [791.0, 14358.0], [790.0, 14437.0], [799.0, 13933.0], [798.0, 13989.0], [796.0, 14000.0], [794.0, 14152.0], [793.0, 14223.0], [829.0, 12903.0], [811.0, 8469.0], [810.0, 13911.0], [809.0, 13946.0], [808.0, 14008.0], [812.0, 13789.0], [814.0, 13681.0], [813.0, 13709.0], [824.0, 13063.0], [807.0, 13931.0], [806.0, 14003.0], [805.0, 14054.0], [804.0, 14020.0], [803.0, 14091.0], [802.0, 13960.0], [801.0, 13881.0], [800.0, 13888.0], [815.0, 13609.0], [823.0, 8159.0], [822.0, 13240.0], [821.0, 13170.0], [820.0, 13250.0], [819.0, 13327.0], [818.0, 13396.0], [817.0, 13466.0], [816.0, 13540.0], [831.0, 12843.0], [830.0, 12947.0], [828.0, 12990.0], [827.0, 12795.0], [826.0, 12883.0], [825.0, 12968.0], [859.0, 10661.0], [861.0, 6844.5], [835.0, 7798.0], [847.0, 11553.0], [832.0, 12737.0], [834.0, 12504.0], [833.0, 12625.0], [846.0, 11664.0], [845.0, 11579.0], [844.0, 11600.0], [843.0, 11706.0], [842.0, 11778.0], [841.0, 11889.0], [840.0, 11906.0], [856.0, 10916.0], [839.0, 11935.0], [838.0, 12076.0], [837.0, 12154.0], [836.0, 12271.0], [851.0, 7370.5], [850.0, 11592.0], [849.0, 11512.0], [848.0, 11735.0], [853.0, 11289.0], [852.0, 11318.0], [855.0, 11034.0], [854.0, 11159.0], [863.0, 10212.0], [862.0, 10244.0], [860.0, 10496.0], [858.0, 10742.0], [857.0, 10853.0], [893.0, 7500.0], [874.0, 6258.5], [873.0, 9266.0], [872.0, 9357.0], [876.0, 8871.0], [875.0, 8979.0], [878.0, 8621.0], [877.0, 8729.0], [888.0, 8029.0], [871.0, 9416.0], [870.0, 9413.0], [869.0, 9654.0], [868.0, 9694.0], [867.0, 9824.0], [866.0, 10198.0], [865.0, 9954.0], [864.0, 10085.0], [879.0, 8727.0], [887.0, 5825.5], [886.0, 8249.0], [885.0, 8239.0], [884.0, 8212.0], [883.0, 8333.0], [882.0, 8306.0], [881.0, 8463.0], [880.0, 8561.0], [895.0, 7291.0], [894.0, 7413.0], [892.0, 7625.0], [891.0, 7754.0], [890.0, 7867.0], [889.0, 7986.0], [925.0, 5770.0], [896.0, 5355.5], [907.0, 5096.0], [906.0, 6704.0], [905.0, 6659.0], [904.0, 6702.0], [909.0, 6508.0], [908.0, 6542.0], [911.0, 6483.0], [910.0, 6523.0], [919.0, 4855.0], [918.0, 6120.0], [917.0, 6150.0], [916.0, 6176.0], [915.0, 6286.0], [914.0, 6327.0], [913.0, 6310.0], [912.0, 6434.0], [927.0, 5688.0], [926.0, 5723.0], [924.0, 5828.0], [923.0, 5860.0], [922.0, 5930.0], [921.0, 5973.0], [920.0, 6021.0], [903.0, 6748.0], [902.0, 7320.0], [901.0, 6618.0], [900.0, 6744.0], [899.0, 6861.0], [898.0, 6987.0], [897.0, 7101.0], [956.0, 4273.0], [929.0, 4625.0], [941.0, 4401.5], [940.0, 5077.0], [939.0, 5125.0], [938.0, 5178.0], [937.0, 5201.0], [936.0, 5259.0], [943.0, 4921.0], [928.0, 5701.0], [942.0, 5035.0], [952.0, 4130.0], [935.0, 5368.0], [934.0, 5415.0], [933.0, 5465.0], [932.0, 5513.0], [931.0, 5486.0], [930.0, 5536.0], [953.0, 4425.0], [959.0, 4140.0], [945.0, 4835.0], [944.0, 4904.0], [947.0, 4723.0], [946.0, 4801.0], [949.0, 4630.0], [948.0, 4675.0], [951.0, 4540.0], [950.0, 4599.0], [958.0, 4185.0], [957.0, 4224.0], [955.0, 4369.0], [954.0, 4387.0], [962.0, 3910.5], [965.0, 3899.0], [964.0, 3945.0], [963.0, 3967.0], [961.0, 4048.0], [960.0, 4095.0], [1.0, 46361.0]], "isOverall": false, "label": "GetAll", "isController": false}, {"data": [[491.28399999999885, 26424.184]], "isOverall": false, "label": "GetAll-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 965.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 247.8, "minX": 1.68062082E12, "maxY": 1898115.3833333333, "series": [{"data": [[1.68062082E12, 1898115.3833333333], [1.68062088E12, 192733.8]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.68062082E12, 5685.533333333334], [1.68062088E12, 247.8]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68062088E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 6516.87900000001, "minX": 1.68062082E12, "maxY": 45044.2857142857, "series": [{"data": [[1.68062082E12, 6516.87900000001]], "isOverall": false, "label": "Create", "isController": false}, {"data": [[1.68062082E12, 24716.66375545852], [1.68062088E12, 45044.2857142857]], "isOverall": false, "label": "GetAll", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68062088E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 6516.0869999999895, "minX": 1.68062082E12, "maxY": 45000.440476190466, "series": [{"data": [[1.68062082E12, 6516.0869999999895]], "isOverall": false, "label": "Create", "isController": false}, {"data": [[1.68062082E12, 24650.151746724892], [1.68062088E12, 45000.440476190466]], "isOverall": false, "label": "GetAll", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68062088E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.68062082E12, "maxY": 5.545000000000001, "series": [{"data": [[1.68062082E12, 5.545000000000001]], "isOverall": false, "label": "Create", "isController": false}, {"data": [[1.68062082E12, 0.0], [1.68062088E12, 0.0]], "isOverall": false, "label": "GetAll", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68062088E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 547.0, "minX": 1.68062082E12, "maxY": 46361.0, "series": [{"data": [[1.68062082E12, 43777.0], [1.68062088E12, 46361.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.68062082E12, 36222.799999999996], [1.68062088E12, 46078.5]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.68062082E12, 43036.369999999995], [1.68062088E12, 46361.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.68062082E12, 40111.149999999994], [1.68062088E12, 46235.25]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.68062082E12, 547.0], [1.68062088E12, 43829.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.68062082E12, 8207.5], [1.68062088E12, 45007.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68062088E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 676.0, "minX": 7.0, "maxY": 38029.0, "series": [{"data": [[33.0, 4036.0], [41.0, 7625.0], [44.0, 4652.5], [53.0, 5770.0], [86.0, 6592.5], [95.0, 676.0], [104.0, 6795.5], [7.0, 10244.0], [121.0, 8287.0], [8.0, 11052.0], [9.0, 11159.0], [156.0, 8177.0], [11.0, 29616.0], [13.0, 13609.0], [14.0, 34893.5], [16.0, 14005.5], [17.0, 21213.0], [18.0, 21680.0], [315.0, 6826.0], [19.0, 30635.0], [20.0, 33303.5], [21.0, 23078.0], [22.0, 33738.5], [23.0, 38029.0], [24.0, 29170.0], [27.0, 23496.5], [29.0, 8660.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 315.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 672.0, "minX": 7.0, "maxY": 37986.0, "series": [{"data": [[33.0, 4009.0], [41.0, 7540.0], [44.0, 4625.5], [53.0, 5724.0], [86.0, 6590.5], [95.0, 672.0], [104.0, 6795.5], [7.0, 10113.0], [121.0, 8284.0], [8.0, 10739.0], [9.0, 11033.0], [156.0, 8175.0], [11.0, 29551.5], [13.0, 13544.0], [14.0, 34820.5], [16.0, 13941.0], [17.0, 21005.0], [18.0, 21623.0], [315.0, 6825.0], [19.0, 30548.0], [20.0, 33265.5], [21.0, 23022.0], [22.0, 33648.5], [23.0, 37986.0], [24.0, 29070.5], [27.0, 23476.5], [29.0, 8658.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 315.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 33.333333333333336, "minX": 1.68062082E12, "maxY": 33.333333333333336, "series": [{"data": [[1.68062082E12, 33.333333333333336]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68062082E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 1.4, "minX": 1.68062082E12, "maxY": 31.933333333333334, "series": [{"data": [[1.68062082E12, 31.933333333333334], [1.68062088E12, 1.4]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68062088E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 1.4, "minX": 1.68062082E12, "maxY": 16.666666666666668, "series": [{"data": [[1.68062082E12, 16.666666666666668]], "isOverall": false, "label": "Create-success", "isController": false}, {"data": [[1.68062082E12, 15.266666666666667], [1.68062088E12, 1.4]], "isOverall": false, "label": "GetAll-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68062088E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 1.4, "minX": 1.68062082E12, "maxY": 31.933333333333334, "series": [{"data": [[1.68062082E12, 31.933333333333334], [1.68062088E12, 1.4]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68062088E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

