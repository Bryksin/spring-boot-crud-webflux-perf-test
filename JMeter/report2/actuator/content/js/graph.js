/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 636.0, "minX": 0.0, "maxY": 5910.0, "series": [{"data": [[0.0, 2334.0], [0.1, 2336.0], [0.2, 2336.0], [0.3, 2336.0], [0.4, 2337.0], [0.5, 2340.0], [0.6, 2341.0], [0.7, 2341.0], [0.8, 2341.0], [0.9, 2342.0], [1.0, 2342.0], [1.1, 2343.0], [1.2, 2347.0], [1.3, 2348.0], [1.4, 2348.0], [1.5, 2349.0], [1.6, 2350.0], [1.7, 2350.0], [1.8, 2351.0], [1.9, 2359.0], [2.0, 2368.0], [2.1, 2368.0], [2.2, 2369.0], [2.3, 2391.0], [2.4, 2391.0], [2.5, 2393.0], [2.6, 2395.0], [2.7, 2398.0], [2.8, 2398.0], [2.9, 2399.0], [3.0, 2399.0], [3.1, 2400.0], [3.2, 2403.0], [3.3, 2405.0], [3.4, 2406.0], [3.5, 2408.0], [3.6, 2410.0], [3.7, 2410.0], [3.8, 2424.0], [3.9, 2424.0], [4.0, 2427.0], [4.1, 2512.0], [4.2, 2516.0], [4.3, 2518.0], [4.4, 2525.0], [4.5, 2528.0], [4.6, 2533.0], [4.7, 2534.0], [4.8, 2537.0], [4.9, 2538.0], [5.0, 2540.0], [5.1, 2548.0], [5.2, 2589.0], [5.3, 2818.0], [5.4, 2820.0], [5.5, 2828.0], [5.6, 2835.0], [5.7, 2838.0], [5.8, 2839.0], [5.9, 2840.0], [6.0, 2840.0], [6.1, 2845.0], [6.2, 2851.0], [6.3, 2852.0], [6.4, 2855.0], [6.5, 2856.0], [6.6, 2857.0], [6.7, 2859.0], [6.8, 2859.0], [6.9, 2861.0], [7.0, 2863.0], [7.1, 2864.0], [7.2, 2866.0], [7.3, 2866.0], [7.4, 2869.0], [7.5, 2870.0], [7.6, 2870.0], [7.7, 2874.0], [7.8, 2878.0], [7.9, 2878.0], [8.0, 2878.0], [8.1, 2879.0], [8.2, 2879.0], [8.3, 2880.0], [8.4, 2880.0], [8.5, 2882.0], [8.6, 2885.0], [8.7, 2885.0], [8.8, 2887.0], [8.9, 2889.0], [9.0, 2890.0], [9.1, 2895.0], [9.2, 2896.0], [9.3, 2896.0], [9.4, 2896.0], [9.5, 2899.0], [9.6, 2900.0], [9.7, 2900.0], [9.8, 2906.0], [9.9, 2908.0], [10.0, 2912.0], [10.1, 2914.0], [10.2, 2916.0], [10.3, 2916.0], [10.4, 2917.0], [10.5, 2918.0], [10.6, 2920.0], [10.7, 2921.0], [10.8, 2921.0], [10.9, 2921.0], [11.0, 2922.0], [11.1, 2923.0], [11.2, 2924.0], [11.3, 2924.0], [11.4, 2927.0], [11.5, 2928.0], [11.6, 2931.0], [11.7, 2937.0], [11.8, 2937.0], [11.9, 2938.0], [12.0, 2938.0], [12.1, 2940.0], [12.2, 2940.0], [12.3, 2942.0], [12.4, 2942.0], [12.5, 2942.0], [12.6, 2946.0], [12.7, 2946.0], [12.8, 2946.0], [12.9, 2946.0], [13.0, 2946.0], [13.1, 2947.0], [13.2, 2948.0], [13.3, 2952.0], [13.4, 2952.0], [13.5, 2953.0], [13.6, 2953.0], [13.7, 2957.0], [13.8, 2959.0], [13.9, 2961.0], [14.0, 2964.0], [14.1, 2965.0], [14.2, 2966.0], [14.3, 2969.0], [14.4, 2969.0], [14.5, 2971.0], [14.6, 2971.0], [14.7, 2973.0], [14.8, 2974.0], [14.9, 2977.0], [15.0, 2978.0], [15.1, 2979.0], [15.2, 2980.0], [15.3, 2985.0], [15.4, 2987.0], [15.5, 2992.0], [15.6, 2993.0], [15.7, 2995.0], [15.8, 2996.0], [15.9, 3000.0], [16.0, 3002.0], [16.1, 3002.0], [16.2, 3002.0], [16.3, 3004.0], [16.4, 3005.0], [16.5, 3009.0], [16.6, 3009.0], [16.7, 3010.0], [16.8, 3011.0], [16.9, 3013.0], [17.0, 3016.0], [17.1, 3016.0], [17.2, 3017.0], [17.3, 3018.0], [17.4, 3019.0], [17.5, 3022.0], [17.6, 3024.0], [17.7, 3026.0], [17.8, 3028.0], [17.9, 3030.0], [18.0, 3030.0], [18.1, 3031.0], [18.2, 3031.0], [18.3, 3032.0], [18.4, 3034.0], [18.5, 3034.0], [18.6, 3035.0], [18.7, 3038.0], [18.8, 3038.0], [18.9, 3039.0], [19.0, 3040.0], [19.1, 3040.0], [19.2, 3041.0], [19.3, 3042.0], [19.4, 3044.0], [19.5, 3044.0], [19.6, 3045.0], [19.7, 3047.0], [19.8, 3049.0], [19.9, 3049.0], [20.0, 3050.0], [20.1, 3050.0], [20.2, 3053.0], [20.3, 3059.0], [20.4, 3060.0], [20.5, 3063.0], [20.6, 3064.0], [20.7, 3067.0], [20.8, 3068.0], [20.9, 3068.0], [21.0, 3069.0], [21.1, 3072.0], [21.2, 3072.0], [21.3, 3073.0], [21.4, 3073.0], [21.5, 3074.0], [21.6, 3075.0], [21.7, 3075.0], [21.8, 3077.0], [21.9, 3077.0], [22.0, 3077.0], [22.1, 3078.0], [22.2, 3078.0], [22.3, 3080.0], [22.4, 3081.0], [22.5, 3081.0], [22.6, 3082.0], [22.7, 3083.0], [22.8, 3084.0], [22.9, 3084.0], [23.0, 3085.0], [23.1, 3086.0], [23.2, 3086.0], [23.3, 3087.0], [23.4, 3088.0], [23.5, 3088.0], [23.6, 3094.0], [23.7, 3094.0], [23.8, 3103.0], [23.9, 3104.0], [24.0, 3104.0], [24.1, 3108.0], [24.2, 3109.0], [24.3, 3109.0], [24.4, 3110.0], [24.5, 3116.0], [24.6, 3117.0], [24.7, 3118.0], [24.8, 3122.0], [24.9, 3124.0], [25.0, 3124.0], [25.1, 3126.0], [25.2, 3126.0], [25.3, 3126.0], [25.4, 3126.0], [25.5, 3126.0], [25.6, 3128.0], [25.7, 3129.0], [25.8, 3137.0], [25.9, 3138.0], [26.0, 3138.0], [26.1, 3140.0], [26.2, 3141.0], [26.3, 3144.0], [26.4, 3155.0], [26.5, 3159.0], [26.6, 3163.0], [26.7, 3179.0], [26.8, 3188.0], [26.9, 3191.0], [27.0, 3191.0], [27.1, 3204.0], [27.2, 3207.0], [27.3, 3207.0], [27.4, 3211.0], [27.5, 3211.0], [27.6, 3217.0], [27.7, 3218.0], [27.8, 3220.0], [27.9, 3223.0], [28.0, 3223.0], [28.1, 3225.0], [28.2, 3225.0], [28.3, 3226.0], [28.4, 3231.0], [28.5, 3232.0], [28.6, 3232.0], [28.7, 3233.0], [28.8, 3234.0], [28.9, 3235.0], [29.0, 3236.0], [29.1, 3236.0], [29.2, 3237.0], [29.3, 3238.0], [29.4, 3238.0], [29.5, 3239.0], [29.6, 3240.0], [29.7, 3240.0], [29.8, 3244.0], [29.9, 3244.0], [30.0, 3244.0], [30.1, 3245.0], [30.2, 3246.0], [30.3, 3246.0], [30.4, 3246.0], [30.5, 3247.0], [30.6, 3247.0], [30.7, 3248.0], [30.8, 3248.0], [30.9, 3249.0], [31.0, 3250.0], [31.1, 3251.0], [31.2, 3252.0], [31.3, 3252.0], [31.4, 3253.0], [31.5, 3253.0], [31.6, 3253.0], [31.7, 3254.0], [31.8, 3258.0], [31.9, 3258.0], [32.0, 3258.0], [32.1, 3260.0], [32.2, 3260.0], [32.3, 3263.0], [32.4, 3264.0], [32.5, 3266.0], [32.6, 3267.0], [32.7, 3269.0], [32.8, 3270.0], [32.9, 3272.0], [33.0, 3411.0], [33.1, 3411.0], [33.2, 3411.0], [33.3, 3412.0], [33.4, 3412.0], [33.5, 3415.0], [33.6, 3418.0], [33.7, 3418.0], [33.8, 3419.0], [33.9, 3419.0], [34.0, 3420.0], [34.1, 3421.0], [34.2, 3421.0], [34.3, 3421.0], [34.4, 3422.0], [34.5, 3422.0], [34.6, 3422.0], [34.7, 3423.0], [34.8, 3424.0], [34.9, 3424.0], [35.0, 3425.0], [35.1, 3425.0], [35.2, 3426.0], [35.3, 3426.0], [35.4, 3426.0], [35.5, 3426.0], [35.6, 3427.0], [35.7, 3428.0], [35.8, 3428.0], [35.9, 3428.0], [36.0, 3430.0], [36.1, 3431.0], [36.2, 3434.0], [36.3, 3435.0], [36.4, 3435.0], [36.5, 3439.0], [36.6, 3440.0], [36.7, 3441.0], [36.8, 3441.0], [36.9, 3441.0], [37.0, 3442.0], [37.1, 3442.0], [37.2, 3443.0], [37.3, 3443.0], [37.4, 3444.0], [37.5, 3447.0], [37.6, 3448.0], [37.7, 3449.0], [37.8, 3450.0], [37.9, 3451.0], [38.0, 3451.0], [38.1, 3451.0], [38.2, 3452.0], [38.3, 3453.0], [38.4, 3455.0], [38.5, 3458.0], [38.6, 3459.0], [38.7, 3461.0], [38.8, 3468.0], [38.9, 3468.0], [39.0, 3469.0], [39.1, 3469.0], [39.2, 3471.0], [39.3, 3474.0], [39.4, 3474.0], [39.5, 3475.0], [39.6, 3475.0], [39.7, 3476.0], [39.8, 3477.0], [39.9, 3478.0], [40.0, 3483.0], [40.1, 3484.0], [40.2, 3484.0], [40.3, 3485.0], [40.4, 3485.0], [40.5, 3488.0], [40.6, 3488.0], [40.7, 3489.0], [40.8, 3490.0], [40.9, 3490.0], [41.0, 3492.0], [41.1, 3493.0], [41.2, 3496.0], [41.3, 3506.0], [41.4, 3511.0], [41.5, 3523.0], [41.6, 3527.0], [41.7, 3531.0], [41.8, 3767.0], [41.9, 3768.0], [42.0, 3772.0], [42.1, 3773.0], [42.2, 3778.0], [42.3, 3780.0], [42.4, 3780.0], [42.5, 3781.0], [42.6, 3782.0], [42.7, 3782.0], [42.8, 3785.0], [42.9, 3785.0], [43.0, 3786.0], [43.1, 3787.0], [43.2, 3787.0], [43.3, 3788.0], [43.4, 3788.0], [43.5, 3789.0], [43.6, 3789.0], [43.7, 3790.0], [43.8, 3791.0], [43.9, 3791.0], [44.0, 3796.0], [44.1, 3797.0], [44.2, 3797.0], [44.3, 3798.0], [44.4, 3800.0], [44.5, 3804.0], [44.6, 3804.0], [44.7, 3805.0], [44.8, 3806.0], [44.9, 3824.0], [45.0, 3825.0], [45.1, 3829.0], [45.2, 3830.0], [45.3, 3830.0], [45.4, 3830.0], [45.5, 3832.0], [45.6, 3833.0], [45.7, 3833.0], [45.8, 3905.0], [45.9, 3907.0], [46.0, 3920.0], [46.1, 3921.0], [46.2, 3921.0], [46.3, 3947.0], [46.4, 3948.0], [46.5, 3963.0], [46.6, 3963.0], [46.7, 3966.0], [46.8, 3977.0], [46.9, 3977.0], [47.0, 4044.0], [47.1, 4058.0], [47.2, 4063.0], [47.3, 4069.0], [47.4, 4069.0], [47.5, 4074.0], [47.6, 4075.0], [47.7, 4075.0], [47.8, 4075.0], [47.9, 4082.0], [48.0, 4087.0], [48.1, 4087.0], [48.2, 4095.0], [48.3, 4102.0], [48.4, 4102.0], [48.5, 4103.0], [48.6, 4118.0], [48.7, 4119.0], [48.8, 4125.0], [48.9, 4125.0], [49.0, 4127.0], [49.1, 4127.0], [49.2, 4138.0], [49.3, 4142.0], [49.4, 4142.0], [49.5, 4146.0], [49.6, 4147.0], [49.7, 4150.0], [49.8, 4157.0], [49.9, 4158.0], [50.0, 4169.0], [50.1, 4253.0], [50.2, 4258.0], [50.3, 4263.0], [50.4, 4264.0], [50.5, 4268.0], [50.6, 4271.0], [50.7, 4273.0], [50.8, 4280.0], [50.9, 4281.0], [51.0, 4283.0], [51.1, 4286.0], [51.2, 4287.0], [51.3, 4288.0], [51.4, 4288.0], [51.5, 4293.0], [51.6, 4293.0], [51.7, 4294.0], [51.8, 4299.0], [51.9, 4302.0], [52.0, 4305.0], [52.1, 4306.0], [52.2, 4311.0], [52.3, 4312.0], [52.4, 4314.0], [52.5, 4314.0], [52.6, 4318.0], [52.7, 4323.0], [52.8, 4324.0], [52.9, 4326.0], [53.0, 4333.0], [53.1, 4334.0], [53.2, 4334.0], [53.3, 4336.0], [53.4, 4337.0], [53.5, 4340.0], [53.6, 4340.0], [53.7, 4343.0], [53.8, 4344.0], [53.9, 4345.0], [54.0, 4345.0], [54.1, 4346.0], [54.2, 4349.0], [54.3, 4349.0], [54.4, 4354.0], [54.5, 4355.0], [54.6, 4357.0], [54.7, 4361.0], [54.8, 4368.0], [54.9, 4368.0], [55.0, 4371.0], [55.1, 4374.0], [55.2, 4374.0], [55.3, 4380.0], [55.4, 4387.0], [55.5, 4387.0], [55.6, 4388.0], [55.7, 4388.0], [55.8, 4390.0], [55.9, 4390.0], [56.0, 4390.0], [56.1, 4394.0], [56.2, 4394.0], [56.3, 4398.0], [56.4, 4404.0], [56.5, 4405.0], [56.6, 4406.0], [56.7, 4407.0], [56.8, 4410.0], [56.9, 4412.0], [57.0, 4412.0], [57.1, 4413.0], [57.2, 4415.0], [57.3, 4415.0], [57.4, 4417.0], [57.5, 4419.0], [57.6, 4422.0], [57.7, 4423.0], [57.8, 4425.0], [57.9, 4426.0], [58.0, 4427.0], [58.1, 4429.0], [58.2, 4430.0], [58.3, 4431.0], [58.4, 4433.0], [58.5, 4433.0], [58.6, 4433.0], [58.7, 4435.0], [58.8, 4437.0], [58.9, 4438.0], [59.0, 4438.0], [59.1, 4438.0], [59.2, 4440.0], [59.3, 4440.0], [59.4, 4440.0], [59.5, 4441.0], [59.6, 4442.0], [59.7, 4442.0], [59.8, 4443.0], [59.9, 4445.0], [60.0, 4447.0], [60.1, 4448.0], [60.2, 4448.0], [60.3, 4448.0], [60.4, 4449.0], [60.5, 4449.0], [60.6, 4453.0], [60.7, 4454.0], [60.8, 4454.0], [60.9, 4454.0], [61.0, 4455.0], [61.1, 4456.0], [61.2, 4458.0], [61.3, 4459.0], [61.4, 4460.0], [61.5, 4461.0], [61.6, 4461.0], [61.7, 4461.0], [61.8, 4462.0], [61.9, 4464.0], [62.0, 4465.0], [62.1, 4466.0], [62.2, 4466.0], [62.3, 4467.0], [62.4, 4468.0], [62.5, 4470.0], [62.6, 4473.0], [62.7, 4474.0], [62.8, 4474.0], [62.9, 4474.0], [63.0, 4475.0], [63.1, 4475.0], [63.2, 4475.0], [63.3, 4476.0], [63.4, 4476.0], [63.5, 4478.0], [63.6, 4478.0], [63.7, 4479.0], [63.8, 4479.0], [63.9, 4480.0], [64.0, 4480.0], [64.1, 4481.0], [64.2, 4481.0], [64.3, 4482.0], [64.4, 4483.0], [64.5, 4483.0], [64.6, 4484.0], [64.7, 4485.0], [64.8, 4486.0], [64.9, 4487.0], [65.0, 4488.0], [65.1, 4489.0], [65.2, 4489.0], [65.3, 4491.0], [65.4, 4491.0], [65.5, 4493.0], [65.6, 4495.0], [65.7, 4496.0], [65.8, 4496.0], [65.9, 4496.0], [66.0, 4498.0], [66.1, 4498.0], [66.2, 4498.0], [66.3, 4498.0], [66.4, 4499.0], [66.5, 4499.0], [66.6, 4499.0], [66.7, 4499.0], [66.8, 4500.0], [66.9, 4501.0], [67.0, 4502.0], [67.1, 4503.0], [67.2, 4503.0], [67.3, 4503.0], [67.4, 4503.0], [67.5, 4510.0], [67.6, 4514.0], [67.7, 4514.0], [67.8, 4515.0], [67.9, 4516.0], [68.0, 4518.0], [68.1, 4520.0], [68.2, 4521.0], [68.3, 4522.0], [68.4, 4524.0], [68.5, 4525.0], [68.6, 4526.0], [68.7, 4526.0], [68.8, 4527.0], [68.9, 4527.0], [69.0, 4528.0], [69.1, 4528.0], [69.2, 4529.0], [69.3, 4529.0], [69.4, 4530.0], [69.5, 4531.0], [69.6, 4531.0], [69.7, 4532.0], [69.8, 4534.0], [69.9, 4534.0], [70.0, 4535.0], [70.1, 4535.0], [70.2, 4537.0], [70.3, 4537.0], [70.4, 4537.0], [70.5, 4538.0], [70.6, 4538.0], [70.7, 4542.0], [70.8, 4542.0], [70.9, 4543.0], [71.0, 4544.0], [71.1, 4548.0], [71.2, 4548.0], [71.3, 4548.0], [71.4, 4549.0], [71.5, 4549.0], [71.6, 4550.0], [71.7, 4550.0], [71.8, 4552.0], [71.9, 4553.0], [72.0, 4568.0], [72.1, 4569.0], [72.2, 4569.0], [72.3, 4570.0], [72.4, 4570.0], [72.5, 4574.0], [72.6, 4593.0], [72.7, 4593.0], [72.8, 4609.0], [72.9, 4610.0], [73.0, 4612.0], [73.1, 4613.0], [73.2, 4618.0], [73.3, 4979.0], [73.4, 4980.0], [73.5, 4983.0], [73.6, 5012.0], [73.7, 5014.0], [73.8, 5015.0], [73.9, 5020.0], [74.0, 5029.0], [74.1, 5031.0], [74.2, 5035.0], [74.3, 5035.0], [74.4, 5038.0], [74.5, 5164.0], [74.6, 5173.0], [74.7, 5182.0], [74.8, 5187.0], [74.9, 5194.0], [75.0, 5202.0], [75.1, 5203.0], [75.2, 5219.0], [75.3, 5223.0], [75.4, 5229.0], [75.5, 5230.0], [75.6, 5236.0], [75.7, 5238.0], [75.8, 5257.0], [75.9, 5260.0], [76.0, 5261.0], [76.1, 5264.0], [76.2, 5272.0], [76.3, 5292.0], [76.4, 5294.0], [76.5, 5294.0], [76.6, 5297.0], [76.7, 5298.0], [76.8, 5315.0], [76.9, 5315.0], [77.0, 5316.0], [77.1, 5324.0], [77.2, 5326.0], [77.3, 5326.0], [77.4, 5329.0], [77.5, 5331.0], [77.6, 5337.0], [77.7, 5340.0], [77.8, 5349.0], [77.9, 5349.0], [78.0, 5354.0], [78.1, 5354.0], [78.2, 5356.0], [78.3, 5361.0], [78.4, 5362.0], [78.5, 5364.0], [78.6, 5365.0], [78.7, 5368.0], [78.8, 5368.0], [78.9, 5368.0], [79.0, 5373.0], [79.1, 5377.0], [79.2, 5377.0], [79.3, 5382.0], [79.4, 5382.0], [79.5, 5382.0], [79.6, 5383.0], [79.7, 5392.0], [79.8, 5394.0], [79.9, 5397.0], [80.0, 5399.0], [80.1, 5401.0], [80.2, 5402.0], [80.3, 5402.0], [80.4, 5402.0], [80.5, 5404.0], [80.6, 5404.0], [80.7, 5406.0], [80.8, 5407.0], [80.9, 5407.0], [81.0, 5407.0], [81.1, 5407.0], [81.2, 5407.0], [81.3, 5409.0], [81.4, 5412.0], [81.5, 5413.0], [81.6, 5414.0], [81.7, 5415.0], [81.8, 5416.0], [81.9, 5416.0], [82.0, 5417.0], [82.1, 5421.0], [82.2, 5422.0], [82.3, 5424.0], [82.4, 5425.0], [82.5, 5426.0], [82.6, 5427.0], [82.7, 5427.0], [82.8, 5427.0], [82.9, 5429.0], [83.0, 5430.0], [83.1, 5431.0], [83.2, 5434.0], [83.3, 5434.0], [83.4, 5435.0], [83.5, 5439.0], [83.6, 5442.0], [83.7, 5443.0], [83.8, 5453.0], [83.9, 5454.0], [84.0, 5454.0], [84.1, 5455.0], [84.2, 5456.0], [84.3, 5456.0], [84.4, 5457.0], [84.5, 5458.0], [84.6, 5458.0], [84.7, 5462.0], [84.8, 5465.0], [84.9, 5467.0], [85.0, 5467.0], [85.1, 5469.0], [85.2, 5470.0], [85.3, 5472.0], [85.4, 5474.0], [85.5, 5475.0], [85.6, 5478.0], [85.7, 5480.0], [85.8, 5480.0], [85.9, 5480.0], [86.0, 5481.0], [86.1, 5482.0], [86.2, 5482.0], [86.3, 5482.0], [86.4, 5483.0], [86.5, 5483.0], [86.6, 5484.0], [86.7, 5485.0], [86.8, 5486.0], [86.9, 5491.0], [87.0, 5499.0], [87.1, 5503.0], [87.2, 5504.0], [87.3, 5505.0], [87.4, 5505.0], [87.5, 5506.0], [87.6, 5508.0], [87.7, 5509.0], [87.8, 5509.0], [87.9, 5510.0], [88.0, 5510.0], [88.1, 5512.0], [88.2, 5514.0], [88.3, 5516.0], [88.4, 5517.0], [88.5, 5518.0], [88.6, 5520.0], [88.7, 5522.0], [88.8, 5522.0], [88.9, 5524.0], [89.0, 5524.0], [89.1, 5525.0], [89.2, 5525.0], [89.3, 5526.0], [89.4, 5526.0], [89.5, 5529.0], [89.6, 5531.0], [89.7, 5532.0], [89.8, 5532.0], [89.9, 5533.0], [90.0, 5534.0], [90.1, 5537.0], [90.2, 5540.0], [90.3, 5543.0], [90.4, 5549.0], [90.5, 5550.0], [90.6, 5552.0], [90.7, 5569.0], [90.8, 5582.0], [90.9, 5584.0], [91.0, 5585.0], [91.1, 5585.0], [91.2, 5589.0], [91.3, 5589.0], [91.4, 5596.0], [91.5, 5605.0], [91.6, 5647.0], [91.7, 5648.0], [91.8, 5648.0], [91.9, 5651.0], [92.0, 5653.0], [92.1, 5662.0], [92.2, 5670.0], [92.3, 5672.0], [92.4, 5680.0], [92.5, 5685.0], [92.6, 5685.0], [92.7, 5688.0], [92.8, 5691.0], [92.9, 5692.0], [93.0, 5701.0], [93.1, 5701.0], [93.2, 5701.0], [93.3, 5702.0], [93.4, 5707.0], [93.5, 5709.0], [93.6, 5714.0], [93.7, 5716.0], [93.8, 5719.0], [93.9, 5720.0], [94.0, 5720.0], [94.1, 5724.0], [94.2, 5726.0], [94.3, 5730.0], [94.4, 5731.0], [94.5, 5732.0], [94.6, 5735.0], [94.7, 5743.0], [94.8, 5743.0], [94.9, 5744.0], [95.0, 5744.0], [95.1, 5751.0], [95.2, 5751.0], [95.3, 5753.0], [95.4, 5753.0], [95.5, 5754.0], [95.6, 5761.0], [95.7, 5763.0], [95.8, 5766.0], [95.9, 5766.0], [96.0, 5767.0], [96.1, 5769.0], [96.2, 5770.0], [96.3, 5771.0], [96.4, 5773.0], [96.5, 5787.0], [96.6, 5790.0], [96.7, 5792.0], [96.8, 5797.0], [96.9, 5811.0], [97.0, 5812.0], [97.1, 5812.0], [97.2, 5818.0], [97.3, 5818.0], [97.4, 5819.0], [97.5, 5841.0], [97.6, 5841.0], [97.7, 5842.0], [97.8, 5843.0], [97.9, 5845.0], [98.0, 5846.0], [98.1, 5846.0], [98.2, 5847.0], [98.3, 5855.0], [98.4, 5856.0], [98.5, 5860.0], [98.6, 5863.0], [98.7, 5869.0], [98.8, 5873.0], [98.9, 5880.0], [99.0, 5881.0], [99.1, 5886.0], [99.2, 5890.0], [99.3, 5892.0], [99.4, 5892.0], [99.5, 5903.0], [99.6, 5904.0], [99.7, 5904.0], [99.8, 5909.0], [99.9, 5910.0]], "isOverall": false, "label": "Actuator-health", "isController": false}, {"data": [[0.0, 636.0], [0.1, 638.0], [0.2, 652.0], [0.3, 652.0], [0.4, 668.0], [0.5, 669.0], [0.6, 670.0], [0.7, 670.0], [0.8, 672.0], [0.9, 672.0], [1.0, 675.0], [1.1, 675.0], [1.2, 679.0], [1.3, 681.0], [1.4, 681.0], [1.5, 682.0], [1.6, 688.0], [1.7, 700.0], [1.8, 702.0], [1.9, 703.0], [2.0, 706.0], [2.1, 709.0], [2.2, 711.0], [2.3, 712.0], [2.4, 716.0], [2.5, 720.0], [2.6, 723.0], [2.7, 728.0], [2.8, 742.0], [2.9, 743.0], [3.0, 752.0], [3.1, 756.0], [3.2, 766.0], [3.3, 771.0], [3.4, 777.0], [3.5, 783.0], [3.6, 786.0], [3.7, 794.0], [3.8, 798.0], [3.9, 800.0], [4.0, 800.0], [4.1, 801.0], [4.2, 802.0], [4.3, 804.0], [4.4, 804.0], [4.5, 805.0], [4.6, 805.0], [4.7, 806.0], [4.8, 807.0], [4.9, 807.0], [5.0, 808.0], [5.1, 811.0], [5.2, 812.0], [5.3, 812.0], [5.4, 815.0], [5.5, 815.0], [5.6, 815.0], [5.7, 817.0], [5.8, 817.0], [5.9, 817.0], [6.0, 817.0], [6.1, 818.0], [6.2, 822.0], [6.3, 822.0], [6.4, 823.0], [6.5, 824.0], [6.6, 824.0], [6.7, 828.0], [6.8, 828.0], [6.9, 829.0], [7.0, 830.0], [7.1, 830.0], [7.2, 833.0], [7.3, 834.0], [7.4, 836.0], [7.5, 838.0], [7.6, 839.0], [7.7, 842.0], [7.8, 845.0], [7.9, 845.0], [8.0, 846.0], [8.1, 849.0], [8.2, 849.0], [8.3, 851.0], [8.4, 854.0], [8.5, 854.0], [8.6, 855.0], [8.7, 855.0], [8.8, 855.0], [8.9, 856.0], [9.0, 856.0], [9.1, 857.0], [9.2, 857.0], [9.3, 857.0], [9.4, 859.0], [9.5, 860.0], [9.6, 860.0], [9.7, 860.0], [9.8, 861.0], [9.9, 862.0], [10.0, 862.0], [10.1, 862.0], [10.2, 863.0], [10.3, 864.0], [10.4, 864.0], [10.5, 865.0], [10.6, 870.0], [10.7, 870.0], [10.8, 875.0], [10.9, 876.0], [11.0, 877.0], [11.1, 878.0], [11.2, 884.0], [11.3, 885.0], [11.4, 885.0], [11.5, 885.0], [11.6, 891.0], [11.7, 895.0], [11.8, 896.0], [11.9, 898.0], [12.0, 898.0], [12.1, 899.0], [12.2, 899.0], [12.3, 910.0], [12.4, 912.0], [12.5, 912.0], [12.6, 914.0], [12.7, 919.0], [12.8, 920.0], [12.9, 922.0], [13.0, 923.0], [13.1, 923.0], [13.2, 925.0], [13.3, 925.0], [13.4, 926.0], [13.5, 927.0], [13.6, 928.0], [13.7, 929.0], [13.8, 930.0], [13.9, 931.0], [14.0, 932.0], [14.1, 937.0], [14.2, 939.0], [14.3, 940.0], [14.4, 940.0], [14.5, 940.0], [14.6, 949.0], [14.7, 954.0], [14.8, 958.0], [14.9, 962.0], [15.0, 965.0], [15.1, 967.0], [15.2, 969.0], [15.3, 973.0], [15.4, 981.0], [15.5, 984.0], [15.6, 985.0], [15.7, 987.0], [15.8, 989.0], [15.9, 991.0], [16.0, 992.0], [16.1, 1000.0], [16.2, 1001.0], [16.3, 1002.0], [16.4, 1007.0], [16.5, 1014.0], [16.6, 1015.0], [16.7, 1018.0], [16.8, 1021.0], [16.9, 1023.0], [17.0, 1024.0], [17.1, 1025.0], [17.2, 1028.0], [17.3, 1029.0], [17.4, 1030.0], [17.5, 1031.0], [17.6, 1033.0], [17.7, 1033.0], [17.8, 1035.0], [17.9, 1035.0], [18.0, 1036.0], [18.1, 1041.0], [18.2, 1045.0], [18.3, 1046.0], [18.4, 1047.0], [18.5, 1048.0], [18.6, 1049.0], [18.7, 1049.0], [18.8, 1049.0], [18.9, 1054.0], [19.0, 1057.0], [19.1, 1060.0], [19.2, 1062.0], [19.3, 1064.0], [19.4, 1068.0], [19.5, 1069.0], [19.6, 1070.0], [19.7, 1070.0], [19.8, 1071.0], [19.9, 1075.0], [20.0, 1079.0], [20.1, 1080.0], [20.2, 1085.0], [20.3, 1089.0], [20.4, 1090.0], [20.5, 1093.0], [20.6, 1094.0], [20.7, 1094.0], [20.8, 1097.0], [20.9, 1098.0], [21.0, 1100.0], [21.1, 1101.0], [21.2, 1104.0], [21.3, 1105.0], [21.4, 1107.0], [21.5, 1107.0], [21.6, 1108.0], [21.7, 1108.0], [21.8, 1111.0], [21.9, 1113.0], [22.0, 1116.0], [22.1, 1116.0], [22.2, 1122.0], [22.3, 1123.0], [22.4, 1123.0], [22.5, 1123.0], [22.6, 1123.0], [22.7, 1124.0], [22.8, 1125.0], [22.9, 1125.0], [23.0, 1126.0], [23.1, 1128.0], [23.2, 1130.0], [23.3, 1131.0], [23.4, 1132.0], [23.5, 1133.0], [23.6, 1134.0], [23.7, 1136.0], [23.8, 1139.0], [23.9, 1141.0], [24.0, 1143.0], [24.1, 1143.0], [24.2, 1144.0], [24.3, 1147.0], [24.4, 1147.0], [24.5, 1147.0], [24.6, 1150.0], [24.7, 1150.0], [24.8, 1153.0], [24.9, 1153.0], [25.0, 1156.0], [25.1, 1157.0], [25.2, 1158.0], [25.3, 1161.0], [25.4, 1163.0], [25.5, 1166.0], [25.6, 1168.0], [25.7, 1169.0], [25.8, 1172.0], [25.9, 1173.0], [26.0, 1174.0], [26.1, 1174.0], [26.2, 1174.0], [26.3, 1175.0], [26.4, 1177.0], [26.5, 1178.0], [26.6, 1179.0], [26.7, 1179.0], [26.8, 1181.0], [26.9, 1182.0], [27.0, 1185.0], [27.1, 1188.0], [27.2, 1189.0], [27.3, 1191.0], [27.4, 1195.0], [27.5, 1196.0], [27.6, 1197.0], [27.7, 1197.0], [27.8, 1197.0], [27.9, 1199.0], [28.0, 1199.0], [28.1, 1199.0], [28.2, 1200.0], [28.3, 1203.0], [28.4, 1207.0], [28.5, 1209.0], [28.6, 1212.0], [28.7, 1212.0], [28.8, 1214.0], [28.9, 1215.0], [29.0, 1217.0], [29.1, 1218.0], [29.2, 1219.0], [29.3, 1220.0], [29.4, 1221.0], [29.5, 1221.0], [29.6, 1223.0], [29.7, 1223.0], [29.8, 1223.0], [29.9, 1225.0], [30.0, 1226.0], [30.1, 1227.0], [30.2, 1229.0], [30.3, 1231.0], [30.4, 1233.0], [30.5, 1236.0], [30.6, 1236.0], [30.7, 1239.0], [30.8, 1241.0], [30.9, 1243.0], [31.0, 1245.0], [31.1, 1246.0], [31.2, 1246.0], [31.3, 1248.0], [31.4, 1252.0], [31.5, 1253.0], [31.6, 1254.0], [31.7, 1254.0], [31.8, 1255.0], [31.9, 1255.0], [32.0, 1256.0], [32.1, 1257.0], [32.2, 1259.0], [32.3, 1259.0], [32.4, 1260.0], [32.5, 1261.0], [32.6, 1264.0], [32.7, 1265.0], [32.8, 1269.0], [32.9, 1270.0], [33.0, 1270.0], [33.1, 1270.0], [33.2, 1271.0], [33.3, 1272.0], [33.4, 1273.0], [33.5, 1275.0], [33.6, 1276.0], [33.7, 1277.0], [33.8, 1278.0], [33.9, 1280.0], [34.0, 1280.0], [34.1, 1280.0], [34.2, 1281.0], [34.3, 1282.0], [34.4, 1283.0], [34.5, 1284.0], [34.6, 1286.0], [34.7, 1286.0], [34.8, 1287.0], [34.9, 1289.0], [35.0, 1292.0], [35.1, 1293.0], [35.2, 1294.0], [35.3, 1295.0], [35.4, 1295.0], [35.5, 1295.0], [35.6, 1298.0], [35.7, 1298.0], [35.8, 1300.0], [35.9, 1300.0], [36.0, 1302.0], [36.1, 1303.0], [36.2, 1303.0], [36.3, 1303.0], [36.4, 1304.0], [36.5, 1304.0], [36.6, 1306.0], [36.7, 1306.0], [36.8, 1307.0], [36.9, 1310.0], [37.0, 1310.0], [37.1, 1314.0], [37.2, 1314.0], [37.3, 1315.0], [37.4, 1316.0], [37.5, 1319.0], [37.6, 1321.0], [37.7, 1322.0], [37.8, 1324.0], [37.9, 1325.0], [38.0, 1325.0], [38.1, 1325.0], [38.2, 1330.0], [38.3, 1331.0], [38.4, 1331.0], [38.5, 1333.0], [38.6, 1333.0], [38.7, 1335.0], [38.8, 1336.0], [38.9, 1338.0], [39.0, 1339.0], [39.1, 1340.0], [39.2, 1341.0], [39.3, 1343.0], [39.4, 1344.0], [39.5, 1347.0], [39.6, 1348.0], [39.7, 1349.0], [39.8, 1351.0], [39.9, 1352.0], [40.0, 1352.0], [40.1, 1354.0], [40.2, 1355.0], [40.3, 1359.0], [40.4, 1361.0], [40.5, 1361.0], [40.6, 1362.0], [40.7, 1363.0], [40.8, 1364.0], [40.9, 1364.0], [41.0, 1365.0], [41.1, 1368.0], [41.2, 1368.0], [41.3, 1368.0], [41.4, 1370.0], [41.5, 1371.0], [41.6, 1375.0], [41.7, 1375.0], [41.8, 1376.0], [41.9, 1376.0], [42.0, 1379.0], [42.1, 1379.0], [42.2, 1380.0], [42.3, 1382.0], [42.4, 1383.0], [42.5, 1384.0], [42.6, 1384.0], [42.7, 1387.0], [42.8, 1388.0], [42.9, 1389.0], [43.0, 1390.0], [43.1, 1393.0], [43.2, 1393.0], [43.3, 1398.0], [43.4, 1400.0], [43.5, 1403.0], [43.6, 1404.0], [43.7, 1405.0], [43.8, 1406.0], [43.9, 1406.0], [44.0, 1406.0], [44.1, 1407.0], [44.2, 1407.0], [44.3, 1408.0], [44.4, 1415.0], [44.5, 1415.0], [44.6, 1415.0], [44.7, 1416.0], [44.8, 1416.0], [44.9, 1418.0], [45.0, 1420.0], [45.1, 1424.0], [45.2, 1425.0], [45.3, 1426.0], [45.4, 1428.0], [45.5, 1428.0], [45.6, 1430.0], [45.7, 1431.0], [45.8, 1433.0], [45.9, 1433.0], [46.0, 1434.0], [46.1, 1434.0], [46.2, 1435.0], [46.3, 1435.0], [46.4, 1436.0], [46.5, 1437.0], [46.6, 1438.0], [46.7, 1438.0], [46.8, 1438.0], [46.9, 1440.0], [47.0, 1441.0], [47.1, 1441.0], [47.2, 1441.0], [47.3, 1443.0], [47.4, 1444.0], [47.5, 1445.0], [47.6, 1446.0], [47.7, 1446.0], [47.8, 1446.0], [47.9, 1447.0], [48.0, 1447.0], [48.1, 1450.0], [48.2, 1450.0], [48.3, 1452.0], [48.4, 1453.0], [48.5, 1453.0], [48.6, 1454.0], [48.7, 1455.0], [48.8, 1455.0], [48.9, 1456.0], [49.0, 1456.0], [49.1, 1457.0], [49.2, 1459.0], [49.3, 1462.0], [49.4, 1462.0], [49.5, 1463.0], [49.6, 1465.0], [49.7, 1466.0], [49.8, 1466.0], [49.9, 1467.0], [50.0, 1471.0], [50.1, 1473.0], [50.2, 1473.0], [50.3, 1474.0], [50.4, 1474.0], [50.5, 1474.0], [50.6, 1474.0], [50.7, 1475.0], [50.8, 1481.0], [50.9, 1482.0], [51.0, 1482.0], [51.1, 1483.0], [51.2, 1484.0], [51.3, 1484.0], [51.4, 1485.0], [51.5, 1486.0], [51.6, 1487.0], [51.7, 1488.0], [51.8, 1490.0], [51.9, 1491.0], [52.0, 1492.0], [52.1, 1493.0], [52.2, 1493.0], [52.3, 1496.0], [52.4, 1497.0], [52.5, 1499.0], [52.6, 1500.0], [52.7, 1501.0], [52.8, 1509.0], [52.9, 1510.0], [53.0, 1510.0], [53.1, 1511.0], [53.2, 1512.0], [53.3, 1512.0], [53.4, 1513.0], [53.5, 1514.0], [53.6, 1517.0], [53.7, 1517.0], [53.8, 1518.0], [53.9, 1520.0], [54.0, 1521.0], [54.1, 1522.0], [54.2, 1524.0], [54.3, 1527.0], [54.4, 1528.0], [54.5, 1531.0], [54.6, 1532.0], [54.7, 1532.0], [54.8, 1534.0], [54.9, 1534.0], [55.0, 1535.0], [55.1, 1536.0], [55.2, 1539.0], [55.3, 1540.0], [55.4, 1542.0], [55.5, 1543.0], [55.6, 1544.0], [55.7, 1547.0], [55.8, 1547.0], [55.9, 1547.0], [56.0, 1547.0], [56.1, 1548.0], [56.2, 1550.0], [56.3, 1551.0], [56.4, 1553.0], [56.5, 1553.0], [56.6, 1554.0], [56.7, 1554.0], [56.8, 1555.0], [56.9, 1556.0], [57.0, 1556.0], [57.1, 1559.0], [57.2, 1559.0], [57.3, 1560.0], [57.4, 1560.0], [57.5, 1562.0], [57.6, 1563.0], [57.7, 1565.0], [57.8, 1565.0], [57.9, 1565.0], [58.0, 1565.0], [58.1, 1567.0], [58.2, 1567.0], [58.3, 1567.0], [58.4, 1569.0], [58.5, 1569.0], [58.6, 1570.0], [58.7, 1570.0], [58.8, 1571.0], [58.9, 1573.0], [59.0, 1574.0], [59.1, 1576.0], [59.2, 1576.0], [59.3, 1578.0], [59.4, 1578.0], [59.5, 1579.0], [59.6, 1580.0], [59.7, 1581.0], [59.8, 1584.0], [59.9, 1584.0], [60.0, 1585.0], [60.1, 1585.0], [60.2, 1588.0], [60.3, 1588.0], [60.4, 1588.0], [60.5, 1588.0], [60.6, 1589.0], [60.7, 1590.0], [60.8, 1591.0], [60.9, 1593.0], [61.0, 1593.0], [61.1, 1594.0], [61.2, 1596.0], [61.3, 1596.0], [61.4, 1597.0], [61.5, 1599.0], [61.6, 1600.0], [61.7, 1601.0], [61.8, 1602.0], [61.9, 1602.0], [62.0, 1604.0], [62.1, 1605.0], [62.2, 1605.0], [62.3, 1609.0], [62.4, 1609.0], [62.5, 1610.0], [62.6, 1610.0], [62.7, 1610.0], [62.8, 1610.0], [62.9, 1612.0], [63.0, 1613.0], [63.1, 1614.0], [63.2, 1615.0], [63.3, 1616.0], [63.4, 1616.0], [63.5, 1616.0], [63.6, 1620.0], [63.7, 1621.0], [63.8, 1623.0], [63.9, 1624.0], [64.0, 1626.0], [64.1, 1628.0], [64.2, 1630.0], [64.3, 1630.0], [64.4, 1631.0], [64.5, 1631.0], [64.6, 1631.0], [64.7, 1631.0], [64.8, 1632.0], [64.9, 1636.0], [65.0, 1638.0], [65.1, 1638.0], [65.2, 1641.0], [65.3, 1641.0], [65.4, 1642.0], [65.5, 1642.0], [65.6, 1645.0], [65.7, 1646.0], [65.8, 1646.0], [65.9, 1648.0], [66.0, 1648.0], [66.1, 1648.0], [66.2, 1648.0], [66.3, 1649.0], [66.4, 1651.0], [66.5, 1651.0], [66.6, 1653.0], [66.7, 1654.0], [66.8, 1655.0], [66.9, 1656.0], [67.0, 1656.0], [67.1, 1657.0], [67.2, 1657.0], [67.3, 1657.0], [67.4, 1658.0], [67.5, 1659.0], [67.6, 1659.0], [67.7, 1661.0], [67.8, 1662.0], [67.9, 1662.0], [68.0, 1663.0], [68.1, 1663.0], [68.2, 1667.0], [68.3, 1667.0], [68.4, 1668.0], [68.5, 1668.0], [68.6, 1669.0], [68.7, 1669.0], [68.8, 1669.0], [68.9, 1670.0], [69.0, 1670.0], [69.1, 1670.0], [69.2, 1670.0], [69.3, 1670.0], [69.4, 1672.0], [69.5, 1675.0], [69.6, 1676.0], [69.7, 1676.0], [69.8, 1676.0], [69.9, 1677.0], [70.0, 1679.0], [70.1, 1680.0], [70.2, 1681.0], [70.3, 1681.0], [70.4, 1683.0], [70.5, 1684.0], [70.6, 1685.0], [70.7, 1685.0], [70.8, 1686.0], [70.9, 1687.0], [71.0, 1689.0], [71.1, 1689.0], [71.2, 1690.0], [71.3, 1690.0], [71.4, 1690.0], [71.5, 1693.0], [71.6, 1693.0], [71.7, 1695.0], [71.8, 1699.0], [71.9, 1701.0], [72.0, 1701.0], [72.1, 1703.0], [72.2, 1703.0], [72.3, 1704.0], [72.4, 1704.0], [72.5, 1704.0], [72.6, 1707.0], [72.7, 1707.0], [72.8, 1708.0], [72.9, 1709.0], [73.0, 1709.0], [73.1, 1709.0], [73.2, 1710.0], [73.3, 1710.0], [73.4, 1712.0], [73.5, 1713.0], [73.6, 1715.0], [73.7, 1715.0], [73.8, 1717.0], [73.9, 1718.0], [74.0, 1720.0], [74.1, 1720.0], [74.2, 1721.0], [74.3, 1722.0], [74.4, 1724.0], [74.5, 1726.0], [74.6, 1727.0], [74.7, 1728.0], [74.8, 1728.0], [74.9, 1732.0], [75.0, 1735.0], [75.1, 1735.0], [75.2, 1736.0], [75.3, 1738.0], [75.4, 1739.0], [75.5, 1740.0], [75.6, 1742.0], [75.7, 1744.0], [75.8, 1745.0], [75.9, 1748.0], [76.0, 1749.0], [76.1, 1749.0], [76.2, 1751.0], [76.3, 1752.0], [76.4, 1754.0], [76.5, 1754.0], [76.6, 1755.0], [76.7, 1755.0], [76.8, 1756.0], [76.9, 1757.0], [77.0, 1759.0], [77.1, 1759.0], [77.2, 1761.0], [77.3, 1761.0], [77.4, 1763.0], [77.5, 1763.0], [77.6, 1764.0], [77.7, 1764.0], [77.8, 1765.0], [77.9, 1765.0], [78.0, 1767.0], [78.1, 1767.0], [78.2, 1767.0], [78.3, 1768.0], [78.4, 1768.0], [78.5, 1768.0], [78.6, 1769.0], [78.7, 1775.0], [78.8, 1776.0], [78.9, 1776.0], [79.0, 1777.0], [79.1, 1778.0], [79.2, 1779.0], [79.3, 1779.0], [79.4, 1779.0], [79.5, 1781.0], [79.6, 1781.0], [79.7, 1782.0], [79.8, 1783.0], [79.9, 1783.0], [80.0, 1785.0], [80.1, 1785.0], [80.2, 1786.0], [80.3, 1787.0], [80.4, 1788.0], [80.5, 1788.0], [80.6, 1790.0], [80.7, 1790.0], [80.8, 1792.0], [80.9, 1793.0], [81.0, 1793.0], [81.1, 1796.0], [81.2, 1796.0], [81.3, 1796.0], [81.4, 1798.0], [81.5, 1799.0], [81.6, 1800.0], [81.7, 1801.0], [81.8, 1801.0], [81.9, 1802.0], [82.0, 1803.0], [82.1, 1803.0], [82.2, 1804.0], [82.3, 1804.0], [82.4, 1805.0], [82.5, 1806.0], [82.6, 1807.0], [82.7, 1807.0], [82.8, 1810.0], [82.9, 1810.0], [83.0, 1813.0], [83.1, 1815.0], [83.2, 1815.0], [83.3, 1816.0], [83.4, 1816.0], [83.5, 1817.0], [83.6, 1818.0], [83.7, 1818.0], [83.8, 1819.0], [83.9, 1821.0], [84.0, 1821.0], [84.1, 1821.0], [84.2, 1823.0], [84.3, 1826.0], [84.4, 1827.0], [84.5, 1829.0], [84.6, 1830.0], [84.7, 1830.0], [84.8, 1830.0], [84.9, 1830.0], [85.0, 1831.0], [85.1, 1834.0], [85.2, 1836.0], [85.3, 1837.0], [85.4, 1842.0], [85.5, 1846.0], [85.6, 1847.0], [85.7, 1847.0], [85.8, 1849.0], [85.9, 1850.0], [86.0, 1851.0], [86.1, 1852.0], [86.2, 1854.0], [86.3, 1858.0], [86.4, 1861.0], [86.5, 1862.0], [86.6, 1868.0], [86.7, 1868.0], [86.8, 1871.0], [86.9, 1876.0], [87.0, 1876.0], [87.1, 1880.0], [87.2, 1882.0], [87.3, 1883.0], [87.4, 1883.0], [87.5, 1886.0], [87.6, 1888.0], [87.7, 1888.0], [87.8, 1889.0], [87.9, 1890.0], [88.0, 1890.0], [88.1, 1895.0], [88.2, 1898.0], [88.3, 1902.0], [88.4, 1902.0], [88.5, 1903.0], [88.6, 1904.0], [88.7, 1904.0], [88.8, 1907.0], [88.9, 1909.0], [89.0, 1909.0], [89.1, 1912.0], [89.2, 1914.0], [89.3, 1916.0], [89.4, 1918.0], [89.5, 1921.0], [89.6, 1922.0], [89.7, 1922.0], [89.8, 1924.0], [89.9, 1928.0], [90.0, 1929.0], [90.1, 1931.0], [90.2, 1933.0], [90.3, 1936.0], [90.4, 1942.0], [90.5, 1948.0], [90.6, 1949.0], [90.7, 1951.0], [90.8, 1952.0], [90.9, 1953.0], [91.0, 1956.0], [91.1, 1960.0], [91.2, 1962.0], [91.3, 1967.0], [91.4, 1970.0], [91.5, 1971.0], [91.6, 1972.0], [91.7, 1982.0], [91.8, 1984.0], [91.9, 1984.0], [92.0, 1990.0], [92.1, 1992.0], [92.2, 1993.0], [92.3, 2000.0], [92.4, 2001.0], [92.5, 2006.0], [92.6, 2007.0], [92.7, 2010.0], [92.8, 2010.0], [92.9, 2020.0], [93.0, 2021.0], [93.1, 2022.0], [93.2, 2028.0], [93.3, 2031.0], [93.4, 2031.0], [93.5, 2040.0], [93.6, 2041.0], [93.7, 2045.0], [93.8, 2048.0], [93.9, 2054.0], [94.0, 2055.0], [94.1, 2060.0], [94.2, 2066.0], [94.3, 2071.0], [94.4, 2074.0], [94.5, 2076.0], [94.6, 2079.0], [94.7, 2089.0], [94.8, 2101.0], [94.9, 2108.0], [95.0, 2118.0], [95.1, 2124.0], [95.2, 2136.0], [95.3, 2142.0], [95.4, 2156.0], [95.5, 2160.0], [95.6, 2180.0], [95.7, 2197.0], [95.8, 2219.0], [95.9, 2237.0], [96.0, 2239.0], [96.1, 2241.0], [96.2, 2258.0], [96.3, 2264.0], [96.4, 2264.0], [96.5, 2292.0], [96.6, 2308.0], [96.7, 2322.0], [96.8, 2352.0], [96.9, 2371.0], [97.0, 2391.0], [97.1, 2411.0], [97.2, 2420.0], [97.3, 2424.0], [97.4, 2444.0], [97.5, 2462.0], [97.6, 2473.0], [97.7, 2480.0], [97.8, 2493.0], [97.9, 2512.0], [98.0, 2533.0], [98.1, 2553.0], [98.2, 2573.0], [98.3, 2591.0], [98.4, 2609.0], [98.5, 2630.0], [98.6, 2651.0], [98.7, 2667.0], [98.8, 2678.0], [98.9, 2693.0], [99.0, 2706.0], [99.1, 2738.0], [99.2, 2750.0], [99.3, 2770.0], [99.4, 2788.0], [99.5, 2789.0], [99.6, 2791.0], [99.7, 2806.0], [99.8, 2830.0], [99.9, 2846.0]], "isOverall": false, "label": "Actuator-Info", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 3.0, "minX": 600.0, "maxY": 104.0, "series": [{"data": [[2300.0, 30.0], [2400.0, 10.0], [2500.0, 13.0], [2800.0, 43.0], [2900.0, 63.0], [3000.0, 78.0], [3100.0, 33.0], [3200.0, 59.0], [3400.0, 83.0], [3500.0, 5.0], [3700.0, 26.0], [3800.0, 14.0], [3900.0, 12.0], [4000.0, 13.0], [4200.0, 18.0], [4300.0, 45.0], [4100.0, 18.0], [4400.0, 104.0], [4500.0, 60.0], [4600.0, 5.0], [5100.0, 5.0], [5000.0, 9.0], [4900.0, 3.0], [5200.0, 18.0], [5300.0, 34.0], [5400.0, 70.0], [5500.0, 44.0], [5600.0, 15.0], [5700.0, 39.0], [5800.0, 26.0], [5900.0, 5.0]], "isOverall": false, "label": "Actuator-health", "isController": false}, {"data": [[2100.0, 10.0], [2200.0, 8.0], [2300.0, 5.0], [600.0, 16.0], [2400.0, 8.0], [2500.0, 5.0], [2600.0, 6.0], [700.0, 22.0], [2800.0, 3.0], [2700.0, 7.0], [800.0, 85.0], [900.0, 38.0], [1000.0, 48.0], [1100.0, 72.0], [1200.0, 76.0], [1300.0, 76.0], [1400.0, 92.0], [1500.0, 90.0], [1600.0, 103.0], [1700.0, 97.0], [1800.0, 67.0], [1900.0, 41.0], [2000.0, 25.0]], "isOverall": false, "label": "Actuator-Info", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 5900.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 526.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1474.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 526.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1474.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 618.658499999999, "minX": 1.68062076E12, "maxY": 618.658499999999, "series": [{"data": [[1.68062076E12, 618.658499999999]], "isOverall": false, "label": "Actuator", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68062076E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 665.75, "minX": 1.0, "maxY": 5910.0, "series": [{"data": [[2.0, 2341.0], [3.0, 2337.0], [4.0, 2336.0], [5.0, 2337.0], [6.0, 2336.0], [7.0, 2350.0], [8.0, 2334.0], [9.0, 2348.0], [10.0, 2342.0], [11.0, 2341.0], [12.0, 2342.0], [13.0, 2341.0], [14.0, 2359.0], [15.0, 2368.0], [16.0, 2369.0], [17.0, 2368.0], [18.0, 2347.0], [19.0, 2349.0], [20.0, 2348.0], [21.0, 2351.0], [22.0, 2406.0], [23.0, 2343.0], [24.0, 2405.0], [25.0, 2403.0], [26.0, 2398.0], [27.0, 2398.0], [28.0, 2399.0], [29.0, 2395.0], [30.0, 2391.0], [31.0, 2393.0], [33.0, 2408.0], [32.0, 2410.0], [35.0, 2410.0], [34.0, 2391.0], [37.0, 3232.0], [36.0, 3232.0], [39.0, 2400.0], [38.0, 2399.0], [41.0, 2424.0], [40.0, 3223.0], [43.0, 2427.0], [42.0, 2424.0], [45.0, 3226.0], [44.0, 3220.0], [47.0, 3240.0], [46.0, 3240.0], [49.0, 3238.0], [48.0, 3239.0], [51.0, 3236.0], [50.0, 3237.0], [53.0, 3233.0], [52.0, 3235.0], [55.0, 3254.0], [54.0, 3231.0], [57.0, 3253.0], [56.0, 3253.0], [59.0, 3250.0], [58.0, 3251.0], [61.0, 3247.0], [60.0, 3249.0], [63.0, 3245.0], [62.0, 3246.0], [67.0, 3270.0], [66.0, 3272.0], [65.0, 3244.0], [64.0, 3244.0], [71.0, 3264.0], [70.0, 3266.0], [69.0, 3267.0], [68.0, 3269.0], [75.0, 2518.0], [74.0, 3258.0], [73.0, 3263.0], [72.0, 2524.0], [79.0, 3252.0], [78.0, 3252.0], [77.0, 3253.0], [76.0, 2516.0], [83.0, 2540.0], [82.0, 2533.0], [81.0, 2548.0], [80.0, 2512.0], [87.0, 3258.0], [86.0, 3260.0], [85.0, 2534.0], [84.0, 3260.0], [91.0, 3248.0], [90.0, 2528.0], [89.0, 2537.0], [88.0, 2538.0], [95.0, 2525.0], [94.0, 3246.0], [93.0, 3246.0], [92.0, 3247.0], [99.0, 3159.0], [98.0, 3150.5], [96.0, 3244.0], [103.0, 3155.0], [102.0, 3258.0], [101.0, 3234.0], [100.0, 3117.0], [107.0, 3085.0], [106.0, 3088.0], [105.0, 3103.0], [104.0, 3248.0], [111.0, 3137.0], [110.0, 3238.0], [109.0, 3140.0], [108.0, 3138.0], [115.0, 3075.0], [114.0, 3077.0], [113.0, 3078.0], [112.0, 3236.0], [119.0, 3128.0], [118.0, 3129.0], [117.0, 3086.0], [116.0, 3086.0], [123.0, 3122.0], [122.0, 3223.0], [121.0, 3225.0], [120.0, 3225.0], [127.0, 3072.0], [126.0, 3069.0], [125.0, 3075.0], [124.0, 3063.0], [135.0, 3060.0], [134.0, 3077.0], [133.0, 3217.0], [132.0, 3218.0], [131.0, 3211.0], [130.0, 3080.0], [129.0, 3067.0], [128.0, 3116.0], [143.0, 3204.0], [142.0, 3118.0], [141.0, 3207.0], [140.0, 3049.0], [139.0, 3124.0], [138.0, 3126.0], [137.0, 3069.0], [136.0, 3108.0], [151.0, 3104.0], [149.0, 3032.0], [148.0, 3128.5], [146.0, 3053.0], [145.0, 3211.0], [144.0, 3041.0], [159.0, 3191.0], [158.0, 3191.0], [157.0, 3094.0], [156.0, 3094.0], [155.0, 3050.0], [154.0, 3039.0], [153.0, 3038.0], [152.0, 3040.0], [167.0, 3034.0], [166.0, 3179.0], [165.0, 3081.0], [164.0, 3082.0], [163.0, 3188.0], [162.0, 3045.0], [161.0, 3030.5], [175.0, 3047.0], [174.0, 2980.0], [173.0, 3044.0], [172.0, 3044.0], [171.0, 3144.0], [170.0, 3025.5], [168.0, 3035.0], [183.0, 3030.0], [182.0, 3124.0], [181.0, 3126.0], [180.0, 3126.0], [179.0, 3016.0], [178.0, 2992.0], [177.0, 2977.0], [176.0, 2978.0], [191.0, 2993.0], [190.0, 2995.0], [189.0, 2965.0], [188.0, 3141.0], [187.0, 2966.0], [186.0, 2959.0], [185.0, 3028.0], [184.0, 3002.0], [199.0, 3004.0], [198.0, 2971.0], [197.0, 2947.0], [196.0, 3126.0], [195.0, 3126.0], [194.0, 2985.0], [193.0, 3018.0], [192.0, 3019.0], [207.0, 2961.0], [206.0, 3002.0], [205.0, 3109.0], [204.0, 3109.0], [203.0, 3110.0], [202.0, 2969.0], [201.0, 2971.0], [200.0, 3010.0], [215.0, 3088.0], [214.0, 2946.0], [213.0, 2946.0], [212.0, 2987.0], [211.0, 2942.0], [210.0, 2946.0], [209.0, 2946.0], [208.0, 2952.0], [222.0, 3017.0], [220.0, 2973.0], [219.0, 2974.0], [218.0, 2931.0], [217.0, 2938.0], [216.0, 3087.0], [231.0, 2964.0], [230.0, 2940.0], [229.0, 2948.0], [228.0, 2920.0], [227.0, 2921.0], [226.0, 2922.0], [225.0, 2974.0], [224.0, 3073.0], [239.0, 2921.0], [238.0, 2924.0], [237.0, 3072.0], [236.0, 2952.0], [235.0, 2953.0], [234.0, 2900.0], [233.0, 3081.0], [232.0, 3083.0], [247.0, 2906.0], [246.0, 2953.0], [245.0, 2940.0], [244.0, 2916.0], [243.0, 2917.0], [242.0, 2914.0], [241.0, 2890.0], [240.0, 3068.0], [255.0, 2937.0], [254.0, 3074.0], [253.0, 3077.0], [252.0, 2899.0], [251.0, 2946.0], [250.0, 2908.0], [249.0, 3084.0], [248.0, 3084.0], [270.0, 3049.0], [271.0, 2927.0], [269.0, 2885.0], [268.0, 2887.0], [267.0, 2885.0], [266.0, 2937.0], [265.0, 2878.0], [264.0, 2878.0], [263.0, 3059.0], [257.0, 2896.0], [256.0, 2889.0], [259.0, 3064.0], [258.0, 2896.0], [262.0, 2882.0], [261.0, 2942.0], [260.0, 2942.0], [286.0, 2928.0], [287.0, 2880.0], [285.0, 3026.0], [284.0, 2863.0], [283.0, 2864.0], [282.0, 2869.0], [281.0, 2916.0], [280.0, 2918.0], [279.0, 3038.0], [273.0, 2924.0], [272.0, 2866.0], [275.0, 3040.0], [274.0, 3042.0], [278.0, 2857.0], [277.0, 2859.0], [276.0, 2874.0], [302.0, 2859.0], [303.0, 3011.0], [301.0, 2861.0], [300.0, 2839.0], [299.0, 2840.0], [298.0, 2912.0], [297.0, 2866.0], [296.0, 3022.0], [295.0, 3024.0], [289.0, 2878.0], [288.0, 2879.0], [291.0, 2923.0], [290.0, 3031.0], [294.0, 2921.0], [293.0, 2851.0], [292.0, 2852.0], [318.0, 2879.0], [319.0, 2828.0], [317.0, 3506.0], [316.0, 2996.0], [315.0, 2838.0], [314.0, 2835.0], [313.0, 2840.0], [312.0, 3002.0], [311.0, 2818.0], [305.0, 2900.0], [304.0, 3016.0], [307.0, 2896.0], [306.0, 3013.0], [310.0, 2820.0], [309.0, 2845.0], [308.0, 2895.0], [334.0, 3523.0], [335.0, 3461.0], [333.0, 3527.0], [332.0, 3531.0], [331.0, 2855.0], [330.0, 3469.0], [329.0, 2856.0], [328.0, 3234.0], [326.0, 3485.0], [321.0, 2870.0], [320.0, 2870.0], [323.0, 3009.0], [322.0, 3009.0], [325.0, 3471.0], [324.0, 3005.0], [350.0, 3451.0], [351.0, 3451.0], [349.0, 3458.0], [348.0, 3441.0], [347.0, 3443.0], [346.0, 3444.0], [345.0, 3469.0], [344.0, 3441.0], [343.0, 3441.0], [336.0, 3459.0], [339.0, 3451.0], [338.0, 3452.5], [342.0, 3442.0], [341.0, 3447.0], [340.0, 3448.0], [366.0, 3428.0], [367.0, 3490.0], [365.0, 3492.0], [364.0, 3430.0], [363.0, 3493.0], [362.0, 3431.0], [361.0, 3434.0], [360.0, 3443.0], [359.0, 3439.0], [353.0, 3488.0], [352.0, 3455.0], [355.0, 3450.0], [354.0, 3488.0], [358.0, 3440.0], [357.0, 3511.0], [356.0, 3449.0], [382.0, 3421.0], [383.0, 3412.0], [381.0, 3426.0], [380.0, 3468.0], [379.0, 3428.0], [378.0, 3419.0], [377.0, 3421.0], [376.0, 3425.0], [375.0, 3475.0], [369.0, 3442.0], [368.0, 3484.0], [371.0, 3418.0], [370.0, 3419.0], [374.0, 3435.0], [373.0, 3435.0], [372.0, 3478.0], [398.0, 3424.0], [399.0, 3422.0], [397.0, 3489.0], [396.0, 3490.0], [395.0, 3411.0], [394.0, 3426.0], [393.0, 3426.0], [392.0, 3422.0], [391.0, 3425.0], [385.0, 3476.0], [384.0, 3420.0], [387.0, 3474.0], [386.0, 3474.0], [390.0, 3426.0], [389.0, 3427.0], [388.0, 3428.0], [414.0, 3415.0], [415.0, 3806.0], [413.0, 3423.0], [412.0, 3496.0], [411.0, 3424.0], [410.0, 3422.0], [409.0, 3411.0], [408.0, 3475.0], [407.0, 3412.0], [401.0, 3485.0], [400.0, 3421.0], [403.0, 3483.0], [402.0, 3484.0], [406.0, 3411.0], [405.0, 3477.0], [404.0, 3418.0], [430.0, 3805.0], [431.0, 3804.0], [429.0, 3788.0], [428.0, 3788.0], [427.0, 3789.0], [426.0, 4163.5], [425.0, 4530.0], [423.0, 4156.0], [417.0, 3785.0], [416.0, 3790.0], [419.0, 3787.0], [418.0, 3804.0], [421.0, 3800.0], [420.0, 3782.0], [446.0, 3768.0], [447.0, 3787.0], [445.0, 3773.0], [444.0, 3791.0], [443.0, 3772.0], [442.0, 3778.0], [441.0, 3781.0], [440.0, 3798.0], [439.0, 3797.0], [432.0, 3786.0], [435.0, 3787.0], [433.0, 3791.0], [438.0, 3782.0], [437.0, 3780.0], [436.0, 3797.0], [462.0, 4500.0], [463.0, 4499.0], [461.0, 4501.0], [460.0, 4503.0], [459.0, 4480.0], [458.0, 4481.0], [457.0, 3825.0], [456.0, 3824.0], [455.0, 3830.0], [449.0, 3767.0], [448.0, 3833.0], [451.0, 3830.0], [450.0, 3833.0], [454.0, 3830.0], [453.0, 3829.0], [452.0, 3832.0], [478.0, 3977.0], [479.0, 3977.0], [477.0, 4543.0], [476.0, 4475.0], [475.0, 4475.0], [474.0, 3963.0], [473.0, 4483.0], [472.0, 4478.0], [471.0, 4349.0], [467.0, 4498.0], [465.0, 3907.0], [469.0, 3913.0], [494.0, 4142.0], [495.0, 4466.0], [493.0, 4169.0], [492.0, 3920.0], [491.0, 4147.0], [490.0, 4473.0], [489.0, 3963.0], [488.0, 4465.0], [487.0, 3966.0], [481.0, 3947.0], [480.0, 3948.0], [483.0, 4470.0], [482.0, 4474.0], [486.0, 4528.0], [485.0, 4529.0], [484.0, 4528.0], [510.0, 4441.0], [511.0, 4440.0], [509.0, 4301.0], [499.0, 4496.0], [498.0, 4498.0], [497.0, 4499.0], [496.0, 4462.0], [507.0, 4158.0], [506.0, 4496.0], [505.0, 4484.0], [504.0, 4485.0], [503.0, 4447.0], [502.0, 4448.0], [501.0, 4449.0], [500.0, 4125.0], [540.0, 4406.0], [543.0, 4125.0], [529.0, 4142.0], [528.0, 4119.0], [531.0, 4423.0], [530.0, 4487.0], [533.0, 4479.0], [532.0, 4082.0], [542.0, 4405.0], [541.0, 4127.0], [539.0, 4407.0], [538.0, 4069.0], [537.0, 4474.0], [536.0, 4476.0], [527.0, 4464.0], [513.0, 4150.0], [512.0, 4483.0], [515.0, 4475.0], [514.0, 4146.0], [517.0, 4427.0], [516.0, 4474.0], [519.0, 4102.0], [518.0, 4138.0], [526.0, 4429.0], [525.0, 4412.0], [524.0, 4413.0], [523.0, 4127.0], [522.0, 4461.0], [521.0, 4102.0], [520.0, 4103.0], [535.0, 4075.0], [534.0, 4075.0], [572.0, 4069.0], [575.0, 4574.0], [561.0, 4087.0], [560.0, 4390.0], [563.0, 4455.0], [562.0, 4087.0], [565.0, 4454.0], [564.0, 4454.0], [574.0, 4433.0], [573.0, 4438.0], [571.0, 4440.0], [570.0, 4374.0], [569.0, 4374.0], [568.0, 4074.0], [559.0, 4431.0], [545.0, 4461.0], [544.0, 4063.0], [547.0, 4118.0], [546.0, 4058.0], [549.0, 4454.0], [548.0, 4459.0], [551.0, 4387.0], [550.0, 4388.0], [558.0, 4095.0], [557.0, 4398.0], [556.0, 4437.0], [555.0, 4612.0], [554.0, 4613.0], [553.0, 4404.0], [552.0, 4044.0], [567.0, 4075.0], [566.0, 4380.0], [604.0, 4344.0], [607.0, 4340.0], [593.0, 4387.0], [592.0, 4388.0], [595.0, 4534.0], [594.0, 4537.0], [597.0, 4336.0], [596.0, 4326.0], [606.0, 4609.0], [605.0, 4610.0], [603.0, 4324.0], [602.0, 4390.0], [601.0, 4542.0], [600.0, 4618.0], [591.0, 4390.0], [577.0, 4568.0], [576.0, 4357.0], [579.0, 4354.0], [578.0, 4355.0], [581.0, 4415.0], [580.0, 4419.0], [583.0, 4550.0], [582.0, 4412.0], [590.0, 4394.0], [589.0, 4345.0], [588.0, 4553.0], [587.0, 4343.0], [586.0, 4334.0], [585.0, 4346.0], [584.0, 4549.0], [599.0, 4394.0], [598.0, 4548.0], [636.0, 4570.0], [639.0, 4496.0], [625.0, 4361.0], [624.0, 4569.0], [627.0, 4518.0], [626.0, 4293.0], [629.0, 4514.0], [628.0, 4515.0], [638.0, 4333.0], [637.0, 4334.0], [635.0, 4552.0], [634.0, 4549.0], [633.0, 4281.0], [632.0, 4345.0], [623.0, 4569.0], [609.0, 4527.0], [608.0, 4527.0], [611.0, 4371.0], [610.0, 4526.0], [613.0, 4593.0], [612.0, 4368.0], [615.0, 4323.0], [614.0, 4593.0], [622.0, 4570.0], [621.0, 4529.0], [620.0, 4368.0], [619.0, 4349.0], [618.0, 4311.0], [617.0, 4314.0], [616.0, 4548.0], [631.0, 4283.0], [630.0, 4349.0], [668.0, 4534.0], [671.0, 4293.0], [657.0, 4476.0], [656.0, 4526.0], [659.0, 4312.0], [658.0, 4314.0], [661.0, 4514.0], [660.0, 4516.0], [670.0, 4294.0], [669.0, 4456.0], [667.0, 4503.0], [666.0, 4460.0], [665.0, 4302.0], [664.0, 4306.0], [655.0, 4253.0], [641.0, 4288.0], [640.0, 4268.0], [643.0, 4491.0], [642.0, 4286.0], [645.0, 4318.0], [644.0, 4486.0], [647.0, 4548.0], [646.0, 4550.0], [654.0, 4531.0], [653.0, 4258.0], [652.0, 4489.0], [651.0, 4493.0], [650.0, 4264.0], [649.0, 4337.0], [648.0, 4340.0], [663.0, 4467.0], [662.0, 4468.0], [700.0, 4502.0], [703.0, 4499.0], [689.0, 4489.0], [688.0, 4491.0], [691.0, 4438.0], [690.0, 4438.0], [693.0, 4271.0], [692.0, 4273.0], [702.0, 4442.0], [701.0, 4422.0], [699.0, 4503.0], [698.0, 4426.0], [697.0, 4425.0], [696.0, 4263.0], [687.0, 4280.0], [673.0, 4524.0], [672.0, 4453.0], [675.0, 4521.0], [674.0, 4522.0], [677.0, 4466.0], [676.0, 4305.0], [679.0, 4461.0], [678.0, 4299.0], [686.0, 4495.0], [685.0, 4448.0], [684.0, 4449.0], [683.0, 4287.0], [682.0, 4288.0], [681.0, 4503.0], [680.0, 4458.0], [695.0, 4510.0], [694.0, 4479.0], [732.0, 4980.0], [733.0, 3784.0], [735.0, 5038.0], [721.0, 4525.0], [720.0, 4535.0], [723.0, 4520.0], [722.0, 4417.0], [725.0, 4410.0], [724.0, 4544.0], [734.0, 5014.0], [731.0, 5031.0], [730.0, 4983.0], [729.0, 4415.0], [728.0, 4537.0], [719.0, 4535.0], [704.0, 4498.0], [706.0, 4433.0], [705.0, 4435.0], [708.0, 4430.0], [707.0, 4488.0], [711.0, 4456.5], [709.0, 4482.0], [718.0, 4537.0], [717.0, 4440.0], [716.0, 4542.0], [715.0, 4442.0], [714.0, 4443.0], [713.0, 4448.0], [712.0, 4481.0], [727.0, 4538.0], [726.0, 4538.0], [764.0, 5480.0], [767.0, 5470.0], [753.0, 5526.0], [752.0, 5514.0], [755.0, 5510.0], [754.0, 5512.0], [757.0, 5486.0], [756.0, 5504.0], [766.0, 5469.0], [765.0, 5474.0], [763.0, 5481.0], [762.0, 5483.0], [761.0, 5505.0], [760.0, 5482.0], [751.0, 5516.0], [737.0, 5035.0], [739.0, 5029.0], [738.0, 5015.0], [741.0, 5012.0], [740.0, 5537.0], [743.0, 5533.0], [742.0, 5020.0], [750.0, 5524.0], [749.0, 5522.0], [748.0, 5522.0], [747.0, 5525.0], [746.0, 5524.0], [745.0, 5526.0], [744.0, 5532.0], [759.0, 5482.0], [758.0, 5482.0], [796.0, 4142.0], [799.0, 5529.0], [785.0, 5416.0], [784.0, 5540.0], [787.0, 5431.0], [786.0, 5414.0], [789.0, 5509.0], [788.0, 5427.0], [798.0, 5402.0], [797.0, 5506.0], [795.0, 5505.0], [794.0, 5503.0], [793.0, 5407.0], [792.0, 5416.0], [783.0, 5421.0], [769.0, 5454.0], [768.0, 5467.0], [771.0, 5483.0], [770.0, 5458.0], [773.0, 5455.0], [772.0, 5472.0], [775.0, 5467.0], [774.0, 5454.0], [782.0, 5549.0], [781.0, 5543.0], [780.0, 5453.0], [779.0, 5456.0], [778.0, 5435.0], [777.0, 5439.0], [776.0, 5462.0], [791.0, 5417.0], [790.0, 5517.0], [828.0, 5434.0], [807.0, 4160.0], [806.0, 5383.0], [805.0, 5508.0], [804.0, 5510.0], [803.0, 5525.0], [802.0, 5478.0], [801.0, 5480.0], [800.0, 5399.0], [815.0, 5404.0], [814.0, 5406.0], [813.0, 5443.0], [812.0, 5430.0], [811.0, 5368.0], [810.0, 5407.0], [809.0, 5458.0], [808.0, 5596.0], [831.0, 5425.0], [817.0, 5422.0], [816.0, 5424.0], [819.0, 5427.0], [818.0, 5349.0], [821.0, 5426.0], [820.0, 5427.0], [823.0, 5382.0], [822.0, 5407.0], [830.0, 5402.0], [829.0, 5384.0], [827.0, 5434.0], [826.0, 5415.0], [825.0, 5412.0], [824.0, 5394.0], [860.0, 5340.0], [863.0, 5257.0], [849.0, 5409.0], [848.0, 5326.0], [851.0, 5272.0], [850.0, 5361.0], [853.0, 5401.0], [852.0, 5362.0], [862.0, 5364.0], [861.0, 5337.0], [859.0, 5589.0], [858.0, 5377.0], [857.0, 5264.0], [856.0, 5261.0], [847.0, 5413.0], [833.0, 5377.0], [832.0, 5402.0], [835.0, 5392.0], [834.0, 5456.0], [837.0, 5365.0], [836.0, 5407.0], [839.0, 5442.0], [838.0, 5397.0], [846.0, 5382.0], [845.0, 5373.0], [844.0, 5368.0], [843.0, 5429.0], [842.0, 5368.0], [841.0, 5407.0], [840.0, 5354.0], [855.0, 5349.0], [854.0, 5356.0], [892.0, 5316.0], [895.0, 5584.0], [881.0, 5518.0], [880.0, 5194.0], [883.0, 5298.0], [882.0, 5203.0], [885.0, 5202.0], [884.0, 5509.0], [894.0, 5475.0], [893.0, 5164.0], [891.0, 5485.0], [890.0, 5324.0], [889.0, 5326.0], [888.0, 5182.0], [879.0, 5187.0], [865.0, 5354.0], [864.0, 5260.0], [867.0, 5315.0], [866.0, 5589.0], [869.0, 5605.0], [868.0, 5229.0], [871.0, 5236.0], [870.0, 5223.0], [878.0, 5315.0], [877.0, 5219.0], [876.0, 5534.0], [875.0, 5329.0], [874.0, 5331.0], [873.0, 5230.0], [872.0, 5550.0], [887.0, 5173.0], [886.0, 5238.0], [924.0, 5892.0], [927.0, 5881.0], [913.0, 5847.0], [912.0, 5845.0], [915.0, 5846.0], [914.0, 5841.0], [917.0, 5910.0], [916.0, 5855.0], [926.0, 5886.0], [925.0, 5890.0], [923.0, 5812.0], [922.0, 5892.0], [921.0, 5903.0], [920.0, 5904.0], [911.0, 5532.0], [897.0, 5297.0], [896.0, 5531.0], [899.0, 5480.0], [898.0, 5294.0], [901.0, 5292.0], [900.0, 5294.0], [903.0, 5465.0], [902.0, 5484.0], [910.0, 5520.0], [909.0, 5499.0], [908.0, 5744.0], [907.0, 5701.0], [906.0, 5724.0], [905.0, 5457.0], [904.0, 5743.0], [919.0, 5904.0], [918.0, 5909.0], [954.0, 5761.0], [958.0, 5790.0], [959.0, 5792.0], [944.0, 5842.0], [946.0, 5726.0], [945.0, 5735.0], [948.0, 5819.0], [947.0, 5719.0], [957.0, 5753.0], [956.0, 5753.0], [955.0, 5797.0], [953.0, 5781.666666666667], [935.0, 5869.0], [934.0, 5873.0], [933.0, 5766.0], [932.0, 5770.0], [931.0, 5771.0], [930.0, 5769.0], [929.0, 5767.0], [928.0, 5880.0], [943.0, 5846.0], [942.0, 5841.0], [941.0, 5843.0], [940.0, 5751.0], [939.0, 5751.0], [938.0, 5856.0], [937.0, 5860.0], [936.0, 5863.0], [951.0, 5811.0], [949.0, 5812.0], [984.0, 5680.0], [990.0, 5648.0], [991.0, 5647.0], [977.0, 5691.0], [976.0, 5707.0], [979.0, 5701.0], [978.0, 5716.0], [988.0, 5667.0], [986.0, 5651.0], [985.0, 5653.0], [975.0, 5685.0], [961.0, 5743.0], [960.0, 5787.0], [963.0, 5730.0], [962.0, 5773.0], [965.0, 5744.0], [964.0, 5731.0], [967.0, 5766.0], [966.0, 5720.0], [974.0, 5702.0], [973.0, 5714.0], [972.0, 5720.0], [971.0, 5732.0], [970.0, 5692.0], [969.0, 5754.0], [968.0, 5763.0], [983.0, 5670.0], [982.0, 5685.0], [981.0, 5688.0], [980.0, 5701.0], [997.0, 5491.0], [996.0, 5552.0], [995.0, 5569.0], [994.0, 5582.0], [993.0, 5585.0], [1.0, 2340.0]], "isOverall": false, "label": "Actuator-health", "isController": false}, {"data": [[499.8770000000013, 4109.224000000001]], "isOverall": false, "label": "Actuator-health-Aggregated", "isController": false}, {"data": [[218.0, 776.8], [219.0, 785.5714285714286], [220.0, 729.0], [221.0, 759.8], [222.0, 703.0], [223.0, 712.0], [224.0, 665.75], [226.0, 785.5454545454546], [227.0, 845.0], [229.0, 826.4], [230.0, 860.75], [231.0, 865.75], [232.0, 850.5], [233.0, 851.3333333333334], [237.0, 911.3333333333334], [235.0, 898.0], [239.0, 921.6666666666666], [238.0, 831.5], [242.0, 930.0], [241.0, 919.75], [240.0, 929.0], [249.0, 820.5], [265.0, 864.0], [267.0, 845.0], [271.0, 870.0], [285.0, 940.0], [286.0, 1000.0], [288.0, 1035.0], [290.0, 1002.0], [292.0, 874.3333333333333], [293.0, 829.0], [294.0, 1019.0], [296.0, 1028.0], [297.0, 1030.0], [335.0, 1208.25], [337.0, 1239.0], [351.0, 1076.7142857142858], [338.0, 1123.0], [353.0, 1002.5], [391.0, 1204.2857142857142], [387.0, 1245.7777777777778], [388.0, 1117.75], [389.0, 1231.2], [390.0, 1467.0], [392.0, 926.6666666666666], [393.0, 1104.5454545454545], [395.0, 1453.0], [396.0, 1028.4444444444443], [397.0, 1288.0], [398.0, 1221.0], [413.0, 855.5], [400.0, 857.0], [402.0, 1063.6315789473686], [411.0, 1033.6], [412.0, 956.5], [403.0, 1259.0], [414.0, 986.5], [415.0, 915.0], [410.0, 943.8333333333333], [409.0, 1055.7142857142858], [408.0, 920.8666666666667], [416.0, 1016.0], [417.0, 828.0], [418.0, 822.0], [421.0, 823.0], [523.0, 1234.5], [524.0, 1064.0], [525.0, 1280.0], [527.0, 1146.25], [535.0, 1196.0], [629.0, 1523.5], [635.0, 1423.8333333333333], [655.0, 1677.0], [650.0, 1398.0], [651.0, 1357.6], [654.0, 1830.0], [656.0, 1565.3333333333333], [671.0, 1181.25], [667.0, 1416.5], [670.0, 1214.0], [665.0, 1481.0], [666.0, 1441.3333333333333], [658.0, 1354.2222222222222], [660.0, 1563.0], [662.0, 1521.25], [663.0, 1289.3749999999998], [672.0, 1065.6], [674.0, 1434.875], [677.0, 1331.1666666666667], [678.0, 1270.5], [687.0, 1220.8], [691.0, 1151.6666666666667], [694.0, 1092.5], [700.0, 1850.875], [720.0, 2106.6], [706.0, 1689.875], [712.0, 1660.857142857143], [717.0, 1639.0], [721.0, 1604.0], [722.0, 1512.5714285714284], [723.0, 1418.5], [725.0, 1947.0], [729.0, 1339.857142857143], [730.0, 1670.0], [731.0, 1243.0], [732.0, 1581.25], [733.0, 1579.6666666666667], [740.0, 1071.0], [739.0, 1136.8333333333333], [741.0, 1555.2222222222222], [761.0, 1191.5], [763.0, 1190.6666666666667], [745.0, 1629.3333333333335], [748.0, 1506.8333333333333], [752.0, 1447.6666666666667], [755.0, 1399.0], [756.0, 1292.125], [757.0, 1223.0], [796.0, 1569.125], [795.0, 1517.0], [797.0, 1514.0], [802.0, 1437.4285714285713], [807.0, 1384.0], [806.0, 1520.1000000000001], [811.0, 1419.3333333333333], [849.0, 1567.0], [850.0, 1555.0], [851.0, 1520.0], [856.0, 1575.25], [869.0, 1638.0], [872.0, 1648.0], [879.0, 1710.0], [880.0, 1705.0], [883.0, 1689.3333333333333], [885.0, 1722.0], [887.0, 1672.5], [903.0, 1650.6666666666667], [904.0, 1633.0], [906.0, 1679.4285714285713], [907.0, 1680.6666666666667], [908.0, 1636.25], [909.0, 1583.8], [911.0, 1579.5], [912.0, 1585.6666666666667], [988.0, 1953.5], [973.0, 1846.0], [978.0, 1811.0], [979.0, 1744.5], [983.0, 1878.0], [982.0, 1806.3333333333333], [986.0, 1848.7142857142858], [987.0, 1912.0], [989.0, 1698.0], [990.0, 1690.818181818182], [991.0, 1811.9411764705883], [992.0, 1830.0], [993.0, 1850.0], [994.0, 1799.888888888889], [995.0, 1582.5], [997.0, 1727.3746223564951], [996.0, 1813.3333333333333]], "isOverall": false, "label": "Actuator-Info", "isController": false}, {"data": [[737.440000000001, 1459.731999999998]], "isOverall": false, "label": "Actuator-Info-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 997.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 3566.6666666666665, "minX": 1.68062076E12, "maxY": 5666.666666666667, "series": [{"data": [[1.68062076E12, 3566.6666666666665]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.68062076E12, 5666.666666666667]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68062076E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 1459.731999999998, "minX": 1.68062076E12, "maxY": 4109.224000000001, "series": [{"data": [[1.68062076E12, 4109.224000000001]], "isOverall": false, "label": "Actuator-health", "isController": false}, {"data": [[1.68062076E12, 1459.731999999998]], "isOverall": false, "label": "Actuator-Info", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68062076E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 1459.2180000000023, "minX": 1.68062076E12, "maxY": 4109.214000000006, "series": [{"data": [[1.68062076E12, 4109.214000000006]], "isOverall": false, "label": "Actuator-health", "isController": false}, {"data": [[1.68062076E12, 1459.2180000000023]], "isOverall": false, "label": "Actuator-Info", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68062076E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.68062076E12, "maxY": 10.119000000000003, "series": [{"data": [[1.68062076E12, 0.0]], "isOverall": false, "label": "Actuator-health", "isController": false}, {"data": [[1.68062076E12, 10.119000000000003]], "isOverall": false, "label": "Actuator-Info", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68062076E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 636.0, "minX": 1.68062076E12, "maxY": 5910.0, "series": [{"data": [[1.68062076E12, 5910.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.68062076E12, 5398.8]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.68062076E12, 5845.99]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.68062076E12, 5533.95]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.68062076E12, 636.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.68062076E12, 2399.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68062076E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 815.0, "minX": 70.0, "maxY": 5482.0, "series": [{"data": [[132.0, 1667.5], [70.0, 1388.5], [274.0, 1708.5], [170.0, 1033.0], [89.0, 815.0], [415.0, 4476.0], [208.0, 5482.0], [426.0, 3075.0], [216.0, 1499.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 426.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 807.0, "minX": 70.0, "maxY": 5482.0, "series": [{"data": [[132.0, 1667.5], [70.0, 1388.5], [274.0, 1708.5], [170.0, 1033.0], [89.0, 807.0], [415.0, 4476.0], [208.0, 5482.0], [426.0, 3075.0], [216.0, 1499.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 426.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 33.333333333333336, "minX": 1.68062076E12, "maxY": 33.333333333333336, "series": [{"data": [[1.68062076E12, 33.333333333333336]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68062076E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 33.333333333333336, "minX": 1.68062076E12, "maxY": 33.333333333333336, "series": [{"data": [[1.68062076E12, 33.333333333333336]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68062076E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.68062076E12, "maxY": 16.666666666666668, "series": [{"data": [[1.68062076E12, 16.666666666666668]], "isOverall": false, "label": "Actuator-health-success", "isController": false}, {"data": [[1.68062076E12, 16.666666666666668]], "isOverall": false, "label": "Actuator-Info-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68062076E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 33.333333333333336, "minX": 1.68062076E12, "maxY": 33.333333333333336, "series": [{"data": [[1.68062076E12, 33.333333333333336]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68062076E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

