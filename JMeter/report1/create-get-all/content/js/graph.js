/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 402.0, "minX": 0.0, "maxY": 38915.0, "series": [{"data": [[0.0, 402.0], [0.1, 413.0], [0.2, 437.0], [0.3, 437.0], [0.4, 457.0], [0.5, 459.0], [0.6, 464.0], [0.7, 466.0], [0.8, 475.0], [0.9, 486.0], [1.0, 507.0], [1.1, 508.0], [1.2, 638.0], [1.3, 639.0], [1.4, 639.0], [1.5, 640.0], [1.6, 641.0], [1.7, 643.0], [1.8, 645.0], [1.9, 649.0], [2.0, 654.0], [2.1, 655.0], [2.2, 659.0], [2.3, 669.0], [2.4, 675.0], [2.5, 675.0], [2.6, 698.0], [2.7, 714.0], [2.8, 745.0], [2.9, 749.0], [3.0, 749.0], [3.1, 838.0], [3.2, 1002.0], [3.3, 1027.0], [3.4, 1043.0], [3.5, 1245.0], [3.6, 1246.0], [3.7, 1315.0], [3.8, 1339.0], [3.9, 1347.0], [4.0, 1349.0], [4.1, 1353.0], [4.2, 1375.0], [4.3, 1376.0], [4.4, 1381.0], [4.5, 1384.0], [4.6, 1385.0], [4.7, 1405.0], [4.8, 1426.0], [4.9, 1427.0], [5.0, 1443.0], [5.1, 1462.0], [5.2, 1463.0], [5.3, 1464.0], [5.4, 1465.0], [5.5, 1476.0], [5.6, 1477.0], [5.7, 1480.0], [5.8, 1480.0], [5.9, 1489.0], [6.0, 1490.0], [6.1, 1491.0], [6.2, 1491.0], [6.3, 1497.0], [6.4, 1497.0], [6.5, 1498.0], [6.6, 1499.0], [6.7, 1500.0], [6.8, 1502.0], [6.9, 1502.0], [7.0, 1506.0], [7.1, 1512.0], [7.2, 1516.0], [7.3, 1522.0], [7.4, 1526.0], [7.5, 1526.0], [7.6, 1527.0], [7.7, 1527.0], [7.8, 1529.0], [7.9, 1537.0], [8.0, 1542.0], [8.1, 1546.0], [8.2, 1547.0], [8.3, 1549.0], [8.4, 1552.0], [8.5, 1552.0], [8.6, 1554.0], [8.7, 1555.0], [8.8, 1566.0], [8.9, 1568.0], [9.0, 1569.0], [9.1, 1573.0], [9.2, 1575.0], [9.3, 1576.0], [9.4, 1576.0], [9.5, 1591.0], [9.6, 1595.0], [9.7, 1595.0], [9.8, 1601.0], [9.9, 1611.0], [10.0, 1620.0], [10.1, 1621.0], [10.2, 1648.0], [10.3, 1650.0], [10.4, 1650.0], [10.5, 1654.0], [10.6, 1668.0], [10.7, 1684.0], [10.8, 1802.0], [10.9, 1816.0], [11.0, 1821.0], [11.1, 1829.0], [11.2, 1830.0], [11.3, 1832.0], [11.4, 1832.0], [11.5, 1842.0], [11.6, 1844.0], [11.7, 1847.0], [11.8, 1849.0], [11.9, 1855.0], [12.0, 1856.0], [12.1, 1866.0], [12.2, 1866.0], [12.3, 1870.0], [12.4, 1885.0], [12.5, 1918.0], [12.6, 1920.0], [12.7, 2148.0], [12.8, 2191.0], [12.9, 2202.0], [13.0, 2667.0], [13.1, 2993.0], [13.2, 2996.0], [13.3, 3548.0], [13.4, 3554.0], [13.5, 3602.0], [13.6, 3615.0], [13.7, 3615.0], [13.8, 3632.0], [13.9, 3645.0], [14.0, 3651.0], [14.1, 3658.0], [14.2, 3661.0], [14.3, 3669.0], [14.4, 3670.0], [14.5, 3685.0], [14.6, 3690.0], [14.7, 3693.0], [14.8, 3693.0], [14.9, 3703.0], [15.0, 3718.0], [15.1, 3737.0], [15.2, 3753.0], [15.3, 3760.0], [15.4, 3766.0], [15.5, 3774.0], [15.6, 3789.0], [15.7, 3790.0], [15.8, 3817.0], [15.9, 3818.0], [16.0, 3818.0], [16.1, 3826.0], [16.2, 3831.0], [16.3, 3833.0], [16.4, 3840.0], [16.5, 3840.0], [16.6, 3846.0], [16.7, 3850.0], [16.8, 3851.0], [16.9, 3852.0], [17.0, 3854.0], [17.1, 3854.0], [17.2, 3855.0], [17.3, 3856.0], [17.4, 3857.0], [17.5, 3861.0], [17.6, 3861.0], [17.7, 3865.0], [17.8, 3866.0], [17.9, 3868.0], [18.0, 3870.0], [18.1, 3873.0], [18.2, 3873.0], [18.3, 3873.0], [18.4, 3874.0], [18.5, 3879.0], [18.6, 3888.0], [18.7, 3891.0], [18.8, 3891.0], [18.9, 3892.0], [19.0, 3894.0], [19.1, 3901.0], [19.2, 3906.0], [19.3, 3909.0], [19.4, 3913.0], [19.5, 3918.0], [19.6, 3923.0], [19.7, 3923.0], [19.8, 3923.0], [19.9, 3926.0], [20.0, 3926.0], [20.1, 3927.0], [20.2, 3931.0], [20.3, 3943.0], [20.4, 3943.0], [20.5, 3945.0], [20.6, 3946.0], [20.7, 3953.0], [20.8, 3954.0], [20.9, 3957.0], [21.0, 3962.0], [21.1, 3962.0], [21.2, 3964.0], [21.3, 3964.0], [21.4, 3964.0], [21.5, 3967.0], [21.6, 3969.0], [21.7, 3970.0], [21.8, 3976.0], [21.9, 3977.0], [22.0, 3979.0], [22.1, 3979.0], [22.2, 3980.0], [22.3, 3983.0], [22.4, 3992.0], [22.5, 3998.0], [22.6, 4004.0], [22.7, 4004.0], [22.8, 4005.0], [22.9, 4029.0], [23.0, 4034.0], [23.1, 4035.0], [23.2, 4044.0], [23.3, 4112.0], [23.4, 4114.0], [23.5, 4129.0], [23.6, 4129.0], [23.7, 4142.0], [23.8, 4147.0], [23.9, 4148.0], [24.0, 4152.0], [24.1, 4154.0], [24.2, 4159.0], [24.3, 4160.0], [24.4, 4161.0], [24.5, 4163.0], [24.6, 4170.0], [24.7, 4174.0], [24.8, 4178.0], [24.9, 4178.0], [25.0, 4180.0], [25.1, 4180.0], [25.2, 4180.0], [25.3, 4183.0], [25.4, 4185.0], [25.5, 4185.0], [25.6, 4187.0], [25.7, 4189.0], [25.8, 4192.0], [25.9, 4194.0], [26.0, 4196.0], [26.1, 4196.0], [26.2, 4198.0], [26.3, 4199.0], [26.4, 4199.0], [26.5, 4200.0], [26.6, 4200.0], [26.7, 4202.0], [26.8, 4202.0], [26.9, 4203.0], [27.0, 4204.0], [27.1, 4205.0], [27.2, 4206.0], [27.3, 4206.0], [27.4, 4207.0], [27.5, 4208.0], [27.6, 4209.0], [27.7, 4211.0], [27.8, 4211.0], [27.9, 4211.0], [28.0, 4214.0], [28.1, 4222.0], [28.2, 4233.0], [28.3, 4253.0], [28.4, 4260.0], [28.5, 4268.0], [28.6, 4331.0], [28.7, 4340.0], [28.8, 4344.0], [28.9, 4344.0], [29.0, 4347.0], [29.1, 4348.0], [29.2, 4349.0], [29.3, 4351.0], [29.4, 4351.0], [29.5, 4351.0], [29.6, 4352.0], [29.7, 4352.0], [29.8, 4362.0], [29.9, 4364.0], [30.0, 4436.0], [30.1, 4439.0], [30.2, 4442.0], [30.3, 4442.0], [30.4, 4442.0], [30.5, 4481.0], [30.6, 4533.0], [30.7, 4584.0], [30.8, 4585.0], [30.9, 4592.0], [31.0, 4634.0], [31.1, 4773.0], [31.2, 4793.0], [31.3, 4806.0], [31.4, 4885.0], [31.5, 4893.0], [31.6, 4898.0], [31.7, 4978.0], [31.8, 4980.0], [31.9, 4996.0], [32.0, 5006.0], [32.1, 5093.0], [32.2, 5109.0], [32.3, 5211.0], [32.4, 5286.0], [32.5, 5286.0], [32.6, 5292.0], [32.7, 5294.0], [32.8, 5466.0], [32.9, 5469.0], [33.0, 5472.0], [33.1, 5499.0], [33.2, 5553.0], [33.3, 5554.0], [33.4, 5554.0], [33.5, 5558.0], [33.6, 5561.0], [33.7, 5563.0], [33.8, 5563.0], [33.9, 5563.0], [34.0, 5565.0], [34.1, 5567.0], [34.2, 5567.0], [34.3, 5571.0], [34.4, 5583.0], [34.5, 5644.0], [34.6, 5646.0], [34.7, 5651.0], [34.8, 5737.0], [34.9, 5837.0], [35.0, 6006.0], [35.1, 6009.0], [35.2, 6022.0], [35.3, 6083.0], [35.4, 6171.0], [35.5, 6238.0], [35.6, 6242.0], [35.7, 6252.0], [35.8, 6259.0], [35.9, 6396.0], [36.0, 6398.0], [36.1, 6398.0], [36.2, 6400.0], [36.3, 6565.0], [36.4, 6566.0], [36.5, 6647.0], [36.6, 6648.0], [36.7, 6726.0], [36.8, 6814.0], [36.9, 6893.0], [37.0, 6969.0], [37.1, 6972.0], [37.2, 7056.0], [37.3, 7214.0], [37.4, 7215.0], [37.5, 7882.0], [37.6, 7885.0], [37.7, 7893.0], [37.8, 7911.0], [37.9, 7911.0], [38.0, 7958.0], [38.1, 7959.0], [38.2, 7959.0], [38.3, 7966.0], [38.4, 7979.0], [38.5, 7980.0], [38.6, 8012.0], [38.7, 8100.0], [38.8, 8182.0], [38.9, 8183.0], [39.0, 8185.0], [39.1, 8262.0], [39.2, 8320.0], [39.3, 8323.0], [39.4, 8385.0], [39.5, 8528.0], [39.6, 8585.0], [39.7, 8640.0], [39.8, 8699.0], [39.9, 8699.0], [40.0, 8707.0], [40.1, 8718.0], [40.2, 8719.0], [40.3, 8724.0], [40.4, 8736.0], [40.5, 8738.0], [40.6, 8743.0], [40.7, 8908.0], [40.8, 9038.0], [40.9, 9039.0], [41.0, 9060.0], [41.1, 9126.0], [41.2, 9130.0], [41.3, 9130.0], [41.4, 9147.0], [41.5, 9148.0], [41.6, 9265.0], [41.7, 9266.0], [41.8, 9275.0], [41.9, 9598.0], [42.0, 9661.0], [42.1, 9666.0], [42.2, 9668.0], [42.3, 9671.0], [42.4, 9671.0], [42.5, 9675.0], [42.6, 9688.0], [42.7, 9761.0], [42.8, 9762.0], [42.9, 9763.0], [43.0, 9763.0], [43.1, 9763.0], [43.2, 9764.0], [43.3, 9766.0], [43.4, 9768.0], [43.5, 9770.0], [43.6, 9772.0], [43.7, 9773.0], [43.8, 9774.0], [43.9, 9777.0], [44.0, 9777.0], [44.1, 9779.0], [44.2, 9780.0], [44.3, 9784.0], [44.4, 9785.0], [44.5, 9786.0], [44.6, 9788.0], [44.7, 9792.0], [44.8, 9793.0], [44.9, 9796.0], [45.0, 9805.0], [45.1, 9815.0], [45.2, 9818.0], [45.3, 9822.0], [45.4, 9824.0], [45.5, 9825.0], [45.6, 9827.0], [45.7, 9828.0], [45.8, 9833.0], [45.9, 9834.0], [46.0, 9834.0], [46.1, 9835.0], [46.2, 9835.0], [46.3, 9835.0], [46.4, 9836.0], [46.5, 9837.0], [46.6, 9838.0], [46.7, 9838.0], [46.8, 9840.0], [46.9, 9848.0], [47.0, 9850.0], [47.1, 9851.0], [47.2, 9854.0], [47.3, 9855.0], [47.4, 9857.0], [47.5, 9858.0], [47.6, 9859.0], [47.7, 9862.0], [47.8, 9868.0], [47.9, 9880.0], [48.0, 9909.0], [48.1, 9976.0], [48.2, 9981.0], [48.3, 9983.0], [48.4, 10048.0], [48.5, 10056.0], [48.6, 10206.0], [48.7, 10214.0], [48.8, 10435.0], [48.9, 10436.0], [49.0, 10437.0], [49.1, 10511.0], [49.2, 10660.0], [49.3, 10663.0], [49.4, 10879.0], [49.5, 10934.0], [49.6, 10937.0], [49.7, 10940.0], [49.8, 10940.0], [49.9, 10941.0], [50.0, 10945.0], [50.1, 10948.0], [50.2, 10950.0], [50.3, 10954.0], [50.4, 10955.0], [50.5, 10955.0], [50.6, 10957.0], [50.7, 10961.0], [50.8, 10961.0], [50.9, 10962.0], [51.0, 10963.0], [51.1, 10966.0], [51.2, 10967.0], [51.3, 10968.0], [51.4, 10972.0], [51.5, 10973.0], [51.6, 10975.0], [51.7, 10978.0], [51.8, 10979.0], [51.9, 10983.0], [52.0, 10983.0], [52.1, 10984.0], [52.2, 10985.0], [52.3, 10986.0], [52.4, 10987.0], [52.5, 10988.0], [52.6, 10990.0], [52.7, 10990.0], [52.8, 10991.0], [52.9, 10991.0], [53.0, 10991.0], [53.1, 10992.0], [53.2, 10996.0], [53.3, 10999.0], [53.4, 11002.0], [53.5, 11002.0], [53.6, 11006.0], [53.7, 11010.0], [53.8, 11012.0], [53.9, 11012.0], [54.0, 11012.0], [54.1, 11013.0], [54.2, 11016.0], [54.3, 11017.0], [54.4, 11017.0], [54.5, 11018.0], [54.6, 11019.0], [54.7, 11021.0], [54.8, 11021.0], [54.9, 11023.0], [55.0, 11024.0], [55.1, 11024.0], [55.2, 11024.0], [55.3, 11026.0], [55.4, 11026.0], [55.5, 11027.0], [55.6, 11031.0], [55.7, 11033.0], [55.8, 11033.0], [55.9, 11035.0], [56.0, 11036.0], [56.1, 11036.0], [56.2, 11037.0], [56.3, 11037.0], [56.4, 11038.0], [56.5, 11038.0], [56.6, 11040.0], [56.7, 11040.0], [56.8, 11041.0], [56.9, 11045.0], [57.0, 11045.0], [57.1, 11047.0], [57.2, 11047.0], [57.3, 11047.0], [57.4, 11047.0], [57.5, 11048.0], [57.6, 11049.0], [57.7, 11049.0], [57.8, 11050.0], [57.9, 11050.0], [58.0, 11050.0], [58.1, 11051.0], [58.2, 11052.0], [58.3, 11052.0], [58.4, 11052.0], [58.5, 11052.0], [58.6, 11053.0], [58.7, 11054.0], [58.8, 11054.0], [58.9, 11055.0], [59.0, 11055.0], [59.1, 11055.0], [59.2, 11060.0], [59.3, 11060.0], [59.4, 11061.0], [59.5, 11062.0], [59.6, 11063.0], [59.7, 11064.0], [59.8, 11066.0], [59.9, 11067.0], [60.0, 11067.0], [60.1, 11069.0], [60.2, 11071.0], [60.3, 11072.0], [60.4, 11073.0], [60.5, 11073.0], [60.6, 11073.0], [60.7, 11074.0], [60.8, 11074.0], [60.9, 11075.0], [61.0, 11075.0], [61.1, 11076.0], [61.2, 11076.0], [61.3, 11077.0], [61.4, 11077.0], [61.5, 11077.0], [61.6, 11079.0], [61.7, 11079.0], [61.8, 11081.0], [61.9, 11082.0], [62.0, 11082.0], [62.1, 11082.0], [62.2, 11082.0], [62.3, 11084.0], [62.4, 11085.0], [62.5, 11086.0], [62.6, 11086.0], [62.7, 11086.0], [62.8, 11087.0], [62.9, 11092.0], [63.0, 11092.0], [63.1, 11092.0], [63.2, 11092.0], [63.3, 11093.0], [63.4, 11094.0], [63.5, 11095.0], [63.6, 11095.0], [63.7, 11096.0], [63.8, 11098.0], [63.9, 11099.0], [64.0, 11100.0], [64.1, 11100.0], [64.2, 11100.0], [64.3, 11101.0], [64.4, 11101.0], [64.5, 11101.0], [64.6, 11102.0], [64.7, 11103.0], [64.8, 11103.0], [64.9, 11103.0], [65.0, 11104.0], [65.1, 11104.0], [65.2, 11105.0], [65.3, 11106.0], [65.4, 11106.0], [65.5, 11107.0], [65.6, 11107.0], [65.7, 11107.0], [65.8, 11108.0], [65.9, 11108.0], [66.0, 11109.0], [66.1, 11109.0], [66.2, 11109.0], [66.3, 11110.0], [66.4, 11111.0], [66.5, 11111.0], [66.6, 11112.0], [66.7, 11112.0], [66.8, 11113.0], [66.9, 11114.0], [67.0, 11114.0], [67.1, 11114.0], [67.2, 11114.0], [67.3, 11115.0], [67.4, 11115.0], [67.5, 11115.0], [67.6, 11115.0], [67.7, 11117.0], [67.8, 11118.0], [67.9, 11118.0], [68.0, 11118.0], [68.1, 11118.0], [68.2, 11120.0], [68.3, 11121.0], [68.4, 11122.0], [68.5, 11124.0], [68.6, 11124.0], [68.7, 11124.0], [68.8, 11125.0], [68.9, 11125.0], [69.0, 11125.0], [69.1, 11126.0], [69.2, 11128.0], [69.3, 11128.0], [69.4, 11129.0], [69.5, 11129.0], [69.6, 11130.0], [69.7, 11131.0], [69.8, 11131.0], [69.9, 11132.0], [70.0, 11134.0], [70.1, 11135.0], [70.2, 11136.0], [70.3, 11136.0], [70.4, 11136.0], [70.5, 11136.0], [70.6, 11137.0], [70.7, 11137.0], [70.8, 11137.0], [70.9, 11138.0], [71.0, 11138.0], [71.1, 11139.0], [71.2, 11139.0], [71.3, 11140.0], [71.4, 11141.0], [71.5, 11142.0], [71.6, 11142.0], [71.7, 11143.0], [71.8, 11143.0], [71.9, 11143.0], [72.0, 11143.0], [72.1, 11144.0], [72.2, 11144.0], [72.3, 11144.0], [72.4, 11144.0], [72.5, 11144.0], [72.6, 11144.0], [72.7, 11144.0], [72.8, 11144.0], [72.9, 11145.0], [73.0, 11145.0], [73.1, 11146.0], [73.2, 11146.0], [73.3, 11146.0], [73.4, 11147.0], [73.5, 11147.0], [73.6, 11147.0], [73.7, 11147.0], [73.8, 11147.0], [73.9, 11147.0], [74.0, 11148.0], [74.1, 11148.0], [74.2, 11148.0], [74.3, 11148.0], [74.4, 11149.0], [74.5, 11149.0], [74.6, 11150.0], [74.7, 11150.0], [74.8, 11150.0], [74.9, 11150.0], [75.0, 11151.0], [75.1, 11151.0], [75.2, 11152.0], [75.3, 11152.0], [75.4, 11152.0], [75.5, 11152.0], [75.6, 11153.0], [75.7, 11153.0], [75.8, 11153.0], [75.9, 11154.0], [76.0, 11155.0], [76.1, 11156.0], [76.2, 11156.0], [76.3, 11157.0], [76.4, 11157.0], [76.5, 11157.0], [76.6, 11160.0], [76.7, 11161.0], [76.8, 11161.0], [76.9, 11162.0], [77.0, 11163.0], [77.1, 11163.0], [77.2, 11163.0], [77.3, 11164.0], [77.4, 11164.0], [77.5, 11165.0], [77.6, 11165.0], [77.7, 11166.0], [77.8, 11166.0], [77.9, 11166.0], [78.0, 11167.0], [78.1, 11168.0], [78.2, 11168.0], [78.3, 11169.0], [78.4, 11170.0], [78.5, 11170.0], [78.6, 11171.0], [78.7, 11171.0], [78.8, 11173.0], [78.9, 11175.0], [79.0, 11176.0], [79.1, 11176.0], [79.2, 11176.0], [79.3, 11176.0], [79.4, 11177.0], [79.5, 11178.0], [79.6, 11178.0], [79.7, 11178.0], [79.8, 11178.0], [79.9, 11179.0], [80.0, 11179.0], [80.1, 11181.0], [80.2, 11184.0], [80.3, 11185.0], [80.4, 11185.0], [80.5, 11186.0], [80.6, 11186.0], [80.7, 11186.0], [80.8, 11188.0], [80.9, 11188.0], [81.0, 11189.0], [81.1, 11190.0], [81.2, 11194.0], [81.3, 11199.0], [81.4, 11199.0], [81.5, 11202.0], [81.6, 11202.0], [81.7, 11205.0], [81.8, 11206.0], [81.9, 11207.0], [82.0, 11208.0], [82.1, 11208.0], [82.2, 11212.0], [82.3, 11214.0], [82.4, 11215.0], [82.5, 11215.0], [82.6, 11216.0], [82.7, 11217.0], [82.8, 11218.0], [82.9, 11225.0], [83.0, 11232.0], [83.1, 11234.0], [83.2, 11246.0], [83.3, 11246.0], [83.4, 11246.0], [83.5, 11250.0], [83.6, 11250.0], [83.7, 11253.0], [83.8, 11254.0], [83.9, 11257.0], [84.0, 11259.0], [84.1, 11262.0], [84.2, 11264.0], [84.3, 11269.0], [84.4, 11269.0], [84.5, 11272.0], [84.6, 11273.0], [84.7, 11276.0], [84.8, 11276.0], [84.9, 11277.0], [85.0, 11279.0], [85.1, 11280.0], [85.2, 11286.0], [85.3, 11286.0], [85.4, 11287.0], [85.5, 11287.0], [85.6, 11288.0], [85.7, 11288.0], [85.8, 11294.0], [85.9, 11295.0], [86.0, 11303.0], [86.1, 11307.0], [86.2, 11317.0], [86.3, 11323.0], [86.4, 11326.0], [86.5, 11326.0], [86.6, 11367.0], [86.7, 11367.0], [86.8, 11489.0], [86.9, 11492.0], [87.0, 11834.0], [87.1, 11925.0], [87.2, 11942.0], [87.3, 11946.0], [87.4, 11947.0], [87.5, 12151.0], [87.6, 12157.0], [87.7, 12160.0], [87.8, 12188.0], [87.9, 12193.0], [88.0, 12288.0], [88.1, 12645.0], [88.2, 12648.0], [88.3, 12649.0], [88.4, 12649.0], [88.5, 12651.0], [88.6, 12658.0], [88.7, 12660.0], [88.8, 12660.0], [88.9, 12662.0], [89.0, 12662.0], [89.1, 12663.0], [89.2, 12665.0], [89.3, 12666.0], [89.4, 12670.0], [89.5, 12672.0], [89.6, 12672.0], [89.7, 12672.0], [89.8, 12672.0], [89.9, 12677.0], [90.0, 12683.0], [90.1, 12890.0], [90.2, 12890.0], [90.3, 12894.0], [90.4, 12998.0], [90.5, 13251.0], [90.6, 13371.0], [90.7, 13491.0], [90.8, 13605.0], [90.9, 13760.0], [91.0, 13767.0], [91.1, 13769.0], [91.2, 13771.0], [91.3, 13773.0], [91.4, 13774.0], [91.5, 13776.0], [91.6, 13781.0], [91.7, 13787.0], [91.8, 13787.0], [91.9, 13789.0], [92.0, 13791.0], [92.1, 13792.0], [92.2, 13795.0], [92.3, 13800.0], [92.4, 13806.0], [92.5, 13809.0], [92.6, 13812.0], [92.7, 13813.0], [92.8, 13817.0], [92.9, 13869.0], [93.0, 13869.0], [93.1, 13870.0], [93.2, 14062.0], [93.3, 14071.0], [93.4, 14072.0], [93.5, 14073.0], [93.6, 14074.0], [93.7, 14259.0], [93.8, 14359.0], [93.9, 14459.0], [94.0, 14557.0], [94.1, 14887.0], [94.2, 14889.0], [94.3, 14999.0], [94.4, 15014.0], [94.5, 15091.0], [94.6, 15096.0], [94.7, 15297.0], [94.8, 15299.0], [94.9, 15399.0], [95.0, 15490.0], [95.1, 15588.0], [95.2, 15686.0], [95.3, 15719.0], [95.4, 15722.0], [95.5, 15810.0], [95.6, 15898.0], [95.7, 16021.0], [95.8, 16189.0], [95.9, 16266.0], [96.0, 16270.0], [96.1, 16278.0], [96.2, 16425.0], [96.3, 16494.0], [96.4, 16499.0], [96.5, 16615.0], [96.6, 16618.0], [96.7, 16618.0], [96.8, 16628.0], [96.9, 16635.0], [97.0, 16636.0], [97.1, 16646.0], [97.2, 16646.0], [97.3, 16757.0], [97.4, 16781.0], [97.5, 16796.0], [97.6, 17556.0], [97.7, 17560.0], [97.8, 17563.0], [97.9, 17572.0], [98.0, 17572.0], [98.1, 17579.0], [98.2, 17594.0], [98.3, 17595.0], [98.4, 17599.0], [98.5, 17607.0], [98.6, 17610.0], [98.7, 17610.0], [98.8, 17616.0], [98.9, 17617.0], [99.0, 17617.0], [99.1, 17626.0], [99.2, 17635.0], [99.3, 17691.0], [99.4, 17702.0], [99.5, 17797.0], [99.6, 17816.0], [99.7, 17832.0], [99.8, 17853.0], [99.9, 17869.0]], "isOverall": false, "label": "Create", "isController": false}, {"data": [[0.0, 478.0], [0.1, 536.0], [0.2, 576.0], [0.3, 576.0], [0.4, 719.0], [0.5, 781.0], [0.6, 820.0], [0.7, 886.0], [0.8, 954.0], [0.9, 1114.0], [1.0, 1630.0], [1.1, 1745.0], [1.2, 1870.0], [1.3, 1981.0], [1.4, 1981.0], [1.5, 2150.0], [1.6, 2264.0], [1.7, 2527.0], [1.8, 2644.0], [1.9, 2712.0], [2.0, 2801.0], [2.1, 2817.0], [2.2, 2876.0], [2.3, 2985.0], [2.4, 3155.0], [2.5, 3178.0], [2.6, 3292.0], [2.7, 3367.0], [2.8, 3530.0], [2.9, 3606.0], [3.0, 3768.0], [3.1, 3942.0], [3.2, 4036.0], [3.3, 4109.0], [3.4, 4212.0], [3.5, 4256.0], [3.6, 4359.0], [3.7, 4442.0], [3.8, 4476.0], [3.9, 4575.0], [4.0, 4677.0], [4.1, 4767.0], [4.2, 4884.0], [4.3, 4985.0], [4.4, 5202.0], [4.5, 5282.0], [4.6, 5388.0], [4.7, 5463.0], [4.8, 5567.0], [4.9, 5642.0], [5.0, 5739.0], [5.1, 5836.0], [5.2, 5921.0], [5.3, 6005.0], [5.4, 6084.0], [5.5, 6162.0], [5.6, 6250.0], [5.7, 6317.0], [5.8, 6395.0], [5.9, 6477.0], [6.0, 6567.0], [6.1, 6644.0], [6.2, 6726.0], [6.3, 6822.0], [6.4, 6899.0], [6.5, 6973.0], [6.6, 7051.0], [6.7, 7131.0], [6.8, 7219.0], [6.9, 7285.0], [7.0, 7354.0], [7.1, 7433.0], [7.2, 7517.0], [7.3, 7592.0], [7.4, 7668.0], [7.5, 7737.0], [7.6, 7805.0], [7.7, 7867.0], [7.8, 7956.0], [7.9, 8031.0], [8.0, 8101.0], [8.1, 8177.0], [8.2, 8251.0], [8.3, 8320.0], [8.4, 8378.0], [8.5, 8458.0], [8.6, 8518.0], [8.7, 8582.0], [8.8, 8658.0], [8.9, 8674.0], [9.0, 8763.0], [9.1, 8832.0], [9.2, 8894.0], [9.3, 8996.0], [9.4, 9052.0], [9.5, 9061.0], [9.6, 9117.0], [9.7, 9193.0], [9.8, 9261.0], [9.9, 9324.0], [10.0, 9411.0], [10.1, 9459.0], [10.2, 9517.0], [10.3, 9615.0], [10.4, 9651.0], [10.5, 9735.0], [10.6, 9802.0], [10.7, 9839.0], [10.8, 9866.0], [10.9, 9905.0], [11.0, 9982.0], [11.1, 10054.0], [11.2, 10138.0], [11.3, 10213.0], [11.4, 10281.0], [11.5, 10358.0], [11.6, 10429.0], [11.7, 10512.0], [11.8, 10579.0], [11.9, 10659.0], [12.0, 10737.0], [12.1, 10811.0], [12.2, 10877.0], [12.3, 10952.0], [12.4, 11036.0], [12.5, 11038.0], [12.6, 11099.0], [12.7, 11105.0], [12.8, 11143.0], [12.9, 11154.0], [13.0, 11169.0], [13.1, 11182.0], [13.2, 11196.0], [13.3, 11231.0], [13.4, 11318.0], [13.5, 11365.0], [13.6, 11488.0], [13.7, 11510.0], [13.8, 11593.0], [13.9, 11709.0], [14.0, 11948.0], [14.1, 12056.0], [14.2, 12143.0], [14.3, 12169.0], [14.4, 12295.0], [14.5, 12388.0], [14.6, 12670.0], [14.7, 12708.0], [14.8, 12776.0], [14.9, 12894.0], [15.0, 13011.0], [15.1, 13136.0], [15.2, 13248.0], [15.3, 13371.0], [15.4, 13488.0], [15.5, 13603.0], [15.6, 13697.0], [15.7, 13809.0], [15.8, 13863.0], [15.9, 13968.0], [16.0, 14076.0], [16.1, 14135.0], [16.2, 14264.0], [16.3, 14358.0], [16.4, 14458.0], [16.5, 14557.0], [16.6, 14660.0], [16.7, 14774.0], [16.8, 14890.0], [16.9, 14995.0], [17.0, 15095.0], [17.1, 15195.0], [17.2, 15294.0], [17.3, 15399.0], [17.4, 15492.0], [17.5, 15585.0], [17.6, 15684.0], [17.7, 15809.0], [17.8, 15900.0], [17.9, 16001.0], [18.0, 16050.0], [18.1, 16109.0], [18.2, 16209.0], [18.3, 16267.0], [18.4, 16369.0], [18.5, 16425.0], [18.6, 16499.0], [18.7, 16576.0], [18.8, 16643.0], [18.9, 16723.0], [19.0, 16802.0], [19.1, 16808.0], [19.2, 16808.0], [19.3, 16933.0], [19.4, 17014.0], [19.5, 17081.0], [19.6, 17164.0], [19.7, 17231.0], [19.8, 17328.0], [19.9, 17337.0], [20.0, 17387.0], [20.1, 17418.0], [20.2, 17420.0], [20.3, 17457.0], [20.4, 17518.0], [20.5, 17598.0], [20.6, 17675.0], [20.7, 17733.0], [20.8, 17827.0], [20.9, 17894.0], [21.0, 17996.0], [21.1, 18060.0], [21.2, 18068.0], [21.3, 18156.0], [21.4, 18223.0], [21.5, 18258.0], [21.6, 18331.0], [21.7, 18393.0], [21.8, 18459.0], [21.9, 18535.0], [22.0, 18617.0], [22.1, 18687.0], [22.2, 18811.0], [22.3, 18851.0], [22.4, 18903.0], [22.5, 18969.0], [22.6, 19008.0], [22.7, 19041.0], [22.8, 19076.0], [22.9, 19113.0], [23.0, 19125.0], [23.1, 19160.0], [23.2, 19161.0], [23.3, 19174.0], [23.4, 19185.0], [23.5, 19188.0], [23.6, 19228.0], [23.7, 19241.0], [23.8, 19307.0], [23.9, 19359.0], [24.0, 19402.0], [24.1, 19407.0], [24.2, 19485.0], [24.3, 19554.0], [24.4, 19603.0], [24.5, 19652.0], [24.6, 19708.0], [24.7, 19750.0], [24.8, 19789.0], [24.9, 19835.0], [25.0, 19880.0], [25.1, 19923.0], [25.2, 19973.0], [25.3, 20021.0], [25.4, 20065.0], [25.5, 20106.0], [25.6, 20142.0], [25.7, 20182.0], [25.8, 20227.0], [25.9, 20270.0], [26.0, 20330.0], [26.1, 20337.0], [26.2, 20367.0], [26.3, 20416.0], [26.4, 20460.0], [26.5, 20505.0], [26.6, 20557.0], [26.7, 20590.0], [26.8, 20639.0], [26.9, 20692.0], [27.0, 20729.0], [27.1, 20767.0], [27.2, 20811.0], [27.3, 20856.0], [27.4, 20893.0], [27.5, 20929.0], [27.6, 20980.0], [27.7, 21038.0], [27.8, 21081.0], [27.9, 21121.0], [28.0, 21163.0], [28.1, 21182.0], [28.2, 21200.0], [28.3, 21225.0], [28.4, 21226.0], [28.5, 21242.0], [28.6, 21268.0], [28.7, 21278.0], [28.8, 21311.0], [28.9, 21358.0], [29.0, 21432.0], [29.1, 21482.0], [29.2, 21535.0], [29.3, 21543.0], [29.4, 21577.0], [29.5, 21608.0], [29.6, 21619.0], [29.7, 21637.0], [29.8, 21642.0], [29.9, 21648.0], [30.0, 21656.0], [30.1, 21659.0], [30.2, 21671.0], [30.3, 21677.0], [30.4, 21686.0], [30.5, 21690.0], [30.6, 21702.0], [30.7, 21707.0], [30.8, 21728.0], [30.9, 21735.0], [31.0, 21735.0], [31.1, 21737.0], [31.2, 21739.0], [31.3, 21743.0], [31.4, 21747.0], [31.5, 21753.0], [31.6, 21783.0], [31.7, 21783.0], [31.8, 21790.0], [31.9, 21791.0], [32.0, 21792.0], [32.1, 21792.0], [32.2, 21793.0], [32.3, 21805.0], [32.4, 21813.0], [32.5, 21817.0], [32.6, 21817.0], [32.7, 21817.0], [32.8, 21824.0], [32.9, 21825.0], [33.0, 21827.0], [33.1, 21832.0], [33.2, 21835.0], [33.3, 21849.0], [33.4, 21860.0], [33.5, 21866.0], [33.6, 21870.0], [33.7, 21870.0], [33.8, 21872.0], [33.9, 21891.0], [34.0, 21892.0], [34.1, 21900.0], [34.2, 21913.0], [34.3, 21923.0], [34.4, 21928.0], [34.5, 21931.0], [34.6, 21934.0], [34.7, 21934.0], [34.8, 21943.0], [34.9, 21951.0], [35.0, 21955.0], [35.1, 21957.0], [35.2, 21959.0], [35.3, 21960.0], [35.4, 21975.0], [35.5, 21980.0], [35.6, 21980.0], [35.7, 21983.0], [35.8, 21990.0], [35.9, 21996.0], [36.0, 22000.0], [36.1, 22002.0], [36.2, 22003.0], [36.3, 22003.0], [36.4, 22004.0], [36.5, 22007.0], [36.6, 22010.0], [36.7, 22011.0], [36.8, 22021.0], [36.9, 22022.0], [37.0, 22028.0], [37.1, 22032.0], [37.2, 22037.0], [37.3, 22042.0], [37.4, 22046.0], [37.5, 22048.0], [37.6, 22056.0], [37.7, 22056.0], [37.8, 22062.0], [37.9, 22063.0], [38.0, 22066.0], [38.1, 22069.0], [38.2, 22073.0], [38.3, 22081.0], [38.4, 22092.0], [38.5, 22094.0], [38.6, 22095.0], [38.7, 22102.0], [38.8, 22105.0], [38.9, 22116.0], [39.0, 22123.0], [39.1, 22127.0], [39.2, 22148.0], [39.3, 22155.0], [39.4, 22185.0], [39.5, 22194.0], [39.6, 22199.0], [39.7, 22238.0], [39.8, 22246.0], [39.9, 22249.0], [40.0, 22271.0], [40.1, 22278.0], [40.2, 22279.0], [40.3, 22283.0], [40.4, 22286.0], [40.5, 22309.0], [40.6, 22311.0], [40.7, 22320.0], [40.8, 22326.0], [40.9, 22335.0], [41.0, 22339.0], [41.1, 22344.0], [41.2, 22350.0], [41.3, 22352.0], [41.4, 22358.0], [41.5, 22358.0], [41.6, 22362.0], [41.7, 22368.0], [41.8, 22371.0], [41.9, 22377.0], [42.0, 22384.0], [42.1, 22386.0], [42.2, 22394.0], [42.3, 22400.0], [42.4, 22403.0], [42.5, 22422.0], [42.6, 22427.0], [42.7, 22430.0], [42.8, 22440.0], [42.9, 22475.0], [43.0, 22483.0], [43.1, 22496.0], [43.2, 22525.0], [43.3, 22547.0], [43.4, 22575.0], [43.5, 22579.0], [43.6, 22587.0], [43.7, 22627.0], [43.8, 22662.0], [43.9, 22700.0], [44.0, 22739.0], [44.1, 22794.0], [44.2, 22855.0], [44.3, 22865.0], [44.4, 22931.0], [44.5, 22999.0], [44.6, 23070.0], [44.7, 23133.0], [44.8, 23206.0], [44.9, 23262.0], [45.0, 23343.0], [45.1, 23404.0], [45.2, 23468.0], [45.3, 23536.0], [45.4, 23592.0], [45.5, 23633.0], [45.6, 23676.0], [45.7, 23718.0], [45.8, 23800.0], [45.9, 23811.0], [46.0, 23835.0], [46.1, 23889.0], [46.2, 23910.0], [46.3, 23945.0], [46.4, 23960.0], [46.5, 23974.0], [46.6, 23990.0], [46.7, 23996.0], [46.8, 24011.0], [46.9, 24030.0], [47.0, 24032.0], [47.1, 24051.0], [47.2, 24054.0], [47.3, 24082.0], [47.4, 24083.0], [47.5, 24096.0], [47.6, 24123.0], [47.7, 24142.0], [47.8, 24177.0], [47.9, 24188.0], [48.0, 24191.0], [48.1, 24213.0], [48.2, 24214.0], [48.3, 24231.0], [48.4, 24259.0], [48.5, 24264.0], [48.6, 24278.0], [48.7, 24306.0], [48.8, 24307.0], [48.9, 24314.0], [49.0, 24320.0], [49.1, 24328.0], [49.2, 24347.0], [49.3, 24347.0], [49.4, 24356.0], [49.5, 24388.0], [49.6, 24391.0], [49.7, 24432.0], [49.8, 24435.0], [49.9, 24439.0], [50.0, 24467.0], [50.1, 24472.0], [50.2, 24475.0], [50.3, 24481.0], [50.4, 24508.0], [50.5, 24510.0], [50.6, 24515.0], [50.7, 24526.0], [50.8, 24542.0], [50.9, 24549.0], [51.0, 24551.0], [51.1, 24558.0], [51.2, 24573.0], [51.3, 24583.0], [51.4, 24609.0], [51.5, 24660.0], [51.6, 24699.0], [51.7, 24745.0], [51.8, 24788.0], [51.9, 24834.0], [52.0, 24877.0], [52.1, 24922.0], [52.2, 24960.0], [52.3, 24968.0], [52.4, 25013.0], [52.5, 25083.0], [52.6, 25159.0], [52.7, 25226.0], [52.8, 25273.0], [52.9, 25317.0], [53.0, 25364.0], [53.1, 25434.0], [53.2, 25454.0], [53.3, 25503.0], [53.4, 25532.0], [53.5, 25572.0], [53.6, 25608.0], [53.7, 25638.0], [53.8, 25682.0], [53.9, 25720.0], [54.0, 25767.0], [54.1, 25808.0], [54.2, 25849.0], [54.3, 25892.0], [54.4, 25928.0], [54.5, 26004.0], [54.6, 26077.0], [54.7, 26149.0], [54.8, 26169.0], [54.9, 26225.0], [55.0, 26271.0], [55.1, 26335.0], [55.2, 26364.0], [55.3, 26406.0], [55.4, 26467.0], [55.5, 26490.0], [55.6, 26522.0], [55.7, 26543.0], [55.8, 26565.0], [55.9, 26584.0], [56.0, 26590.0], [56.1, 26608.0], [56.2, 26634.0], [56.3, 26672.0], [56.4, 26714.0], [56.5, 26750.0], [56.6, 26800.0], [56.7, 26847.0], [56.8, 26900.0], [56.9, 26940.0], [57.0, 26941.0], [57.1, 26985.0], [57.2, 27032.0], [57.3, 27075.0], [57.4, 27115.0], [57.5, 27192.0], [57.6, 27242.0], [57.7, 27289.0], [57.8, 27328.0], [57.9, 27362.0], [58.0, 27443.0], [58.1, 27491.0], [58.2, 27532.0], [58.3, 27576.0], [58.4, 27635.0], [58.5, 27686.0], [58.6, 27736.0], [58.7, 27777.0], [58.8, 27824.0], [58.9, 27869.0], [59.0, 27903.0], [59.1, 27968.0], [59.2, 27978.0], [59.3, 28016.0], [59.4, 28061.0], [59.5, 28100.0], [59.6, 28144.0], [59.7, 28186.0], [59.8, 28229.0], [59.9, 28275.0], [60.0, 28322.0], [60.1, 28362.0], [60.2, 28413.0], [60.3, 28460.0], [60.4, 28503.0], [60.5, 28543.0], [60.6, 28631.0], [60.7, 28677.0], [60.8, 28717.0], [60.9, 28754.0], [61.0, 28770.0], [61.1, 28794.0], [61.2, 28834.0], [61.3, 28879.0], [61.4, 28929.0], [61.5, 28973.0], [61.6, 29015.0], [61.7, 29062.0], [61.8, 29101.0], [61.9, 29137.0], [62.0, 29181.0], [62.1, 29224.0], [62.2, 29278.0], [62.3, 29321.0], [62.4, 29360.0], [62.5, 29399.0], [62.6, 29435.0], [62.7, 29472.0], [62.8, 29516.0], [62.9, 29555.0], [63.0, 29594.0], [63.1, 29637.0], [63.2, 29678.0], [63.3, 29722.0], [63.4, 29761.0], [63.5, 29807.0], [63.6, 29850.0], [63.7, 29911.0], [63.8, 29946.0], [63.9, 29984.0], [64.0, 30024.0], [64.1, 30069.0], [64.2, 30104.0], [64.3, 30170.0], [64.4, 30173.0], [64.5, 30174.0], [64.6, 30198.0], [64.7, 30238.0], [64.8, 30283.0], [64.9, 30324.0], [65.0, 30369.0], [65.1, 30412.0], [65.2, 30472.0], [65.3, 30513.0], [65.4, 30525.0], [65.5, 30559.0], [65.6, 30604.0], [65.7, 30653.0], [65.8, 30687.0], [65.9, 30729.0], [66.0, 30735.0], [66.1, 30760.0], [66.2, 30764.0], [66.3, 30788.0], [66.4, 30806.0], [66.5, 30850.0], [66.6, 30886.0], [66.7, 30937.0], [66.8, 30987.0], [66.9, 31027.0], [67.0, 31067.0], [67.1, 31099.0], [67.2, 31154.0], [67.3, 31195.0], [67.4, 31238.0], [67.5, 31273.0], [67.6, 31312.0], [67.7, 31353.0], [67.8, 31429.0], [67.9, 31433.0], [68.0, 31461.0], [68.1, 31535.0], [68.2, 31593.0], [68.3, 31629.0], [68.4, 31667.0], [68.5, 31778.0], [68.6, 31819.0], [68.7, 31853.0], [68.8, 31889.0], [68.9, 31931.0], [69.0, 31936.0], [69.1, 31968.0], [69.2, 31978.0], [69.3, 32007.0], [69.4, 32050.0], [69.5, 32087.0], [69.6, 32124.0], [69.7, 32166.0], [69.8, 32195.0], [69.9, 32238.0], [70.0, 32284.0], [70.1, 32339.0], [70.2, 32377.0], [70.3, 32424.0], [70.4, 32464.0], [70.5, 32508.0], [70.6, 32555.0], [70.7, 32592.0], [70.8, 32626.0], [70.9, 32667.0], [71.0, 32703.0], [71.1, 32745.0], [71.2, 32792.0], [71.3, 32832.0], [71.4, 32892.0], [71.5, 32911.0], [71.6, 32948.0], [71.7, 33019.0], [71.8, 33030.0], [71.9, 33076.0], [72.0, 33114.0], [72.1, 33163.0], [72.2, 33205.0], [72.3, 33251.0], [72.4, 33296.0], [72.5, 33339.0], [72.6, 33376.0], [72.7, 33408.0], [72.8, 33448.0], [72.9, 33508.0], [73.0, 33531.0], [73.1, 33545.0], [73.2, 33563.0], [73.3, 33576.0], [73.4, 33583.0], [73.5, 33596.0], [73.6, 33618.0], [73.7, 33624.0], [73.8, 33639.0], [73.9, 33680.0], [74.0, 33736.0], [74.1, 33777.0], [74.2, 33820.0], [74.3, 33862.0], [74.4, 33895.0], [74.5, 33940.0], [74.6, 33991.0], [74.7, 34034.0], [74.8, 34085.0], [74.9, 34175.0], [75.0, 34221.0], [75.1, 34259.0], [75.2, 34294.0], [75.3, 34335.0], [75.4, 34368.0], [75.5, 34410.0], [75.6, 34451.0], [75.7, 34494.0], [75.8, 34540.0], [75.9, 34580.0], [76.0, 34642.0], [76.1, 34666.0], [76.2, 34707.0], [76.3, 34744.0], [76.4, 34788.0], [76.5, 34831.0], [76.6, 34879.0], [76.7, 34913.0], [76.8, 34949.0], [76.9, 34993.0], [77.0, 35041.0], [77.1, 35077.0], [77.2, 35114.0], [77.3, 35152.0], [77.4, 35209.0], [77.5, 35242.0], [77.6, 35245.0], [77.7, 35289.0], [77.8, 35318.0], [77.9, 35363.0], [78.0, 35411.0], [78.1, 35448.0], [78.2, 35488.0], [78.3, 35536.0], [78.4, 35588.0], [78.5, 35622.0], [78.6, 35666.0], [78.7, 35702.0], [78.8, 35748.0], [78.9, 35804.0], [79.0, 35837.0], [79.1, 35900.0], [79.2, 35950.0], [79.3, 35990.0], [79.4, 36030.0], [79.5, 36076.0], [79.6, 36123.0], [79.7, 36165.0], [79.8, 36205.0], [79.9, 36248.0], [80.0, 36293.0], [80.1, 36329.0], [80.2, 36375.0], [80.3, 36412.0], [80.4, 36430.0], [80.5, 36455.0], [80.6, 36471.0], [80.7, 36505.0], [80.8, 36515.0], [80.9, 36543.0], [81.0, 36560.0], [81.1, 36586.0], [81.2, 36608.0], [81.3, 36628.0], [81.4, 36656.0], [81.5, 36666.0], [81.6, 36695.0], [81.7, 36706.0], [81.8, 36760.0], [81.9, 36795.0], [82.0, 36805.0], [82.1, 36838.0], [82.2, 36841.0], [82.3, 36877.0], [82.4, 36889.0], [82.5, 36915.0], [82.6, 36935.0], [82.7, 36954.0], [82.8, 36975.0], [82.9, 36996.0], [83.0, 37001.0], [83.1, 37019.0], [83.2, 37022.0], [83.3, 37032.0], [83.4, 37036.0], [83.5, 37041.0], [83.6, 37057.0], [83.7, 37059.0], [83.8, 37075.0], [83.9, 37083.0], [84.0, 37084.0], [84.1, 37097.0], [84.2, 37099.0], [84.3, 37110.0], [84.4, 37117.0], [84.5, 37121.0], [84.6, 37146.0], [84.7, 37150.0], [84.8, 37150.0], [84.9, 37159.0], [85.0, 37161.0], [85.1, 37174.0], [85.2, 37175.0], [85.3, 37197.0], [85.4, 37203.0], [85.5, 37204.0], [85.6, 37216.0], [85.7, 37220.0], [85.8, 37231.0], [85.9, 37240.0], [86.0, 37249.0], [86.1, 37263.0], [86.2, 37284.0], [86.3, 37296.0], [86.4, 37322.0], [86.5, 37335.0], [86.6, 37348.0], [86.7, 37360.0], [86.8, 37393.0], [86.9, 37429.0], [87.0, 37434.0], [87.1, 37473.0], [87.2, 37479.0], [87.3, 37482.0], [87.4, 37485.0], [87.5, 37520.0], [87.6, 37528.0], [87.7, 37541.0], [87.8, 37559.0], [87.9, 37588.0], [88.0, 37604.0], [88.1, 37606.0], [88.2, 37615.0], [88.3, 37635.0], [88.4, 37659.0], [88.5, 37680.0], [88.6, 37724.0], [88.7, 37729.0], [88.8, 37731.0], [88.9, 37748.0], [89.0, 37771.0], [89.1, 37772.0], [89.2, 37793.0], [89.3, 37809.0], [89.4, 37810.0], [89.5, 37826.0], [89.6, 37836.0], [89.7, 37850.0], [89.8, 37857.0], [89.9, 37871.0], [90.0, 37871.0], [90.1, 37880.0], [90.2, 37890.0], [90.3, 37901.0], [90.4, 37905.0], [90.5, 37915.0], [90.6, 37923.0], [90.7, 37939.0], [90.8, 37954.0], [90.9, 37959.0], [91.0, 37962.0], [91.1, 37963.0], [91.2, 37975.0], [91.3, 37975.0], [91.4, 37979.0], [91.5, 37997.0], [91.6, 38003.0], [91.7, 38006.0], [91.8, 38015.0], [91.9, 38018.0], [92.0, 38025.0], [92.1, 38033.0], [92.2, 38039.0], [92.3, 38040.0], [92.4, 38045.0], [92.5, 38057.0], [92.6, 38060.0], [92.7, 38062.0], [92.8, 38065.0], [92.9, 38073.0], [93.0, 38081.0], [93.1, 38088.0], [93.2, 38090.0], [93.3, 38091.0], [93.4, 38091.0], [93.5, 38108.0], [93.6, 38109.0], [93.7, 38110.0], [93.8, 38127.0], [93.9, 38129.0], [94.0, 38131.0], [94.1, 38149.0], [94.2, 38151.0], [94.3, 38159.0], [94.4, 38160.0], [94.5, 38164.0], [94.6, 38167.0], [94.7, 38169.0], [94.8, 38188.0], [94.9, 38189.0], [95.0, 38208.0], [95.1, 38211.0], [95.2, 38215.0], [95.3, 38232.0], [95.4, 38246.0], [95.5, 38266.0], [95.6, 38267.0], [95.7, 38273.0], [95.8, 38285.0], [95.9, 38306.0], [96.0, 38326.0], [96.1, 38328.0], [96.2, 38335.0], [96.3, 38345.0], [96.4, 38354.0], [96.5, 38358.0], [96.6, 38364.0], [96.7, 38370.0], [96.8, 38378.0], [96.9, 38388.0], [97.0, 38390.0], [97.1, 38397.0], [97.2, 38400.0], [97.3, 38420.0], [97.4, 38421.0], [97.5, 38425.0], [97.6, 38433.0], [97.7, 38437.0], [97.8, 38448.0], [97.9, 38451.0], [98.0, 38456.0], [98.1, 38460.0], [98.2, 38464.0], [98.3, 38464.0], [98.4, 38479.0], [98.5, 38486.0], [98.6, 38491.0], [98.7, 38491.0], [98.8, 38501.0], [98.9, 38515.0], [99.0, 38521.0], [99.1, 38527.0], [99.2, 38533.0], [99.3, 38544.0], [99.4, 38555.0], [99.5, 38561.0], [99.6, 38576.0], [99.7, 38701.0], [99.8, 38812.0], [99.9, 38915.0]], "isOverall": false, "label": "GetAll", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 400.0, "maxY": 175.0, "series": [{"data": [[400.0, 10.0], [500.0, 2.0], [600.0, 14.0], [700.0, 4.0], [800.0, 1.0], [1000.0, 3.0], [1200.0, 2.0], [1300.0, 11.0], [1400.0, 20.0], [1500.0, 31.0], [1600.0, 10.0], [1800.0, 17.0], [1900.0, 2.0], [2100.0, 2.0], [2200.0, 1.0], [2600.0, 1.0], [2900.0, 2.0], [3500.0, 2.0], [3600.0, 14.0], [3700.0, 9.0], [3800.0, 33.0], [3900.0, 34.0], [4000.0, 7.0], [4100.0, 32.0], [4200.0, 21.0], [4300.0, 14.0], [4400.0, 6.0], [4500.0, 4.0], [4600.0, 1.0], [4700.0, 2.0], [4800.0, 4.0], [4900.0, 3.0], [5000.0, 2.0], [5100.0, 1.0], [5200.0, 5.0], [5400.0, 4.0], [5500.0, 13.0], [5600.0, 3.0], [5700.0, 1.0], [5800.0, 1.0], [6000.0, 4.0], [6100.0, 1.0], [6200.0, 4.0], [6300.0, 3.0], [6400.0, 1.0], [6500.0, 2.0], [6600.0, 2.0], [6700.0, 1.0], [6800.0, 2.0], [6900.0, 2.0], [7000.0, 1.0], [7200.0, 2.0], [7800.0, 3.0], [7900.0, 8.0], [8000.0, 1.0], [8100.0, 4.0], [8200.0, 1.0], [8300.0, 3.0], [8500.0, 2.0], [8600.0, 3.0], [8700.0, 7.0], [8900.0, 1.0], [9000.0, 3.0], [9100.0, 5.0], [9200.0, 3.0], [9500.0, 1.0], [9600.0, 7.0], [9700.0, 23.0], [9800.0, 30.0], [9900.0, 4.0], [10000.0, 2.0], [10200.0, 2.0], [10400.0, 3.0], [10500.0, 1.0], [10600.0, 2.0], [10800.0, 1.0], [10900.0, 39.0], [11000.0, 106.0], [11100.0, 175.0], [11200.0, 45.0], [11300.0, 8.0], [11400.0, 2.0], [11800.0, 1.0], [11900.0, 4.0], [12100.0, 5.0], [12200.0, 1.0], [12600.0, 20.0], [12800.0, 3.0], [12900.0, 1.0], [13200.0, 1.0], [13300.0, 1.0], [13400.0, 1.0], [13600.0, 1.0], [13700.0, 14.0], [13800.0, 10.0], [14000.0, 5.0], [14200.0, 1.0], [14300.0, 1.0], [14400.0, 1.0], [14500.0, 1.0], [14800.0, 2.0], [14900.0, 1.0], [15000.0, 3.0], [15200.0, 2.0], [15300.0, 1.0], [15400.0, 1.0], [15500.0, 1.0], [15600.0, 1.0], [15700.0, 2.0], [15800.0, 2.0], [16000.0, 1.0], [16100.0, 1.0], [16200.0, 3.0], [16400.0, 3.0], [16600.0, 8.0], [16700.0, 3.0], [17600.0, 9.0], [17500.0, 9.0], [17700.0, 2.0], [17800.0, 4.0]], "isOverall": false, "label": "Create", "isController": false}, {"data": [[32900.0, 2.0], [33300.0, 2.0], [33700.0, 2.0], [34100.0, 2.0], [34500.0, 2.0], [34900.0, 3.0], [35300.0, 2.0], [35700.0, 2.0], [36100.0, 2.0], [36500.0, 5.0], [36900.0, 5.0], [37300.0, 5.0], [37700.0, 7.0], [38100.0, 15.0], [38500.0, 9.0], [38900.0, 1.0], [400.0, 1.0], [500.0, 2.0], [600.0, 1.0], [700.0, 2.0], [800.0, 2.0], [900.0, 1.0], [1100.0, 1.0], [1600.0, 1.0], [1700.0, 1.0], [1800.0, 1.0], [1900.0, 1.0], [2100.0, 1.0], [2200.0, 1.0], [2500.0, 1.0], [2600.0, 1.0], [2700.0, 1.0], [2800.0, 3.0], [2900.0, 1.0], [3100.0, 2.0], [3200.0, 1.0], [3300.0, 1.0], [3500.0, 1.0], [3600.0, 1.0], [3700.0, 1.0], [3900.0, 1.0], [4000.0, 1.0], [4100.0, 1.0], [4200.0, 2.0], [4300.0, 1.0], [4400.0, 2.0], [4500.0, 1.0], [4600.0, 1.0], [4700.0, 1.0], [4800.0, 1.0], [4900.0, 1.0], [5000.0, 1.0], [5200.0, 2.0], [5300.0, 1.0], [5400.0, 1.0], [5500.0, 1.0], [5600.0, 1.0], [5700.0, 1.0], [5800.0, 1.0], [5900.0, 1.0], [6000.0, 2.0], [6100.0, 1.0], [6200.0, 1.0], [6300.0, 2.0], [6400.0, 1.0], [6500.0, 1.0], [6600.0, 1.0], [6700.0, 1.0], [6800.0, 2.0], [6900.0, 1.0], [7000.0, 1.0], [7100.0, 1.0], [7200.0, 2.0], [7300.0, 1.0], [7400.0, 1.0], [7500.0, 2.0], [7600.0, 1.0], [7700.0, 1.0], [7800.0, 2.0], [7900.0, 1.0], [8000.0, 1.0], [8100.0, 2.0], [8200.0, 1.0], [8300.0, 2.0], [8400.0, 1.0], [8500.0, 2.0], [8600.0, 2.0], [8700.0, 1.0], [8800.0, 2.0], [8900.0, 1.0], [9000.0, 2.0], [9100.0, 2.0], [9200.0, 1.0], [9300.0, 1.0], [9400.0, 2.0], [9500.0, 1.0], [9600.0, 2.0], [9700.0, 1.0], [9800.0, 3.0], [9900.0, 2.0], [10000.0, 1.0], [10100.0, 1.0], [10200.0, 2.0], [10300.0, 1.0], [10400.0, 1.0], [10500.0, 2.0], [10600.0, 1.0], [10700.0, 1.0], [10800.0, 2.0], [10900.0, 1.0], [11000.0, 3.0], [11100.0, 6.0], [11200.0, 1.0], [11300.0, 2.0], [11400.0, 1.0], [11500.0, 2.0], [11700.0, 1.0], [11900.0, 1.0], [12000.0, 1.0], [12100.0, 2.0], [12200.0, 1.0], [12300.0, 1.0], [12600.0, 1.0], [12700.0, 2.0], [12800.0, 1.0], [13000.0, 1.0], [13100.0, 1.0], [13200.0, 1.0], [13300.0, 1.0], [13400.0, 1.0], [13600.0, 2.0], [13800.0, 2.0], [13900.0, 1.0], [14000.0, 1.0], [14100.0, 1.0], [14200.0, 1.0], [14300.0, 1.0], [14400.0, 1.0], [14500.0, 1.0], [14600.0, 1.0], [14700.0, 1.0], [14800.0, 1.0], [14900.0, 1.0], [15000.0, 1.0], [15100.0, 1.0], [15200.0, 1.0], [15300.0, 1.0], [15400.0, 1.0], [15500.0, 1.0], [15600.0, 1.0], [15800.0, 1.0], [15900.0, 1.0], [16000.0, 2.0], [16100.0, 1.0], [16200.0, 2.0], [16300.0, 1.0], [17200.0, 1.0], [16400.0, 2.0], [16600.0, 1.0], [16800.0, 2.0], [17000.0, 2.0], [17400.0, 3.0], [18200.0, 2.0], [17600.0, 1.0], [17800.0, 2.0], [18000.0, 2.0], [18400.0, 1.0], [19200.0, 2.0], [18600.0, 2.0], [18800.0, 2.0], [19000.0, 3.0], [19400.0, 3.0], [19600.0, 2.0], [19800.0, 2.0], [20000.0, 2.0], [20200.0, 2.0], [20400.0, 2.0], [20600.0, 2.0], [20800.0, 3.0], [21000.0, 2.0], [21200.0, 6.0], [21400.0, 2.0], [21600.0, 11.0], [21800.0, 18.0], [22000.0, 27.0], [22200.0, 8.0], [22400.0, 9.0], [22600.0, 2.0], [22800.0, 2.0], [23000.0, 1.0], [23200.0, 2.0], [23400.0, 2.0], [23600.0, 2.0], [23800.0, 4.0], [24000.0, 8.0], [24200.0, 6.0], [24400.0, 7.0], [24600.0, 3.0], [24800.0, 2.0], [25000.0, 2.0], [25200.0, 2.0], [25400.0, 2.0], [25600.0, 3.0], [25800.0, 3.0], [26000.0, 2.0], [26200.0, 2.0], [26400.0, 3.0], [26600.0, 3.0], [26800.0, 2.0], [27000.0, 2.0], [27200.0, 2.0], [27400.0, 2.0], [27600.0, 2.0], [27800.0, 2.0], [28000.0, 2.0], [28200.0, 2.0], [28400.0, 2.0], [28600.0, 2.0], [28800.0, 2.0], [29000.0, 2.0], [29200.0, 2.0], [29400.0, 2.0], [29600.0, 2.0], [29800.0, 2.0], [30000.0, 2.0], [30200.0, 2.0], [30400.0, 2.0], [30600.0, 3.0], [30800.0, 3.0], [31000.0, 3.0], [31200.0, 2.0], [31400.0, 3.0], [31600.0, 2.0], [31800.0, 3.0], [32000.0, 3.0], [32200.0, 2.0], [32400.0, 2.0], [32600.0, 2.0], [32800.0, 2.0], [33200.0, 3.0], [33600.0, 4.0], [34000.0, 2.0], [34400.0, 3.0], [34800.0, 2.0], [35200.0, 4.0], [35600.0, 2.0], [36000.0, 2.0], [36400.0, 4.0], [36800.0, 5.0], [37200.0, 10.0], [37600.0, 6.0], [38000.0, 19.0], [38400.0, 16.0], [38800.0, 1.0], [33100.0, 2.0], [33500.0, 7.0], [33900.0, 2.0], [34300.0, 2.0], [34700.0, 3.0], [35100.0, 2.0], [35500.0, 2.0], [35900.0, 3.0], [36300.0, 2.0], [36700.0, 3.0], [37100.0, 11.0], [37500.0, 5.0], [37900.0, 13.0], [38300.0, 13.0], [38700.0, 1.0], [16500.0, 1.0], [16700.0, 1.0], [16900.0, 1.0], [17100.0, 1.0], [17300.0, 3.0], [17500.0, 2.0], [17700.0, 1.0], [17900.0, 1.0], [18100.0, 1.0], [18300.0, 2.0], [18500.0, 1.0], [18900.0, 2.0], [19100.0, 7.0], [19300.0, 2.0], [19500.0, 1.0], [19700.0, 3.0], [19900.0, 2.0], [20100.0, 3.0], [20300.0, 3.0], [21300.0, 2.0], [20500.0, 3.0], [20700.0, 2.0], [20900.0, 2.0], [21100.0, 3.0], [21500.0, 3.0], [21700.0, 17.0], [21900.0, 19.0], [22100.0, 10.0], [22300.0, 18.0], [22500.0, 5.0], [22700.0, 3.0], [22900.0, 2.0], [23100.0, 1.0], [23300.0, 1.0], [23500.0, 2.0], [23700.0, 1.0], [23900.0, 6.0], [24100.0, 5.0], [24300.0, 10.0], [24500.0, 10.0], [24700.0, 2.0], [24900.0, 3.0], [25100.0, 1.0], [25300.0, 2.0], [25500.0, 3.0], [25700.0, 2.0], [25900.0, 1.0], [26100.0, 2.0], [26300.0, 2.0], [26500.0, 5.0], [26700.0, 2.0], [26900.0, 4.0], [27100.0, 2.0], [27300.0, 2.0], [27500.0, 2.0], [27700.0, 2.0], [27900.0, 3.0], [28100.0, 3.0], [28300.0, 2.0], [28500.0, 2.0], [28700.0, 4.0], [28900.0, 2.0], [29100.0, 3.0], [29300.0, 3.0], [29500.0, 3.0], [29700.0, 2.0], [29900.0, 3.0], [30100.0, 5.0], [30300.0, 2.0], [30500.0, 3.0], [30700.0, 5.0], [30900.0, 2.0], [31100.0, 2.0], [31300.0, 2.0], [31500.0, 2.0], [31700.0, 1.0], [31900.0, 4.0], [32100.0, 3.0], [32300.0, 2.0], [32500.0, 3.0], [32700.0, 3.0], [33000.0, 3.0], [33400.0, 2.0], [33800.0, 3.0], [34200.0, 3.0], [34600.0, 2.0], [35000.0, 2.0], [35400.0, 3.0], [35800.0, 2.0], [36200.0, 3.0], [36600.0, 5.0], [37000.0, 13.0], [37400.0, 6.0], [37800.0, 10.0], [38200.0, 9.0]], "isOverall": false, "label": "GetAll", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 38900.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 11.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1922.0, "series": [{"data": [[0.0, 11.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 67.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1922.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 244.5, "minX": 1.68062004E12, "maxY": 782.1514550264556, "series": [{"data": [[1.68062004E12, 782.1514550264556], [1.6806201E12, 244.5]], "isOverall": false, "label": "CreateGetAll", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6806201E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 402.0, "minX": 1.0, "maxY": 38915.0, "series": [{"data": [[106.0, 402.0], [108.0, 413.0], [114.0, 437.0], [115.0, 454.0], [116.0, 461.5], [120.0, 475.0], [122.0, 486.0], [124.0, 464.0], [127.0, 507.5], [155.0, 643.0], [156.0, 645.0], [158.0, 646.875], [169.0, 673.0], [171.0, 721.5], [172.0, 749.0], [175.0, 731.5], [197.0, 838.0], [228.0, 1002.0], [233.0, 1035.0], [276.0, 1245.0], [278.0, 1246.0], [290.0, 1315.0], [303.0, 1387.6666666666667], [309.0, 1365.5], [310.0, 1385.0], [313.0, 1376.0], [314.0, 1375.0], [316.0, 1346.0], [320.0, 1427.0], [322.0, 1349.0], [335.0, 1526.0], [337.0, 1464.0], [339.0, 1462.0], [340.0, 1434.5], [343.0, 1527.0], [344.0, 1503.5], [349.0, 1536.5], [353.0, 1502.0], [352.0, 1477.0], [354.0, 1465.0], [355.0, 1497.0], [357.0, 1537.5], [359.0, 1476.0], [361.0, 1487.5], [362.0, 1500.0], [365.0, 1621.0], [368.0, 1553.8], [369.0, 1517.5], [372.0, 1495.0], [376.0, 1489.0], [382.0, 1610.5], [383.0, 1576.0], [385.0, 1537.0], [386.0, 1547.0], [387.0, 1539.0], [394.0, 1532.0], [397.0, 1549.0], [399.0, 1550.6666666666667], [401.0, 1555.0], [404.0, 1668.0], [406.0, 1556.0], [407.0, 1652.0], [408.0, 1569.0], [411.0, 1554.0], [413.0, 1568.0], [414.0, 1595.0], [416.0, 1667.0], [419.0, 1648.0], [476.0, 1901.5], [466.0, 1832.0], [467.0, 1816.0], [469.0, 1832.0], [471.0, 1802.0], [472.0, 1835.0], [475.0, 1829.0], [478.0, 1847.0], [479.0, 1920.0], [480.0, 1870.0], [481.0, 1861.0], [482.0, 1842.0], [483.0, 1855.0], [485.0, 1830.0], [487.0, 1855.0], [544.0, 2148.0], [548.0, 2196.5], [646.0, 2667.0], [712.0, 2993.0], [714.0, 2996.0], [796.0, 17587.23076923077], [795.0, 17639.2], [794.0, 17691.0], [793.0, 17833.4], [829.0, 15091.0], [816.0, 13092.0], [819.0, 9784.5], [817.0, 16189.0], [821.0, 15898.0], [830.0, 15036.333333333334], [827.0, 15298.0], [826.0, 15399.0], [825.0, 15490.0], [824.0, 15588.0], [814.0, 16425.0], [813.0, 16496.5], [811.0, 16630.249999999996], [809.0, 16778.0], [823.0, 15709.0], [822.0, 15810.0], [835.0, 9037.0], [836.0, 9005.0], [837.0, 14259.0], [856.0, 12169.8], [839.0, 14070.4], [860.0, 11834.0], [859.0, 11940.0], [863.0, 11489.0], [862.0, 11492.0], [840.0, 3615.0], [841.0, 11302.5], [842.0, 13329.181818181818], [843.0, 3653.0], [845.0, 6119.25], [844.0, 13605.0], [847.0, 13251.0], [834.0, 14557.0], [832.0, 14888.0], [846.0, 13371.0], [849.0, 8328.0], [851.0, 3693.0], [850.0, 12891.333333333334], [853.0, 12674.5], [852.0, 12661.499999999998], [854.0, 3690.0], [855.0, 12288.0], [869.0, 11070.405405405407], [878.0, 3790.0], [871.0, 6243.666666666666], [874.0, 6168.0], [873.0, 11124.237288135593], [872.0, 11147.5], [875.0, 6185.0], [877.0, 7298.5], [876.0, 10956.666666666666], [879.0, 3781.5], [864.0, 11367.0], [866.0, 11032.0], [865.0, 11165.0], [868.0, 11187.0], [867.0, 11063.641509433957], [870.0, 11192.029999999997], [895.0, 9671.42857142857], [882.0, 10511.0], [880.0, 10661.5], [886.0, 10210.0], [883.0, 10436.0], [893.0, 9798.0], [892.0, 9812.859999999999], [890.0, 9909.0], [889.0, 9980.0], [888.0, 10052.0], [920.0, 3865.0], [910.0, 8235.3], [900.0, 3846.0], [901.0, 9268.666666666666], [902.0, 3856.0], [903.0, 8252.0], [921.0, 7459.25], [922.0, 7223.833333333333], [923.0, 3851.0], [925.0, 3826.0], [926.0, 3862.5], [927.0, 3833.0], [906.0, 6439.5], [905.0, 9049.0], [907.0, 6381.0], [909.0, 3863.5], [911.0, 6266.0], [896.0, 9598.0], [912.0, 5445.666666666667], [915.0, 6112.5], [913.0, 8528.0], [916.0, 6838.666666666667], [917.0, 3855.0], [918.0, 7332.8], [919.0, 5975.0], [935.0, 5409.5], [930.0, 3870.5], [929.0, 3891.0], [943.0, 6247.75], [941.0, 6398.0], [939.0, 6565.5], [938.0, 6647.5], [933.0, 4938.666666666667], [931.0, 7214.5], [934.0, 6970.5], [936.0, 5366.0], [937.0, 4787.0], [951.0, 5449.0], [950.0, 5647.0], [949.0, 5737.0], [948.0, 5837.0], [946.0, 6012.333333333333], [945.0, 6083.0], [944.0, 6171.0], [958.0, 4660.0], [959.0, 4592.5], [955.0, 4344.333333333333], [954.0, 5289.5], [956.0, 5101.0], [957.0, 4766.8], [952.0, 5162.4], [953.0, 3888.0], [962.0, 4330.0], [961.0, 4374.666666666667], [963.0, 4351.666666666667], [964.0, 4319.133333333333], [969.0, 3967.5599999999995], [968.0, 4035.6666666666665], [967.0, 4121.0], [966.0, 4188.760869565218], [965.0, 4260.333333333333]], "isOverall": false, "label": "Create", "isController": false}, {"data": [[814.6019999999991, 8499.108999999997]], "isOverall": false, "label": "Create-Aggregated", "isController": false}, {"data": [[2.0, 37150.0], [3.0, 37099.0], [4.0, 37059.0], [5.0, 37022.0], [6.0, 37083.0], [7.0, 37117.0], [8.0, 37075.0], [9.0, 37036.0], [10.0, 37032.0], [11.0, 36996.0], [12.0, 37001.0], [13.0, 36954.0], [14.0, 36915.0], [15.0, 36877.0], [16.0, 36838.0], [17.0, 36795.0], [18.0, 37615.0], [19.0, 37606.0], [20.0, 36695.0], [21.0, 36656.0], [22.0, 36608.0], [23.0, 36560.0], [24.0, 36515.0], [25.0, 36471.0], [26.0, 36430.0], [27.0, 37231.0], [28.0, 37335.0], [29.0, 37296.0], [30.0, 37249.0], [31.0, 37204.0], [33.0, 37121.0], [32.0, 37159.0], [35.0, 37041.0], [34.0, 37084.0], [37.0, 37110.0], [36.0, 37150.0], [39.0, 37263.0], [38.0, 37146.0], [41.0, 37174.0], [40.0, 37216.0], [43.0, 37348.0], [42.0, 37220.0], [45.0, 37473.0], [44.0, 37429.0], [47.0, 37485.0], [46.0, 37528.0], [49.0, 37880.0], [48.0, 37482.0], [51.0, 37604.0], [50.0, 37541.0], [53.0, 37659.0], [52.0, 38015.0], [55.0, 37962.0], [54.0, 37724.0], [57.0, 37871.0], [56.0, 37850.0], [59.0, 37890.0], [58.0, 37923.0], [61.0, 38273.0], [60.0, 38188.0], [63.0, 38812.0], [62.0, 38326.0], [67.0, 38437.0], [66.0, 38479.0], [65.0, 38515.0], [64.0, 38370.0], [71.0, 38486.0], [70.0, 38527.0], [69.0, 38358.0], [68.0, 38400.0], [75.0, 38397.0], [74.0, 38448.0], [73.0, 38491.0], [72.0, 38576.0], [79.0, 38232.0], [78.0, 38267.0], [77.0, 38306.0], [76.0, 38354.0], [83.0, 38091.0], [82.0, 38109.0], [81.0, 38151.0], [80.0, 38189.0], [87.0, 37979.0], [86.0, 38025.0], [85.0, 38062.0], [84.0, 38081.0], [91.0, 37771.0], [90.0, 37810.0], [89.0, 37836.0], [88.0, 37939.0], [95.0, 37975.0], [94.0, 37901.0], [93.0, 38555.0], [92.0, 37731.0], [99.0, 38425.0], [98.0, 38701.0], [97.0, 38149.0], [96.0, 38060.0], [103.0, 38521.0], [102.0, 38561.0], [101.0, 38345.0], [100.0, 38388.0], [107.0, 38335.0], [106.0, 38378.0], [105.0, 38421.0], [104.0, 38460.0], [111.0, 38129.0], [110.0, 38169.0], [109.0, 38211.0], [108.0, 38266.0], [115.0, 37959.0], [114.0, 38003.0], [113.0, 38045.0], [112.0, 38090.0], [119.0, 37793.0], [118.0, 37826.0], [117.0, 37871.0], [116.0, 37915.0], [123.0, 38131.0], [122.0, 38159.0], [121.0, 38091.0], [120.0, 37748.0], [127.0, 38033.0], [126.0, 38065.0], [125.0, 38915.0], [124.0, 38108.0], [135.0, 38464.0], [134.0, 38433.0], [133.0, 38464.0], [132.0, 38160.0], [131.0, 38088.0], [130.0, 38127.0], [129.0, 38164.0], [128.0, 38215.0], [143.0, 38390.0], [142.0, 38420.0], [141.0, 38456.0], [140.0, 38501.0], [139.0, 38544.0], [138.0, 38451.0], [137.0, 38491.0], [136.0, 38533.0], [151.0, 38073.0], [150.0, 38110.0], [149.0, 38167.0], [148.0, 38208.0], [147.0, 38246.0], [146.0, 38285.0], [145.0, 38328.0], [144.0, 38364.0], [159.0, 37997.0], [158.0, 38039.0], [157.0, 37975.0], [156.0, 38018.0], [155.0, 38057.0], [154.0, 37963.0], [153.0, 38006.0], [152.0, 38040.0], [167.0, 37635.0], [166.0, 37680.0], [165.0, 37729.0], [164.0, 37772.0], [163.0, 37809.0], [162.0, 37857.0], [161.0, 37905.0], [160.0, 37954.0], [175.0, 37322.0], [174.0, 37360.0], [173.0, 37393.0], [172.0, 37434.0], [171.0, 37479.0], [170.0, 37520.0], [169.0, 37559.0], [168.0, 37588.0], [183.0, 37019.0], [182.0, 37057.0], [181.0, 37097.0], [180.0, 37161.0], [179.0, 37175.0], [178.0, 37203.0], [177.0, 37240.0], [176.0, 37284.0], [191.0, 36666.0], [190.0, 36706.0], [189.0, 36760.0], [188.0, 36805.0], [187.0, 36841.0], [186.0, 36889.0], [185.0, 36935.0], [184.0, 36975.0], [199.0, 36329.0], [198.0, 36375.0], [197.0, 36412.0], [196.0, 36455.0], [195.0, 36505.0], [194.0, 36543.0], [193.0, 36586.0], [192.0, 36628.0], [202.0, 18341.5], [207.0, 35990.0], [206.0, 36030.0], [205.0, 36076.0], [204.0, 36123.0], [203.0, 36165.0], [201.0, 36248.0], [200.0, 36293.0], [213.0, 18119.0], [215.0, 35622.0], [214.0, 35666.0], [212.0, 35748.0], [211.0, 35804.0], [210.0, 35837.0], [209.0, 35900.0], [208.0, 35950.0], [223.0, 35289.0], [222.0, 35318.0], [221.0, 35363.0], [220.0, 35411.0], [219.0, 35448.0], [218.0, 35488.0], [217.0, 35536.0], [216.0, 35588.0], [227.0, 17864.0], [231.0, 34993.0], [230.0, 35041.0], [229.0, 35077.0], [228.0, 35114.0], [226.0, 35209.0], [225.0, 35242.0], [224.0, 35245.0], [239.0, 34666.0], [238.0, 34707.0], [237.0, 34744.0], [236.0, 34788.0], [235.0, 34831.0], [234.0, 34879.0], [233.0, 34913.0], [232.0, 34949.0], [244.0, 17552.5], [247.0, 34335.0], [246.0, 34368.0], [245.0, 34410.0], [243.0, 34494.0], [242.0, 34540.0], [241.0, 34580.0], [240.0, 34642.0], [255.0, 33991.0], [254.0, 34034.0], [253.0, 34085.0], [252.0, 34133.0], [251.0, 34175.0], [250.0, 34221.0], [249.0, 34259.0], [248.0, 34294.0], [270.0, 33583.0], [258.0, 17290.5], [257.0, 33895.0], [256.0, 33940.0], [259.0, 33820.0], [263.0, 33624.0], [262.0, 33680.0], [261.0, 33736.0], [260.0, 33777.0], [268.0, 17210.0], [271.0, 33545.0], [269.0, 33618.0], [267.0, 33563.0], [266.0, 33596.0], [265.0, 33531.0], [264.0, 33576.0], [286.0, 32911.0], [276.0, 17079.5], [277.0, 33296.0], [279.0, 33205.0], [273.0, 33448.0], [272.0, 33508.0], [275.0, 33376.0], [274.0, 33408.0], [278.0, 33251.0], [287.0, 32892.0], [285.0, 32948.0], [284.0, 33019.0], [283.0, 33030.0], [282.0, 33076.0], [281.0, 33114.0], [280.0, 33163.0], [303.0, 32195.0], [291.0, 16794.5], [295.0, 32555.0], [288.0, 32832.0], [290.0, 32745.0], [289.0, 32792.0], [294.0, 32592.0], [293.0, 32626.0], [292.0, 32667.0], [301.0, 16619.0], [302.0, 32238.0], [300.0, 32339.0], [299.0, 32377.0], [298.0, 32424.0], [297.0, 32464.0], [296.0, 32508.0], [318.0, 31629.0], [319.0, 31593.0], [317.0, 31667.0], [316.0, 31778.0], [315.0, 31819.0], [314.0, 31853.0], [313.0, 31889.0], [312.0, 31936.0], [311.0, 31931.0], [305.0, 32124.0], [304.0, 32166.0], [307.0, 32050.0], [306.0, 32087.0], [310.0, 31978.0], [309.0, 31968.0], [308.0, 32007.0], [334.0, 30937.0], [335.0, 16000.0], [333.0, 30987.0], [332.0, 31027.0], [331.0, 31067.0], [330.0, 31099.0], [329.0, 31154.0], [328.0, 31195.0], [327.0, 31238.0], [321.0, 31461.0], [320.0, 31535.0], [323.0, 31429.0], [322.0, 31433.0], [326.0, 31273.0], [325.0, 31312.0], [324.0, 31353.0], [350.0, 30412.0], [351.0, 30369.0], [349.0, 30472.0], [348.0, 30513.0], [347.0, 30525.0], [346.0, 30559.0], [345.0, 30604.0], [344.0, 30653.0], [343.0, 30687.0], [337.0, 30806.0], [336.0, 30850.0], [339.0, 30729.0], [338.0, 30764.0], [342.0, 30735.0], [341.0, 30760.0], [340.0, 30788.0], [366.0, 29807.0], [367.0, 29761.0], [365.0, 29850.0], [364.0, 29911.0], [363.0, 29946.0], [362.0, 29984.0], [361.0, 30024.0], [360.0, 30069.0], [359.0, 30104.0], [353.0, 30283.0], [352.0, 30324.0], [355.0, 30198.0], [354.0, 30238.0], [358.0, 30174.0], [357.0, 30170.0], [356.0, 30173.0], [382.0, 29137.0], [383.0, 29101.0], [381.0, 29181.0], [380.0, 29224.0], [379.0, 29278.0], [378.0, 29321.0], [377.0, 29360.0], [376.0, 29399.0], [375.0, 29435.0], [369.0, 29678.0], [368.0, 29722.0], [371.0, 29594.0], [370.0, 29637.0], [374.0, 29472.0], [373.0, 29516.0], [372.0, 29555.0], [398.0, 28460.0], [399.0, 28413.0], [397.0, 28503.0], [396.0, 28543.0], [395.0, 28631.0], [394.0, 28677.0], [393.0, 28717.0], [392.0, 28754.0], [391.0, 28770.0], [385.0, 29015.0], [384.0, 29062.0], [387.0, 28929.0], [386.0, 28973.0], [390.0, 28794.0], [389.0, 28834.0], [388.0, 28879.0], [414.0, 27777.0], [415.0, 27736.0], [413.0, 27824.0], [412.0, 27869.0], [411.0, 27903.0], [410.0, 27968.0], [409.0, 27978.0], [408.0, 28016.0], [407.0, 28061.0], [401.0, 28322.0], [400.0, 28362.0], [403.0, 28229.0], [402.0, 28275.0], [406.0, 28100.0], [405.0, 28144.0], [404.0, 28186.0], [430.0, 26985.0], [431.0, 26940.0], [429.0, 27032.0], [428.0, 27075.0], [427.0, 27115.0], [426.0, 27192.0], [425.0, 27242.0], [424.0, 27289.0], [423.0, 27328.0], [417.0, 27635.0], [416.0, 27686.0], [419.0, 27532.0], [418.0, 27576.0], [422.0, 27362.0], [421.0, 27443.0], [420.0, 27491.0], [446.0, 26490.0], [444.0, 14110.0], [447.0, 26467.0], [445.0, 26522.0], [443.0, 26634.0], [442.0, 26584.0], [441.0, 26565.0], [440.0, 26543.0], [439.0, 26608.0], [433.0, 26847.0], [432.0, 26900.0], [435.0, 26941.0], [434.0, 26800.0], [438.0, 26672.0], [437.0, 26714.0], [436.0, 26750.0], [462.0, 25720.0], [463.0, 25682.0], [461.0, 25767.0], [460.0, 25808.0], [459.0, 25849.0], [458.0, 25892.0], [457.0, 25928.0], [456.0, 26004.0], [455.0, 26077.0], [449.0, 26364.0], [448.0, 26406.0], [451.0, 26271.0], [450.0, 26335.0], [454.0, 26149.0], [453.0, 26169.0], [452.0, 26225.0], [478.0, 24968.0], [466.0, 13658.5], [465.0, 25608.0], [464.0, 25638.0], [467.0, 25532.0], [471.0, 25364.0], [470.0, 25434.0], [469.0, 25454.0], [468.0, 25503.0], [479.0, 24960.0], [477.0, 25013.0], [476.0, 25083.0], [475.0, 25159.0], [474.0, 25226.0], [473.0, 25273.0], [472.0, 25317.0], [494.0, 24259.0], [495.0, 24214.0], [493.0, 24306.0], [492.0, 24347.0], [491.0, 24388.0], [490.0, 24439.0], [489.0, 24481.0], [488.0, 24573.0], [487.0, 24609.0], [481.0, 24877.0], [480.0, 24922.0], [483.0, 24788.0], [482.0, 24834.0], [486.0, 24660.0], [485.0, 24699.0], [484.0, 24745.0], [510.0, 24320.0], [511.0, 24356.0], [509.0, 24213.0], [508.0, 24011.0], [507.0, 23974.0], [506.0, 24328.0], [505.0, 24051.0], [504.0, 24096.0], [503.0, 24054.0], [497.0, 24142.0], [496.0, 24177.0], [499.0, 24082.0], [498.0, 24188.0], [502.0, 23960.0], [501.0, 23996.0], [500.0, 24032.0], [540.0, 12935.0], [520.0, 13168.5], [521.0, 24508.0], [523.0, 24583.0], [522.0, 24542.0], [525.0, 24526.0], [524.0, 24551.0], [527.0, 24432.0], [513.0, 24278.0], [512.0, 24314.0], [515.0, 24435.0], [514.0, 24475.0], [517.0, 24510.0], [516.0, 24549.0], [519.0, 24515.0], [518.0, 24558.0], [526.0, 24472.0], [543.0, 23800.0], [529.0, 24347.0], [528.0, 24391.0], [531.0, 24264.0], [530.0, 24307.0], [533.0, 24191.0], [532.0, 24231.0], [535.0, 24083.0], [534.0, 24123.0], [542.0, 23811.0], [541.0, 23835.0], [539.0, 23910.0], [538.0, 23945.0], [537.0, 23990.0], [536.0, 24030.0], [572.0, 22066.0], [573.0, 12073.0], [575.0, 22003.0], [561.0, 22700.0], [560.0, 22739.0], [563.0, 22579.0], [562.0, 22627.0], [565.0, 22440.0], [564.0, 22496.0], [574.0, 21928.0], [571.0, 22056.0], [570.0, 22127.0], [569.0, 22185.0], [568.0, 22246.0], [559.0, 22794.0], [545.0, 23676.0], [544.0, 23718.0], [547.0, 23592.0], [546.0, 23633.0], [549.0, 23468.0], [548.0, 23536.0], [551.0, 23343.0], [550.0, 23404.0], [558.0, 22865.0], [557.0, 22931.0], [556.0, 22999.0], [555.0, 23070.0], [554.0, 23133.0], [553.0, 23206.0], [552.0, 23262.0], [567.0, 22311.0], [566.0, 22371.0], [605.0, 22048.0], [594.0, 12028.0], [593.0, 21817.0], [592.0, 21817.0], [595.0, 22069.0], [597.0, 21943.0], [596.0, 22011.0], [599.0, 21866.0], [598.0, 21900.0], [607.0, 21735.0], [606.0, 21737.0], [604.0, 21735.0], [603.0, 21707.0], [602.0, 21753.0], [601.0, 21793.0], [600.0, 21827.0], [583.0, 21980.0], [582.0, 21677.0], [581.0, 21642.0], [580.0, 21686.0], [579.0, 21747.0], [578.0, 21805.0], [577.0, 21870.0], [576.0, 21931.0], [591.0, 21791.0], [590.0, 21849.0], [589.0, 21892.0], [588.0, 21934.0], [587.0, 21975.0], [586.0, 22249.0], [585.0, 21891.0], [584.0, 21934.0], [636.0, 22403.0], [639.0, 22358.0], [625.0, 21608.0], [624.0, 21637.0], [627.0, 22194.0], [626.0, 21543.0], [629.0, 22279.0], [628.0, 22155.0], [638.0, 22400.0], [637.0, 22362.0], [635.0, 22358.0], [634.0, 22344.0], [633.0, 22309.0], [632.0, 22855.0], [623.0, 21656.0], [609.0, 21835.0], [608.0, 21817.0], [611.0, 21870.0], [610.0, 21860.0], [613.0, 21783.0], [612.0, 21825.0], [615.0, 21913.0], [614.0, 21813.0], [622.0, 21671.0], [621.0, 21648.0], [620.0, 21690.0], [619.0, 21743.0], [618.0, 21790.0], [617.0, 21832.0], [616.0, 21872.0], [631.0, 22283.0], [630.0, 22320.0], [667.0, 12362.5], [645.0, 12431.0], [655.0, 22525.0], [640.0, 22662.0], [642.0, 22352.0], [641.0, 22394.0], [644.0, 22377.0], [643.0, 22271.0], [654.0, 22575.0], [653.0, 22547.0], [652.0, 22483.0], [651.0, 22350.0], [650.0, 22386.0], [649.0, 22427.0], [648.0, 22384.0], [671.0, 22022.0], [657.0, 22422.0], [656.0, 22587.0], [659.0, 22430.0], [658.0, 22475.0], [661.0, 22326.0], [660.0, 22368.0], [663.0, 22238.0], [662.0, 22278.0], [670.0, 22063.0], [669.0, 22010.0], [668.0, 22042.0], [666.0, 22116.0], [665.0, 22148.0], [664.0, 22199.0], [647.0, 22339.0], [646.0, 22286.0], [696.0, 21959.0], [702.0, 21739.0], [698.0, 12362.0], [674.0, 12408.5], [673.0, 21955.0], [672.0, 22000.0], [675.0, 22062.0], [677.0, 21983.0], [676.0, 22021.0], [679.0, 22094.0], [678.0, 22037.0], [687.0, 21980.0], [686.0, 21960.0], [685.0, 22095.0], [684.0, 22102.0], [683.0, 22028.0], [682.0, 22073.0], [681.0, 22123.0], [680.0, 22056.0], [703.0, 21792.0], [689.0, 21990.0], [688.0, 22032.0], [691.0, 22092.0], [690.0, 21951.0], [693.0, 22002.0], [692.0, 22046.0], [695.0, 22004.0], [694.0, 21957.0], [701.0, 21783.0], [700.0, 21824.0], [699.0, 22007.0], [697.0, 22003.0], [731.0, 11802.5], [712.0, 12087.5], [714.0, 21268.0], [713.0, 21311.0], [716.0, 21278.0], [715.0, 21226.0], [718.0, 21182.0], [717.0, 21225.0], [735.0, 20557.0], [721.0, 21163.0], [720.0, 21200.0], [723.0, 21081.0], [722.0, 21121.0], [725.0, 20980.0], [724.0, 21038.0], [727.0, 20893.0], [726.0, 20929.0], [734.0, 20590.0], [733.0, 20639.0], [732.0, 20692.0], [730.0, 20767.0], [729.0, 20811.0], [728.0, 20856.0], [711.0, 21432.0], [710.0, 21482.0], [709.0, 21535.0], [708.0, 21577.0], [707.0, 21619.0], [706.0, 21659.0], [705.0, 21702.0], [704.0, 21728.0], [719.0, 21242.0], [764.0, 19241.0], [746.0, 11545.5], [745.0, 20142.0], [744.0, 20182.0], [747.0, 20065.0], [749.0, 19973.0], [748.0, 20021.0], [751.0, 19880.0], [737.0, 20460.0], [736.0, 20505.0], [739.0, 20367.0], [738.0, 20416.0], [741.0, 20337.0], [740.0, 20330.0], [743.0, 20227.0], [742.0, 20270.0], [750.0, 19923.0], [767.0, 19185.0], [753.0, 19789.0], [752.0, 19835.0], [755.0, 19708.0], [754.0, 19750.0], [757.0, 19603.0], [756.0, 19652.0], [759.0, 19485.0], [758.0, 19554.0], [766.0, 19228.0], [765.0, 19188.0], [763.0, 19407.0], [762.0, 19307.0], [761.0, 19359.0], [760.0, 19402.0], [797.0, 17518.0], [768.0, 11151.5], [783.0, 18459.0], [782.0, 18535.0], [781.0, 18617.0], [780.0, 18687.0], [779.0, 18811.0], [778.0, 18851.0], [777.0, 18903.0], [776.0, 18969.0], [792.0, 17894.0], [775.0, 19008.0], [774.0, 19076.0], [773.0, 19041.0], [772.0, 19160.0], [771.0, 19174.0], [770.0, 19113.0], [769.0, 19161.0], [784.0, 10774.0], [785.0, 18331.0], [787.0, 18223.0], [786.0, 18258.0], [789.0, 18068.0], [788.0, 18156.0], [791.0, 17996.0], [790.0, 18060.0], [799.0, 17418.0], [798.0, 17457.0], [796.0, 17598.0], [795.0, 17675.0], [794.0, 17733.0], [793.0, 17827.0], [829.0, 15195.0], [801.0, 10339.5], [815.0, 16425.0], [800.0, 17420.0], [814.0, 16499.0], [813.0, 16576.0], [812.0, 16643.0], [811.0, 16723.0], [810.0, 16802.0], [809.0, 16808.0], [808.0, 16933.0], [824.0, 15684.0], [807.0, 17014.0], [806.0, 17081.0], [805.0, 17164.0], [804.0, 17231.0], [803.0, 17328.0], [802.0, 17337.0], [817.0, 9817.0], [816.0, 16369.0], [819.0, 16109.0], [818.0, 16209.0], [821.0, 16001.0], [820.0, 16050.0], [823.0, 15809.0], [822.0, 15900.0], [831.0, 14995.0], [830.0, 15095.0], [828.0, 15294.0], [827.0, 15399.0], [826.0, 15492.0], [825.0, 15585.0], [860.0, 11948.0], [835.0, 9043.5], [834.0, 14660.0], [833.0, 14774.0], [832.0, 14890.0], [837.0, 14358.0], [836.0, 14458.0], [839.0, 14135.0], [838.0, 14264.0], [847.0, 13371.0], [846.0, 13488.0], [845.0, 13603.0], [844.0, 13697.0], [843.0, 13809.0], [842.0, 13863.0], [841.0, 13968.0], [840.0, 14076.0], [863.0, 11510.0], [849.0, 13136.0], [848.0, 13248.0], [851.0, 12894.0], [850.0, 13011.0], [853.0, 12708.0], [852.0, 12776.0], [855.0, 12388.0], [854.0, 12670.0], [862.0, 11593.0], [861.0, 11709.0], [859.0, 12056.0], [858.0, 12169.0], [857.0, 12143.0], [856.0, 12295.0], [892.0, 9839.0], [868.0, 7401.0], [867.0, 11036.0], [866.0, 11169.0], [865.0, 11365.0], [864.0, 11488.0], [869.0, 11099.0], [871.0, 11318.0], [870.0, 11154.0], [879.0, 10811.0], [878.0, 10877.0], [877.0, 10952.0], [876.0, 11038.0], [875.0, 11105.0], [874.0, 11182.0], [873.0, 11143.0], [872.0, 11231.0], [895.0, 9735.0], [881.0, 10659.0], [880.0, 10737.0], [883.0, 10512.0], [882.0, 10579.0], [885.0, 10358.0], [884.0, 10429.0], [887.0, 10213.0], [886.0, 10281.0], [894.0, 9802.0], [893.0, 9866.0], [891.0, 9905.0], [890.0, 9982.0], [889.0, 10054.0], [888.0, 10138.0], [924.0, 7805.0], [900.0, 6589.5], [899.0, 9459.0], [898.0, 9517.0], [897.0, 9615.0], [896.0, 9651.0], [901.0, 9324.0], [903.0, 9193.0], [902.0, 9261.0], [911.0, 8674.0], [910.0, 8763.0], [909.0, 8832.0], [908.0, 8894.0], [907.0, 8996.0], [906.0, 9052.0], [905.0, 9061.0], [904.0, 9117.0], [927.0, 7592.0], [913.0, 8582.0], [912.0, 8658.0], [915.0, 8458.0], [914.0, 8518.0], [917.0, 8320.0], [916.0, 8378.0], [919.0, 8177.0], [918.0, 8251.0], [926.0, 7668.0], [925.0, 7737.0], [923.0, 7867.0], [922.0, 7956.0], [921.0, 8031.0], [920.0, 8101.0], [956.0, 5202.0], [959.0, 4884.0], [945.0, 6162.0], [944.0, 6250.0], [947.0, 6005.0], [946.0, 6084.0], [949.0, 5836.0], [948.0, 5921.0], [958.0, 4985.0], [957.0, 5078.0], [955.0, 5282.0], [954.0, 5388.0], [953.0, 5463.0], [952.0, 5567.0], [943.0, 6317.0], [929.0, 7433.0], [928.0, 7517.0], [931.0, 7285.0], [930.0, 7354.0], [933.0, 7131.0], [932.0, 7219.0], [935.0, 6973.0], [934.0, 7051.0], [942.0, 6395.0], [941.0, 6477.0], [940.0, 6567.0], [939.0, 6644.0], [938.0, 6726.0], [937.0, 6822.0], [936.0, 6899.0], [951.0, 5642.0], [950.0, 5739.0], [964.0, 4192.0], [969.0, 4036.0], [968.0, 4109.0], [967.0, 4212.0], [966.0, 4256.0], [965.0, 4359.0], [963.0, 4476.0], [962.0, 4575.0], [961.0, 4677.0], [960.0, 4767.0], [1.0, 37197.0]], "isOverall": false, "label": "GetAll", "isController": false}, {"data": [[487.3270000000001, 24991.627000000008]], "isOverall": false, "label": "GetAll-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 969.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 1439.6, "minX": 1.68062004E12, "maxY": 1119569.6, "series": [{"data": [[1.68062004E12, 963693.3666666667], [1.6806201E12, 1119569.6]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.68062004E12, 4493.733333333334], [1.6806201E12, 1439.6]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6806201E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 8499.108999999997, "minX": 1.68062004E12, "maxY": 33463.72540983606, "series": [{"data": [[1.68062004E12, 8499.108999999997]], "isOverall": false, "label": "Create", "isController": false}, {"data": [[1.68062004E12, 16916.658203125004], [1.6806201E12, 33463.72540983606]], "isOverall": false, "label": "GetAll", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6806201E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 8498.473000000007, "minX": 1.68062004E12, "maxY": 33406.8606557377, "series": [{"data": [[1.68062004E12, 8498.473000000007]], "isOverall": false, "label": "Create", "isController": false}, {"data": [[1.68062004E12, 16837.335937500007], [1.6806201E12, 33406.8606557377]], "isOverall": false, "label": "GetAll", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6806201E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.68062004E12, "maxY": 3.103999999999996, "series": [{"data": [[1.68062004E12, 3.103999999999996]], "isOverall": false, "label": "Create", "isController": false}, {"data": [[1.68062004E12, 0.0], [1.6806201E12, 0.0]], "isOverall": false, "label": "GetAll", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6806201E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 402.0, "minX": 1.68062004E12, "maxY": 38915.0, "series": [{"data": [[1.68062004E12, 24583.0], [1.6806201E12, 38915.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.68062004E12, 22002.7], [1.6806201E12, 38211.4]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.68062004E12, 24434.61], [1.6806201E12, 38562.65]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.68062004E12, 22639.249999999996], [1.6806201E12, 38429.4]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.68062004E12, 402.0], [1.6806201E12, 24573.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.68062004E12, 11092.0], [1.6806201E12, 34430.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6806201E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 641.0, "minX": 14.0, "maxY": 34923.0, "series": [{"data": [[32.0, 5101.0], [34.0, 11162.5], [37.0, 641.0], [38.0, 10536.5], [40.0, 11864.0], [41.0, 13812.0], [76.0, 9785.5], [81.0, 1500.0], [85.0, 4207.0], [103.0, 3873.0], [119.0, 11150.0], [14.0, 18652.0], [15.0, 12900.0], [243.0, 11099.0], [16.0, 13192.0], [17.0, 21931.0], [19.0, 24328.0], [20.0, 21787.5], [21.0, 25849.0], [22.0, 31216.5], [23.0, 34788.0], [24.0, 34923.0], [26.0, 16644.5], [28.0, 1855.5], [30.0, 7958.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 243.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 641.0, "minX": 14.0, "maxY": 34877.0, "series": [{"data": [[32.0, 5097.0], [34.0, 11155.5], [37.0, 641.0], [38.0, 10435.0], [40.0, 11603.0], [41.0, 13809.0], [76.0, 9781.0], [81.0, 1499.0], [85.0, 4205.0], [103.0, 3872.0], [119.0, 11147.0], [14.0, 18576.0], [15.0, 12867.5], [243.0, 11093.0], [16.0, 13070.5], [17.0, 21868.0], [19.0, 24254.0], [20.0, 21733.0], [21.0, 25805.0], [22.0, 31174.0], [23.0, 34742.0], [24.0, 34877.0], [26.0, 16640.5], [28.0, 1851.5], [30.0, 7956.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 243.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 33.333333333333336, "minX": 1.68062004E12, "maxY": 33.333333333333336, "series": [{"data": [[1.68062004E12, 33.333333333333336]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68062004E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 8.133333333333333, "minX": 1.68062004E12, "maxY": 25.2, "series": [{"data": [[1.68062004E12, 25.2], [1.6806201E12, 8.133333333333333]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6806201E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 8.133333333333333, "minX": 1.68062004E12, "maxY": 16.666666666666668, "series": [{"data": [[1.68062004E12, 16.666666666666668]], "isOverall": false, "label": "Create-success", "isController": false}, {"data": [[1.68062004E12, 8.533333333333333], [1.6806201E12, 8.133333333333333]], "isOverall": false, "label": "GetAll-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6806201E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 8.133333333333333, "minX": 1.68062004E12, "maxY": 25.2, "series": [{"data": [[1.68062004E12, 25.2], [1.6806201E12, 8.133333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6806201E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

