/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 816.0, "minX": 0.0, "maxY": 5341.0, "series": [{"data": [[0.0, 2264.0], [0.1, 2508.0], [0.2, 2513.0], [0.3, 2513.0], [0.4, 2524.0], [0.5, 2525.0], [0.6, 2526.0], [0.7, 2528.0], [0.8, 2534.0], [0.9, 2535.0], [1.0, 2541.0], [1.1, 2543.0], [1.2, 2545.0], [1.3, 2545.0], [1.4, 2550.0], [1.5, 2550.0], [1.6, 2555.0], [1.7, 2556.0], [1.8, 2556.0], [1.9, 2559.0], [2.0, 2563.0], [2.1, 2568.0], [2.2, 2573.0], [2.3, 2573.0], [2.4, 2578.0], [2.5, 2578.0], [2.6, 2579.0], [2.7, 2579.0], [2.8, 2580.0], [2.9, 2581.0], [3.0, 2584.0], [3.1, 2584.0], [3.2, 2584.0], [3.3, 2587.0], [3.4, 2593.0], [3.5, 2600.0], [3.6, 2600.0], [3.7, 2600.0], [3.8, 2603.0], [3.9, 2606.0], [4.0, 2612.0], [4.1, 2612.0], [4.2, 2617.0], [4.3, 2620.0], [4.4, 2624.0], [4.5, 2625.0], [4.6, 2627.0], [4.7, 2627.0], [4.8, 2636.0], [4.9, 2642.0], [5.0, 2643.0], [5.1, 2647.0], [5.2, 2649.0], [5.3, 2653.0], [5.4, 2653.0], [5.5, 2655.0], [5.6, 2656.0], [5.7, 2658.0], [5.8, 2663.0], [5.9, 2663.0], [6.0, 2666.0], [6.1, 2668.0], [6.2, 2669.0], [6.3, 2670.0], [6.4, 2670.0], [6.5, 2671.0], [6.6, 2678.0], [6.7, 2689.0], [6.8, 2692.0], [6.9, 2699.0], [7.0, 2699.0], [7.1, 2701.0], [7.2, 2701.0], [7.3, 2701.0], [7.4, 2702.0], [7.5, 2704.0], [7.6, 2705.0], [7.7, 2707.0], [7.8, 2709.0], [7.9, 2715.0], [8.0, 2720.0], [8.1, 2726.0], [8.2, 2729.0], [8.3, 2733.0], [8.4, 2734.0], [8.5, 2735.0], [8.6, 2736.0], [8.7, 2736.0], [8.8, 2737.0], [8.9, 2739.0], [9.0, 2739.0], [9.1, 2740.0], [9.2, 2741.0], [9.3, 2742.0], [9.4, 2742.0], [9.5, 2742.0], [9.6, 2742.0], [9.7, 2742.0], [9.8, 2743.0], [9.9, 2743.0], [10.0, 2743.0], [10.1, 2743.0], [10.2, 2743.0], [10.3, 2744.0], [10.4, 2744.0], [10.5, 2745.0], [10.6, 2747.0], [10.7, 2750.0], [10.8, 2751.0], [10.9, 2752.0], [11.0, 2755.0], [11.1, 2756.0], [11.2, 2758.0], [11.3, 2758.0], [11.4, 2761.0], [11.5, 2762.0], [11.6, 2764.0], [11.7, 2765.0], [11.8, 2765.0], [11.9, 2765.0], [12.0, 2768.0], [12.1, 2769.0], [12.2, 2770.0], [12.3, 2771.0], [12.4, 2772.0], [12.5, 2779.0], [12.6, 2780.0], [12.7, 2780.0], [12.8, 2782.0], [12.9, 2783.0], [13.0, 2784.0], [13.1, 2795.0], [13.2, 2796.0], [13.3, 2798.0], [13.4, 2804.0], [13.5, 2805.0], [13.6, 2807.0], [13.7, 2808.0], [13.8, 2809.0], [13.9, 2810.0], [14.0, 2812.0], [14.1, 2815.0], [14.2, 2818.0], [14.3, 2820.0], [14.4, 2820.0], [14.5, 2822.0], [14.6, 2824.0], [14.7, 2825.0], [14.8, 2831.0], [14.9, 2832.0], [15.0, 2833.0], [15.1, 2837.0], [15.2, 2837.0], [15.3, 2840.0], [15.4, 2844.0], [15.5, 2845.0], [15.6, 2852.0], [15.7, 2858.0], [15.8, 2865.0], [15.9, 2867.0], [16.0, 2867.0], [16.1, 2874.0], [16.2, 2879.0], [16.3, 2881.0], [16.4, 2884.0], [16.5, 2889.0], [16.6, 2890.0], [16.7, 2890.0], [16.8, 2898.0], [16.9, 2899.0], [17.0, 2905.0], [17.1, 2911.0], [17.2, 2912.0], [17.3, 2922.0], [17.4, 2923.0], [17.5, 2924.0], [17.6, 2924.0], [17.7, 2924.0], [17.8, 2926.0], [17.9, 2927.0], [18.0, 2927.0], [18.1, 2929.0], [18.2, 2929.0], [18.3, 2932.0], [18.4, 2933.0], [18.5, 2934.0], [18.6, 2934.0], [18.7, 2935.0], [18.8, 2935.0], [18.9, 2936.0], [19.0, 2936.0], [19.1, 2936.0], [19.2, 2936.0], [19.3, 2936.0], [19.4, 2937.0], [19.5, 2937.0], [19.6, 2938.0], [19.7, 2938.0], [19.8, 2939.0], [19.9, 2940.0], [20.0, 2941.0], [20.1, 2942.0], [20.2, 2942.0], [20.3, 2943.0], [20.4, 2943.0], [20.5, 2943.0], [20.6, 2944.0], [20.7, 2944.0], [20.8, 2949.0], [20.9, 2949.0], [21.0, 2950.0], [21.1, 2951.0], [21.2, 2951.0], [21.3, 2952.0], [21.4, 2953.0], [21.5, 2953.0], [21.6, 2954.0], [21.7, 2957.0], [21.8, 2957.0], [21.9, 2957.0], [22.0, 2957.0], [22.1, 2958.0], [22.2, 2958.0], [22.3, 2959.0], [22.4, 2960.0], [22.5, 2960.0], [22.6, 2960.0], [22.7, 2960.0], [22.8, 2962.0], [22.9, 2964.0], [23.0, 2965.0], [23.1, 2966.0], [23.2, 2967.0], [23.3, 2967.0], [23.4, 2970.0], [23.5, 2971.0], [23.6, 2974.0], [23.7, 2977.0], [23.8, 2977.0], [23.9, 2977.0], [24.0, 2978.0], [24.1, 2979.0], [24.2, 2979.0], [24.3, 2979.0], [24.4, 2979.0], [24.5, 2980.0], [24.6, 2981.0], [24.7, 2981.0], [24.8, 2983.0], [24.9, 2983.0], [25.0, 2984.0], [25.1, 2985.0], [25.2, 2985.0], [25.3, 2985.0], [25.4, 2986.0], [25.5, 2991.0], [25.6, 2993.0], [25.7, 2993.0], [25.8, 2994.0], [25.9, 2994.0], [26.0, 2996.0], [26.1, 2996.0], [26.2, 2997.0], [26.3, 2997.0], [26.4, 2997.0], [26.5, 2998.0], [26.6, 2999.0], [26.7, 3000.0], [26.8, 3000.0], [26.9, 3001.0], [27.0, 3002.0], [27.1, 3003.0], [27.2, 3006.0], [27.3, 3007.0], [27.4, 3008.0], [27.5, 3011.0], [27.6, 3012.0], [27.7, 3015.0], [27.8, 3016.0], [27.9, 3019.0], [28.0, 3020.0], [28.1, 3022.0], [28.2, 3022.0], [28.3, 3023.0], [28.4, 3024.0], [28.5, 3026.0], [28.6, 3026.0], [28.7, 3027.0], [28.8, 3027.0], [28.9, 3028.0], [29.0, 3028.0], [29.1, 3029.0], [29.2, 3030.0], [29.3, 3030.0], [29.4, 3031.0], [29.5, 3033.0], [29.6, 3037.0], [29.7, 3037.0], [29.8, 3040.0], [29.9, 3041.0], [30.0, 3041.0], [30.1, 3044.0], [30.2, 3044.0], [30.3, 3046.0], [30.4, 3047.0], [30.5, 3047.0], [30.6, 3052.0], [30.7, 3053.0], [30.8, 3053.0], [30.9, 3054.0], [31.0, 3057.0], [31.1, 3057.0], [31.2, 3057.0], [31.3, 3060.0], [31.4, 3061.0], [31.5, 3061.0], [31.6, 3063.0], [31.7, 3070.0], [31.8, 3070.0], [31.9, 3071.0], [32.0, 3072.0], [32.1, 3073.0], [32.2, 3073.0], [32.3, 3074.0], [32.4, 3075.0], [32.5, 3075.0], [32.6, 3075.0], [32.7, 3076.0], [32.8, 3078.0], [32.9, 3078.0], [33.0, 3079.0], [33.1, 3080.0], [33.2, 3081.0], [33.3, 3082.0], [33.4, 3083.0], [33.5, 3084.0], [33.6, 3084.0], [33.7, 3087.0], [33.8, 3088.0], [33.9, 3088.0], [34.0, 3089.0], [34.1, 3089.0], [34.2, 3089.0], [34.3, 3098.0], [34.4, 3099.0], [34.5, 3099.0], [34.6, 3100.0], [34.7, 3100.0], [34.8, 3106.0], [34.9, 3106.0], [35.0, 3109.0], [35.1, 3110.0], [35.2, 3114.0], [35.3, 3120.0], [35.4, 3124.0], [35.5, 3127.0], [35.6, 3128.0], [35.7, 3130.0], [35.8, 3131.0], [35.9, 3139.0], [36.0, 3141.0], [36.1, 3141.0], [36.2, 3141.0], [36.3, 3148.0], [36.4, 3148.0], [36.5, 3149.0], [36.6, 3149.0], [36.7, 3149.0], [36.8, 3151.0], [36.9, 3153.0], [37.0, 3154.0], [37.1, 3156.0], [37.2, 3156.0], [37.3, 3157.0], [37.4, 3158.0], [37.5, 3159.0], [37.6, 3159.0], [37.7, 3164.0], [37.8, 3167.0], [37.9, 3167.0], [38.0, 3168.0], [38.1, 3172.0], [38.2, 3172.0], [38.3, 3173.0], [38.4, 3173.0], [38.5, 3174.0], [38.6, 3176.0], [38.7, 3177.0], [38.8, 3183.0], [38.9, 3183.0], [39.0, 3183.0], [39.1, 3184.0], [39.2, 3184.0], [39.3, 3184.0], [39.4, 3185.0], [39.5, 3185.0], [39.6, 3185.0], [39.7, 3186.0], [39.8, 3186.0], [39.9, 3186.0], [40.0, 3187.0], [40.1, 3187.0], [40.2, 3188.0], [40.3, 3189.0], [40.4, 3189.0], [40.5, 3190.0], [40.6, 3190.0], [40.7, 3192.0], [40.8, 3199.0], [40.9, 3205.0], [41.0, 3207.0], [41.1, 3329.0], [41.2, 3330.0], [41.3, 3335.0], [41.4, 3349.0], [41.5, 3349.0], [41.6, 3350.0], [41.7, 3351.0], [41.8, 3351.0], [41.9, 3351.0], [42.0, 3352.0], [42.1, 3353.0], [42.2, 3353.0], [42.3, 3355.0], [42.4, 3360.0], [42.5, 3361.0], [42.6, 3369.0], [42.7, 3369.0], [42.8, 3374.0], [42.9, 3375.0], [43.0, 3375.0], [43.1, 3376.0], [43.2, 3376.0], [43.3, 3383.0], [43.4, 3387.0], [43.5, 3391.0], [43.6, 3394.0], [43.7, 3395.0], [43.8, 3395.0], [43.9, 3397.0], [44.0, 3422.0], [44.1, 3426.0], [44.2, 3432.0], [44.3, 3432.0], [44.4, 3434.0], [44.5, 3437.0], [44.6, 3438.0], [44.7, 3440.0], [44.8, 3441.0], [44.9, 3444.0], [45.0, 3445.0], [45.1, 3446.0], [45.2, 3447.0], [45.3, 3451.0], [45.4, 3452.0], [45.5, 3456.0], [45.6, 3456.0], [45.7, 3457.0], [45.8, 3464.0], [45.9, 3468.0], [46.0, 3472.0], [46.1, 3475.0], [46.2, 3552.0], [46.3, 3562.0], [46.4, 3562.0], [46.5, 3564.0], [46.6, 3567.0], [46.7, 3571.0], [46.8, 3574.0], [46.9, 3609.0], [47.0, 3612.0], [47.1, 3621.0], [47.2, 3622.0], [47.3, 3635.0], [47.4, 3636.0], [47.5, 3637.0], [47.6, 3641.0], [47.7, 3646.0], [47.8, 3648.0], [47.9, 3654.0], [48.0, 3658.0], [48.1, 3666.0], [48.2, 3673.0], [48.3, 3678.0], [48.4, 3691.0], [48.5, 3722.0], [48.6, 3725.0], [48.7, 3725.0], [48.8, 3737.0], [48.9, 3737.0], [49.0, 3755.0], [49.1, 3765.0], [49.2, 3773.0], [49.3, 3775.0], [49.4, 3775.0], [49.5, 3780.0], [49.6, 3783.0], [49.7, 3791.0], [49.8, 3800.0], [49.9, 3802.0], [50.0, 3806.0], [50.1, 3818.0], [50.2, 3820.0], [50.3, 3820.0], [50.4, 3821.0], [50.5, 3821.0], [50.6, 3823.0], [50.7, 3825.0], [50.8, 3825.0], [50.9, 3835.0], [51.0, 3836.0], [51.1, 3837.0], [51.2, 3838.0], [51.3, 3842.0], [51.4, 3842.0], [51.5, 3844.0], [51.6, 3844.0], [51.7, 3849.0], [51.8, 3870.0], [51.9, 3873.0], [52.0, 3878.0], [52.1, 3888.0], [52.2, 3890.0], [52.3, 3894.0], [52.4, 3897.0], [52.5, 3898.0], [52.6, 3898.0], [52.7, 3905.0], [52.8, 3905.0], [52.9, 3905.0], [53.0, 3906.0], [53.1, 3907.0], [53.2, 3908.0], [53.3, 3908.0], [53.4, 3908.0], [53.5, 3910.0], [53.6, 3916.0], [53.7, 3917.0], [53.8, 3920.0], [53.9, 3920.0], [54.0, 3921.0], [54.1, 3923.0], [54.2, 3929.0], [54.3, 3929.0], [54.4, 3930.0], [54.5, 3930.0], [54.6, 3930.0], [54.7, 3932.0], [54.8, 3933.0], [54.9, 3935.0], [55.0, 3935.0], [55.1, 3939.0], [55.2, 3941.0], [55.3, 3942.0], [55.4, 3944.0], [55.5, 3945.0], [55.6, 3951.0], [55.7, 3952.0], [55.8, 3955.0], [55.9, 3961.0], [56.0, 3964.0], [56.1, 3966.0], [56.2, 3968.0], [56.3, 3972.0], [56.4, 3973.0], [56.5, 3973.0], [56.6, 3976.0], [56.7, 3978.0], [56.8, 3979.0], [56.9, 3980.0], [57.0, 3983.0], [57.1, 3984.0], [57.2, 3985.0], [57.3, 3989.0], [57.4, 3989.0], [57.5, 3991.0], [57.6, 3991.0], [57.7, 3993.0], [57.8, 3994.0], [57.9, 3996.0], [58.0, 3998.0], [58.1, 4003.0], [58.2, 4012.0], [58.3, 4012.0], [58.4, 4016.0], [58.5, 4020.0], [58.6, 4021.0], [58.7, 4023.0], [58.8, 4023.0], [58.9, 4023.0], [59.0, 4024.0], [59.1, 4025.0], [59.2, 4026.0], [59.3, 4029.0], [59.4, 4031.0], [59.5, 4038.0], [59.6, 4040.0], [59.7, 4041.0], [59.8, 4041.0], [59.9, 4042.0], [60.0, 4043.0], [60.1, 4043.0], [60.2, 4047.0], [60.3, 4049.0], [60.4, 4050.0], [60.5, 4053.0], [60.6, 4055.0], [60.7, 4057.0], [60.8, 4057.0], [60.9, 4059.0], [61.0, 4060.0], [61.1, 4060.0], [61.2, 4062.0], [61.3, 4067.0], [61.4, 4068.0], [61.5, 4068.0], [61.6, 4071.0], [61.7, 4072.0], [61.8, 4073.0], [61.9, 4074.0], [62.0, 4075.0], [62.1, 4076.0], [62.2, 4076.0], [62.3, 4076.0], [62.4, 4078.0], [62.5, 4079.0], [62.6, 4080.0], [62.7, 4080.0], [62.8, 4081.0], [62.9, 4085.0], [63.0, 4086.0], [63.1, 4090.0], [63.2, 4091.0], [63.3, 4092.0], [63.4, 4093.0], [63.5, 4097.0], [63.6, 4099.0], [63.7, 4107.0], [63.8, 4108.0], [63.9, 4109.0], [64.0, 4109.0], [64.1, 4112.0], [64.2, 4113.0], [64.3, 4116.0], [64.4, 4118.0], [64.5, 4125.0], [64.6, 4126.0], [64.7, 4126.0], [64.8, 4128.0], [64.9, 4128.0], [65.0, 4129.0], [65.1, 4131.0], [65.2, 4134.0], [65.3, 4137.0], [65.4, 4142.0], [65.5, 4146.0], [65.6, 4148.0], [65.7, 4149.0], [65.8, 4149.0], [65.9, 4153.0], [66.0, 4153.0], [66.1, 4155.0], [66.2, 4157.0], [66.3, 4157.0], [66.4, 4167.0], [66.5, 4168.0], [66.6, 4168.0], [66.7, 4169.0], [66.8, 4169.0], [66.9, 4170.0], [67.0, 4173.0], [67.1, 4175.0], [67.2, 4176.0], [67.3, 4178.0], [67.4, 4179.0], [67.5, 4180.0], [67.6, 4180.0], [67.7, 4181.0], [67.8, 4185.0], [67.9, 4185.0], [68.0, 4185.0], [68.1, 4186.0], [68.2, 4187.0], [68.3, 4187.0], [68.4, 4191.0], [68.5, 4191.0], [68.6, 4191.0], [68.7, 4192.0], [68.8, 4195.0], [68.9, 4196.0], [69.0, 4197.0], [69.1, 4199.0], [69.2, 4202.0], [69.3, 4209.0], [69.4, 4209.0], [69.5, 4210.0], [69.6, 4210.0], [69.7, 4211.0], [69.8, 4211.0], [69.9, 4212.0], [70.0, 4213.0], [70.1, 4216.0], [70.2, 4218.0], [70.3, 4223.0], [70.4, 4227.0], [70.5, 4229.0], [70.6, 4230.0], [70.7, 4231.0], [70.8, 4231.0], [70.9, 4237.0], [71.0, 4239.0], [71.1, 4242.0], [71.2, 4242.0], [71.3, 4243.0], [71.4, 4243.0], [71.5, 4243.0], [71.6, 4244.0], [71.7, 4245.0], [71.8, 4246.0], [71.9, 4250.0], [72.0, 4252.0], [72.1, 4254.0], [72.2, 4254.0], [72.3, 4255.0], [72.4, 4256.0], [72.5, 4257.0], [72.6, 4258.0], [72.7, 4258.0], [72.8, 4266.0], [72.9, 4267.0], [73.0, 4268.0], [73.1, 4270.0], [73.2, 4271.0], [73.3, 4271.0], [73.4, 4271.0], [73.5, 4273.0], [73.6, 4273.0], [73.7, 4273.0], [73.8, 4274.0], [73.9, 4275.0], [74.0, 4276.0], [74.1, 4277.0], [74.2, 4280.0], [74.3, 4283.0], [74.4, 4284.0], [74.5, 4284.0], [74.6, 4285.0], [74.7, 4286.0], [74.8, 4287.0], [74.9, 4287.0], [75.0, 4288.0], [75.1, 4289.0], [75.2, 4291.0], [75.3, 4291.0], [75.4, 4295.0], [75.5, 4295.0], [75.6, 4297.0], [75.7, 4297.0], [75.8, 4298.0], [75.9, 4298.0], [76.0, 4299.0], [76.1, 4300.0], [76.2, 4300.0], [76.3, 4301.0], [76.4, 4303.0], [76.5, 4304.0], [76.6, 4311.0], [76.7, 4313.0], [76.8, 4318.0], [76.9, 4318.0], [77.0, 4319.0], [77.1, 4321.0], [77.2, 4321.0], [77.3, 4322.0], [77.4, 4322.0], [77.5, 4322.0], [77.6, 4326.0], [77.7, 4326.0], [77.8, 4327.0], [77.9, 4329.0], [78.0, 4331.0], [78.1, 4332.0], [78.2, 4336.0], [78.3, 4338.0], [78.4, 4339.0], [78.5, 4340.0], [78.6, 4340.0], [78.7, 4342.0], [78.8, 4343.0], [78.9, 4343.0], [79.0, 4346.0], [79.1, 4348.0], [79.2, 4364.0], [79.3, 4364.0], [79.4, 4366.0], [79.5, 4368.0], [79.6, 4368.0], [79.7, 4368.0], [79.8, 4369.0], [79.9, 4374.0], [80.0, 4378.0], [80.1, 4378.0], [80.2, 4380.0], [80.3, 4381.0], [80.4, 4381.0], [80.5, 4387.0], [80.6, 4387.0], [80.7, 4387.0], [80.8, 4389.0], [80.9, 4391.0], [81.0, 4392.0], [81.1, 4392.0], [81.2, 4393.0], [81.3, 4393.0], [81.4, 4393.0], [81.5, 4395.0], [81.6, 4396.0], [81.7, 4398.0], [81.8, 4401.0], [81.9, 4402.0], [82.0, 4404.0], [82.1, 4404.0], [82.2, 4405.0], [82.3, 4406.0], [82.4, 4406.0], [82.5, 4406.0], [82.6, 4420.0], [82.7, 4421.0], [82.8, 4422.0], [82.9, 4422.0], [83.0, 4423.0], [83.1, 4425.0], [83.2, 4425.0], [83.3, 4427.0], [83.4, 4427.0], [83.5, 4430.0], [83.6, 4430.0], [83.7, 4432.0], [83.8, 4432.0], [83.9, 4432.0], [84.0, 4435.0], [84.1, 4435.0], [84.2, 4435.0], [84.3, 4436.0], [84.4, 4437.0], [84.5, 4437.0], [84.6, 4439.0], [84.7, 4441.0], [84.8, 4446.0], [84.9, 4447.0], [85.0, 4450.0], [85.1, 4454.0], [85.2, 4454.0], [85.3, 4455.0], [85.4, 4456.0], [85.5, 4457.0], [85.6, 4458.0], [85.7, 4458.0], [85.8, 4459.0], [85.9, 4459.0], [86.0, 4460.0], [86.1, 4460.0], [86.2, 4460.0], [86.3, 4460.0], [86.4, 4461.0], [86.5, 4462.0], [86.6, 4462.0], [86.7, 4469.0], [86.8, 4471.0], [86.9, 4476.0], [87.0, 4479.0], [87.1, 4488.0], [87.2, 4493.0], [87.3, 4514.0], [87.4, 4537.0], [87.5, 4538.0], [87.6, 4548.0], [87.7, 4559.0], [87.8, 4584.0], [87.9, 4595.0], [88.0, 4597.0], [88.1, 4614.0], [88.2, 4664.0], [88.3, 4683.0], [88.4, 4684.0], [88.5, 4685.0], [88.6, 4692.0], [88.7, 4711.0], [88.8, 4716.0], [88.9, 4718.0], [89.0, 4719.0], [89.1, 4727.0], [89.2, 4728.0], [89.3, 4735.0], [89.4, 4745.0], [89.5, 4745.0], [89.6, 4746.0], [89.7, 4754.0], [89.8, 4757.0], [89.9, 4759.0], [90.0, 4759.0], [90.1, 4766.0], [90.2, 4775.0], [90.3, 4779.0], [90.4, 4780.0], [90.5, 4781.0], [90.6, 4783.0], [90.7, 4783.0], [90.8, 4783.0], [90.9, 4783.0], [91.0, 4789.0], [91.1, 4789.0], [91.2, 4791.0], [91.3, 4793.0], [91.4, 4793.0], [91.5, 4794.0], [91.6, 4863.0], [91.7, 4877.0], [91.8, 4938.0], [91.9, 4939.0], [92.0, 4939.0], [92.1, 4940.0], [92.2, 4943.0], [92.3, 4946.0], [92.4, 4946.0], [92.5, 4947.0], [92.6, 4949.0], [92.7, 4949.0], [92.8, 4950.0], [92.9, 4950.0], [93.0, 4953.0], [93.1, 4967.0], [93.2, 4970.0], [93.3, 4985.0], [93.4, 4988.0], [93.5, 4994.0], [93.6, 4998.0], [93.7, 5005.0], [93.8, 5006.0], [93.9, 5006.0], [94.0, 5006.0], [94.1, 5007.0], [94.2, 5009.0], [94.3, 5012.0], [94.4, 5020.0], [94.5, 5021.0], [94.6, 5022.0], [94.7, 5023.0], [94.8, 5023.0], [94.9, 5023.0], [95.0, 5023.0], [95.1, 5027.0], [95.2, 5030.0], [95.3, 5039.0], [95.4, 5040.0], [95.5, 5045.0], [95.6, 5050.0], [95.7, 5050.0], [95.8, 5053.0], [95.9, 5100.0], [96.0, 5104.0], [96.1, 5105.0], [96.2, 5122.0], [96.3, 5127.0], [96.4, 5128.0], [96.5, 5131.0], [96.6, 5132.0], [96.7, 5133.0], [96.8, 5133.0], [96.9, 5134.0], [97.0, 5134.0], [97.1, 5134.0], [97.2, 5135.0], [97.3, 5135.0], [97.4, 5135.0], [97.5, 5136.0], [97.6, 5136.0], [97.7, 5136.0], [97.8, 5137.0], [97.9, 5138.0], [98.0, 5140.0], [98.1, 5140.0], [98.2, 5142.0], [98.3, 5142.0], [98.4, 5143.0], [98.5, 5150.0], [98.6, 5164.0], [98.7, 5171.0], [98.8, 5171.0], [98.9, 5175.0], [99.0, 5175.0], [99.1, 5242.0], [99.2, 5250.0], [99.3, 5252.0], [99.4, 5254.0], [99.5, 5254.0], [99.6, 5256.0], [99.7, 5256.0], [99.8, 5327.0], [99.9, 5341.0]], "isOverall": false, "label": "Actuator-health", "isController": false}, {"data": [[0.0, 816.0], [0.1, 836.0], [0.2, 839.0], [0.3, 839.0], [0.4, 856.0], [0.5, 862.0], [0.6, 866.0], [0.7, 876.0], [0.8, 876.0], [0.9, 878.0], [1.0, 879.0], [1.1, 888.0], [1.2, 892.0], [1.3, 892.0], [1.4, 894.0], [1.5, 897.0], [1.6, 898.0], [1.7, 898.0], [1.8, 907.0], [1.9, 913.0], [2.0, 914.0], [2.1, 920.0], [2.2, 933.0], [2.3, 944.0], [2.4, 950.0], [2.5, 952.0], [2.6, 955.0], [2.7, 957.0], [2.8, 966.0], [2.9, 966.0], [3.0, 989.0], [3.1, 999.0], [3.2, 1002.0], [3.3, 1005.0], [3.4, 1021.0], [3.5, 1021.0], [3.6, 1022.0], [3.7, 1026.0], [3.8, 1045.0], [3.9, 1046.0], [4.0, 1048.0], [4.1, 1052.0], [4.2, 1055.0], [4.3, 1055.0], [4.4, 1057.0], [4.5, 1058.0], [4.6, 1064.0], [4.7, 1067.0], [4.8, 1067.0], [4.9, 1069.0], [5.0, 1071.0], [5.1, 1071.0], [5.2, 1073.0], [5.3, 1077.0], [5.4, 1083.0], [5.5, 1089.0], [5.6, 1093.0], [5.7, 1094.0], [5.8, 1102.0], [5.9, 1102.0], [6.0, 1105.0], [6.1, 1108.0], [6.2, 1109.0], [6.3, 1109.0], [6.4, 1110.0], [6.5, 1113.0], [6.6, 1113.0], [6.7, 1114.0], [6.8, 1115.0], [6.9, 1117.0], [7.0, 1118.0], [7.1, 1120.0], [7.2, 1130.0], [7.3, 1130.0], [7.4, 1135.0], [7.5, 1137.0], [7.6, 1139.0], [7.7, 1141.0], [7.8, 1144.0], [7.9, 1150.0], [8.0, 1151.0], [8.1, 1160.0], [8.2, 1174.0], [8.3, 1181.0], [8.4, 1183.0], [8.5, 1184.0], [8.6, 1187.0], [8.7, 1193.0], [8.8, 1194.0], [8.9, 1194.0], [9.0, 1197.0], [9.1, 1198.0], [9.2, 1199.0], [9.3, 1202.0], [9.4, 1212.0], [9.5, 1213.0], [9.6, 1219.0], [9.7, 1220.0], [9.8, 1223.0], [9.9, 1229.0], [10.0, 1232.0], [10.1, 1236.0], [10.2, 1238.0], [10.3, 1241.0], [10.4, 1251.0], [10.5, 1262.0], [10.6, 1266.0], [10.7, 1269.0], [10.8, 1270.0], [10.9, 1272.0], [11.0, 1272.0], [11.1, 1274.0], [11.2, 1277.0], [11.3, 1279.0], [11.4, 1282.0], [11.5, 1282.0], [11.6, 1282.0], [11.7, 1286.0], [11.8, 1287.0], [11.9, 1296.0], [12.0, 1298.0], [12.1, 1298.0], [12.2, 1299.0], [12.3, 1301.0], [12.4, 1302.0], [12.5, 1303.0], [12.6, 1309.0], [12.7, 1314.0], [12.8, 1315.0], [12.9, 1321.0], [13.0, 1321.0], [13.1, 1322.0], [13.2, 1322.0], [13.3, 1323.0], [13.4, 1323.0], [13.5, 1325.0], [13.6, 1325.0], [13.7, 1325.0], [13.8, 1326.0], [13.9, 1327.0], [14.0, 1329.0], [14.1, 1329.0], [14.2, 1332.0], [14.3, 1335.0], [14.4, 1335.0], [14.5, 1338.0], [14.6, 1339.0], [14.7, 1340.0], [14.8, 1340.0], [14.9, 1342.0], [15.0, 1343.0], [15.1, 1347.0], [15.2, 1347.0], [15.3, 1349.0], [15.4, 1349.0], [15.5, 1353.0], [15.6, 1356.0], [15.7, 1356.0], [15.8, 1361.0], [15.9, 1361.0], [16.0, 1362.0], [16.1, 1367.0], [16.2, 1368.0], [16.3, 1368.0], [16.4, 1369.0], [16.5, 1370.0], [16.6, 1373.0], [16.7, 1373.0], [16.8, 1374.0], [16.9, 1377.0], [17.0, 1377.0], [17.1, 1377.0], [17.2, 1379.0], [17.3, 1380.0], [17.4, 1384.0], [17.5, 1384.0], [17.6, 1387.0], [17.7, 1389.0], [17.8, 1395.0], [17.9, 1395.0], [18.0, 1397.0], [18.1, 1397.0], [18.2, 1406.0], [18.3, 1407.0], [18.4, 1408.0], [18.5, 1410.0], [18.6, 1411.0], [18.7, 1414.0], [18.8, 1415.0], [18.9, 1417.0], [19.0, 1422.0], [19.1, 1423.0], [19.2, 1425.0], [19.3, 1434.0], [19.4, 1436.0], [19.5, 1437.0], [19.6, 1442.0], [19.7, 1445.0], [19.8, 1453.0], [19.9, 1453.0], [20.0, 1455.0], [20.1, 1459.0], [20.2, 1463.0], [20.3, 1470.0], [20.4, 1476.0], [20.5, 1491.0], [20.6, 1495.0], [20.7, 1496.0], [20.8, 1503.0], [20.9, 1503.0], [21.0, 1509.0], [21.1, 1514.0], [21.2, 1514.0], [21.3, 1522.0], [21.4, 1531.0], [21.5, 1531.0], [21.6, 1534.0], [21.7, 1543.0], [21.8, 1545.0], [21.9, 1549.0], [22.0, 1550.0], [22.1, 1550.0], [22.2, 1552.0], [22.3, 1554.0], [22.4, 1556.0], [22.5, 1557.0], [22.6, 1559.0], [22.7, 1561.0], [22.8, 1562.0], [22.9, 1563.0], [23.0, 1564.0], [23.1, 1564.0], [23.2, 1564.0], [23.3, 1566.0], [23.4, 1566.0], [23.5, 1570.0], [23.6, 1571.0], [23.7, 1572.0], [23.8, 1573.0], [23.9, 1574.0], [24.0, 1579.0], [24.1, 1581.0], [24.2, 1583.0], [24.3, 1583.0], [24.4, 1586.0], [24.5, 1588.0], [24.6, 1591.0], [24.7, 1592.0], [24.8, 1596.0], [24.9, 1597.0], [25.0, 1597.0], [25.1, 1598.0], [25.2, 1598.0], [25.3, 1599.0], [25.4, 1599.0], [25.5, 1602.0], [25.6, 1602.0], [25.7, 1602.0], [25.8, 1603.0], [25.9, 1605.0], [26.0, 1606.0], [26.1, 1607.0], [26.2, 1608.0], [26.3, 1609.0], [26.4, 1612.0], [26.5, 1613.0], [26.6, 1615.0], [26.7, 1615.0], [26.8, 1616.0], [26.9, 1619.0], [27.0, 1620.0], [27.1, 1620.0], [27.2, 1623.0], [27.3, 1623.0], [27.4, 1625.0], [27.5, 1627.0], [27.6, 1628.0], [27.7, 1629.0], [27.8, 1632.0], [27.9, 1637.0], [28.0, 1639.0], [28.1, 1641.0], [28.2, 1642.0], [28.3, 1647.0], [28.4, 1648.0], [28.5, 1648.0], [28.6, 1651.0], [28.7, 1658.0], [28.8, 1659.0], [28.9, 1660.0], [29.0, 1662.0], [29.1, 1663.0], [29.2, 1666.0], [29.3, 1666.0], [29.4, 1669.0], [29.5, 1673.0], [29.6, 1674.0], [29.7, 1676.0], [29.8, 1676.0], [29.9, 1677.0], [30.0, 1677.0], [30.1, 1677.0], [30.2, 1679.0], [30.3, 1681.0], [30.4, 1681.0], [30.5, 1682.0], [30.6, 1682.0], [30.7, 1684.0], [30.8, 1686.0], [30.9, 1689.0], [31.0, 1691.0], [31.1, 1693.0], [31.2, 1697.0], [31.3, 1698.0], [31.4, 1699.0], [31.5, 1700.0], [31.6, 1701.0], [31.7, 1702.0], [31.8, 1705.0], [31.9, 1705.0], [32.0, 1707.0], [32.1, 1707.0], [32.2, 1708.0], [32.3, 1708.0], [32.4, 1709.0], [32.5, 1710.0], [32.6, 1717.0], [32.7, 1721.0], [32.8, 1726.0], [32.9, 1726.0], [33.0, 1728.0], [33.1, 1728.0], [33.2, 1730.0], [33.3, 1733.0], [33.4, 1733.0], [33.5, 1735.0], [33.6, 1739.0], [33.7, 1739.0], [33.8, 1740.0], [33.9, 1742.0], [34.0, 1745.0], [34.1, 1747.0], [34.2, 1748.0], [34.3, 1749.0], [34.4, 1750.0], [34.5, 1750.0], [34.6, 1750.0], [34.7, 1752.0], [34.8, 1753.0], [34.9, 1754.0], [35.0, 1755.0], [35.1, 1757.0], [35.2, 1757.0], [35.3, 1759.0], [35.4, 1761.0], [35.5, 1762.0], [35.6, 1763.0], [35.7, 1764.0], [35.8, 1766.0], [35.9, 1767.0], [36.0, 1767.0], [36.1, 1772.0], [36.2, 1773.0], [36.3, 1773.0], [36.4, 1773.0], [36.5, 1776.0], [36.6, 1778.0], [36.7, 1779.0], [36.8, 1779.0], [36.9, 1779.0], [37.0, 1779.0], [37.1, 1782.0], [37.2, 1782.0], [37.3, 1784.0], [37.4, 1785.0], [37.5, 1786.0], [37.6, 1786.0], [37.7, 1788.0], [37.8, 1791.0], [37.9, 1791.0], [38.0, 1793.0], [38.1, 1794.0], [38.2, 1797.0], [38.3, 1798.0], [38.4, 1799.0], [38.5, 1800.0], [38.6, 1801.0], [38.7, 1804.0], [38.8, 1804.0], [38.9, 1805.0], [39.0, 1807.0], [39.1, 1810.0], [39.2, 1811.0], [39.3, 1813.0], [39.4, 1814.0], [39.5, 1815.0], [39.6, 1819.0], [39.7, 1819.0], [39.8, 1820.0], [39.9, 1826.0], [40.0, 1827.0], [40.1, 1830.0], [40.2, 1831.0], [40.3, 1831.0], [40.4, 1833.0], [40.5, 1833.0], [40.6, 1834.0], [40.7, 1834.0], [40.8, 1839.0], [40.9, 1843.0], [41.0, 1846.0], [41.1, 1850.0], [41.2, 1850.0], [41.3, 1851.0], [41.4, 1853.0], [41.5, 1853.0], [41.6, 1855.0], [41.7, 1858.0], [41.8, 1860.0], [41.9, 1860.0], [42.0, 1863.0], [42.1, 1865.0], [42.2, 1865.0], [42.3, 1868.0], [42.4, 1869.0], [42.5, 1870.0], [42.6, 1870.0], [42.7, 1872.0], [42.8, 1872.0], [42.9, 1873.0], [43.0, 1875.0], [43.1, 1876.0], [43.2, 1876.0], [43.3, 1877.0], [43.4, 1878.0], [43.5, 1881.0], [43.6, 1887.0], [43.7, 1889.0], [43.8, 1889.0], [43.9, 1891.0], [44.0, 1891.0], [44.1, 1892.0], [44.2, 1896.0], [44.3, 1898.0], [44.4, 1899.0], [44.5, 1902.0], [44.6, 1903.0], [44.7, 1904.0], [44.8, 1905.0], [44.9, 1908.0], [45.0, 1908.0], [45.1, 1908.0], [45.2, 1908.0], [45.3, 1909.0], [45.4, 1909.0], [45.5, 1910.0], [45.6, 1913.0], [45.7, 1913.0], [45.8, 1915.0], [45.9, 1916.0], [46.0, 1918.0], [46.1, 1920.0], [46.2, 1920.0], [46.3, 1923.0], [46.4, 1925.0], [46.5, 1926.0], [46.6, 1926.0], [46.7, 1927.0], [46.8, 1928.0], [46.9, 1929.0], [47.0, 1929.0], [47.1, 1930.0], [47.2, 1930.0], [47.3, 1931.0], [47.4, 1931.0], [47.5, 1931.0], [47.6, 1932.0], [47.7, 1932.0], [47.8, 1932.0], [47.9, 1933.0], [48.0, 1933.0], [48.1, 1933.0], [48.2, 1934.0], [48.3, 1938.0], [48.4, 1938.0], [48.5, 1939.0], [48.6, 1939.0], [48.7, 1940.0], [48.8, 1943.0], [48.9, 1943.0], [49.0, 1943.0], [49.1, 1943.0], [49.2, 1944.0], [49.3, 1945.0], [49.4, 1947.0], [49.5, 1947.0], [49.6, 1948.0], [49.7, 1948.0], [49.8, 1948.0], [49.9, 1948.0], [50.0, 1950.0], [50.1, 1951.0], [50.2, 1951.0], [50.3, 1952.0], [50.4, 1952.0], [50.5, 1954.0], [50.6, 1955.0], [50.7, 1956.0], [50.8, 1957.0], [50.9, 1960.0], [51.0, 1960.0], [51.1, 1961.0], [51.2, 1961.0], [51.3, 1961.0], [51.4, 1963.0], [51.5, 1966.0], [51.6, 1967.0], [51.7, 1968.0], [51.8, 1969.0], [51.9, 1970.0], [52.0, 1972.0], [52.1, 1973.0], [52.2, 1975.0], [52.3, 1976.0], [52.4, 1979.0], [52.5, 1979.0], [52.6, 1979.0], [52.7, 1980.0], [52.8, 1984.0], [52.9, 1986.0], [53.0, 1987.0], [53.1, 1987.0], [53.2, 1987.0], [53.3, 1988.0], [53.4, 1988.0], [53.5, 1989.0], [53.6, 1989.0], [53.7, 1989.0], [53.8, 1991.0], [53.9, 1992.0], [54.0, 1993.0], [54.1, 1994.0], [54.2, 1994.0], [54.3, 1994.0], [54.4, 1996.0], [54.5, 1999.0], [54.6, 2000.0], [54.7, 2001.0], [54.8, 2002.0], [54.9, 2003.0], [55.0, 2004.0], [55.1, 2005.0], [55.2, 2006.0], [55.3, 2008.0], [55.4, 2008.0], [55.5, 2008.0], [55.6, 2008.0], [55.7, 2009.0], [55.8, 2009.0], [55.9, 2009.0], [56.0, 2010.0], [56.1, 2011.0], [56.2, 2012.0], [56.3, 2014.0], [56.4, 2015.0], [56.5, 2016.0], [56.6, 2016.0], [56.7, 2017.0], [56.8, 2017.0], [56.9, 2018.0], [57.0, 2019.0], [57.1, 2020.0], [57.2, 2021.0], [57.3, 2021.0], [57.4, 2022.0], [57.5, 2024.0], [57.6, 2024.0], [57.7, 2024.0], [57.8, 2025.0], [57.9, 2025.0], [58.0, 2025.0], [58.1, 2027.0], [58.2, 2028.0], [58.3, 2029.0], [58.4, 2030.0], [58.5, 2030.0], [58.6, 2031.0], [58.7, 2031.0], [58.8, 2032.0], [58.9, 2033.0], [59.0, 2036.0], [59.1, 2038.0], [59.2, 2039.0], [59.3, 2040.0], [59.4, 2040.0], [59.5, 2041.0], [59.6, 2041.0], [59.7, 2044.0], [59.8, 2044.0], [59.9, 2045.0], [60.0, 2045.0], [60.1, 2045.0], [60.2, 2046.0], [60.3, 2047.0], [60.4, 2048.0], [60.5, 2048.0], [60.6, 2049.0], [60.7, 2049.0], [60.8, 2049.0], [60.9, 2052.0], [61.0, 2052.0], [61.1, 2053.0], [61.2, 2054.0], [61.3, 2055.0], [61.4, 2058.0], [61.5, 2060.0], [61.6, 2060.0], [61.7, 2060.0], [61.8, 2060.0], [61.9, 2062.0], [62.0, 2063.0], [62.1, 2063.0], [62.2, 2064.0], [62.3, 2064.0], [62.4, 2065.0], [62.5, 2065.0], [62.6, 2065.0], [62.7, 2065.0], [62.8, 2067.0], [62.9, 2069.0], [63.0, 2069.0], [63.1, 2069.0], [63.2, 2070.0], [63.3, 2071.0], [63.4, 2072.0], [63.5, 2073.0], [63.6, 2076.0], [63.7, 2077.0], [63.8, 2078.0], [63.9, 2078.0], [64.0, 2079.0], [64.1, 2079.0], [64.2, 2080.0], [64.3, 2081.0], [64.4, 2082.0], [64.5, 2082.0], [64.6, 2083.0], [64.7, 2084.0], [64.8, 2084.0], [64.9, 2085.0], [65.0, 2086.0], [65.1, 2088.0], [65.2, 2088.0], [65.3, 2089.0], [65.4, 2090.0], [65.5, 2090.0], [65.6, 2093.0], [65.7, 2093.0], [65.8, 2094.0], [65.9, 2094.0], [66.0, 2094.0], [66.1, 2095.0], [66.2, 2095.0], [66.3, 2095.0], [66.4, 2095.0], [66.5, 2097.0], [66.6, 2097.0], [66.7, 2098.0], [66.8, 2098.0], [66.9, 2099.0], [67.0, 2100.0], [67.1, 2100.0], [67.2, 2102.0], [67.3, 2103.0], [67.4, 2103.0], [67.5, 2103.0], [67.6, 2104.0], [67.7, 2106.0], [67.8, 2106.0], [67.9, 2108.0], [68.0, 2110.0], [68.1, 2112.0], [68.2, 2113.0], [68.3, 2113.0], [68.4, 2114.0], [68.5, 2114.0], [68.6, 2117.0], [68.7, 2118.0], [68.8, 2118.0], [68.9, 2119.0], [69.0, 2120.0], [69.1, 2123.0], [69.2, 2124.0], [69.3, 2125.0], [69.4, 2125.0], [69.5, 2126.0], [69.6, 2126.0], [69.7, 2127.0], [69.8, 2127.0], [69.9, 2127.0], [70.0, 2129.0], [70.1, 2131.0], [70.2, 2132.0], [70.3, 2135.0], [70.4, 2136.0], [70.5, 2136.0], [70.6, 2137.0], [70.7, 2139.0], [70.8, 2140.0], [70.9, 2142.0], [71.0, 2142.0], [71.1, 2143.0], [71.2, 2144.0], [71.3, 2148.0], [71.4, 2152.0], [71.5, 2153.0], [71.6, 2153.0], [71.7, 2154.0], [71.8, 2156.0], [71.9, 2156.0], [72.0, 2157.0], [72.1, 2158.0], [72.2, 2163.0], [72.3, 2164.0], [72.4, 2167.0], [72.5, 2167.0], [72.6, 2169.0], [72.7, 2169.0], [72.8, 2170.0], [72.9, 2171.0], [73.0, 2174.0], [73.1, 2175.0], [73.2, 2176.0], [73.3, 2177.0], [73.4, 2178.0], [73.5, 2179.0], [73.6, 2179.0], [73.7, 2180.0], [73.8, 2182.0], [73.9, 2183.0], [74.0, 2184.0], [74.1, 2184.0], [74.2, 2185.0], [74.3, 2186.0], [74.4, 2193.0], [74.5, 2194.0], [74.6, 2195.0], [74.7, 2196.0], [74.8, 2196.0], [74.9, 2196.0], [75.0, 2198.0], [75.1, 2201.0], [75.2, 2201.0], [75.3, 2202.0], [75.4, 2203.0], [75.5, 2204.0], [75.6, 2206.0], [75.7, 2207.0], [75.8, 2208.0], [75.9, 2212.0], [76.0, 2212.0], [76.1, 2212.0], [76.2, 2213.0], [76.3, 2214.0], [76.4, 2215.0], [76.5, 2216.0], [76.6, 2222.0], [76.7, 2223.0], [76.8, 2223.0], [76.9, 2224.0], [77.0, 2225.0], [77.1, 2226.0], [77.2, 2228.0], [77.3, 2229.0], [77.4, 2230.0], [77.5, 2231.0], [77.6, 2233.0], [77.7, 2234.0], [77.8, 2235.0], [77.9, 2235.0], [78.0, 2236.0], [78.1, 2237.0], [78.2, 2238.0], [78.3, 2240.0], [78.4, 2241.0], [78.5, 2244.0], [78.6, 2244.0], [78.7, 2244.0], [78.8, 2245.0], [78.9, 2246.0], [79.0, 2248.0], [79.1, 2249.0], [79.2, 2251.0], [79.3, 2251.0], [79.4, 2255.0], [79.5, 2255.0], [79.6, 2255.0], [79.7, 2261.0], [79.8, 2261.0], [79.9, 2262.0], [80.0, 2265.0], [80.1, 2267.0], [80.2, 2267.0], [80.3, 2267.0], [80.4, 2269.0], [80.5, 2269.0], [80.6, 2272.0], [80.7, 2274.0], [80.8, 2274.0], [80.9, 2277.0], [81.0, 2279.0], [81.1, 2280.0], [81.2, 2281.0], [81.3, 2281.0], [81.4, 2284.0], [81.5, 2285.0], [81.6, 2285.0], [81.7, 2290.0], [81.8, 2294.0], [81.9, 2294.0], [82.0, 2296.0], [82.1, 2297.0], [82.2, 2298.0], [82.3, 2300.0], [82.4, 2302.0], [82.5, 2303.0], [82.6, 2305.0], [82.7, 2306.0], [82.8, 2307.0], [82.9, 2308.0], [83.0, 2311.0], [83.1, 2311.0], [83.2, 2313.0], [83.3, 2317.0], [83.4, 2323.0], [83.5, 2324.0], [83.6, 2324.0], [83.7, 2324.0], [83.8, 2326.0], [83.9, 2326.0], [84.0, 2330.0], [84.1, 2330.0], [84.2, 2333.0], [84.3, 2333.0], [84.4, 2342.0], [84.5, 2344.0], [84.6, 2346.0], [84.7, 2347.0], [84.8, 2348.0], [84.9, 2349.0], [85.0, 2351.0], [85.1, 2352.0], [85.2, 2353.0], [85.3, 2353.0], [85.4, 2354.0], [85.5, 2356.0], [85.6, 2359.0], [85.7, 2364.0], [85.8, 2364.0], [85.9, 2365.0], [86.0, 2365.0], [86.1, 2366.0], [86.2, 2367.0], [86.3, 2374.0], [86.4, 2375.0], [86.5, 2382.0], [86.6, 2385.0], [86.7, 2386.0], [86.8, 2393.0], [86.9, 2393.0], [87.0, 2394.0], [87.1, 2401.0], [87.2, 2403.0], [87.3, 2404.0], [87.4, 2405.0], [87.5, 2412.0], [87.6, 2414.0], [87.7, 2422.0], [87.8, 2422.0], [87.9, 2426.0], [88.0, 2427.0], [88.1, 2427.0], [88.2, 2427.0], [88.3, 2427.0], [88.4, 2428.0], [88.5, 2431.0], [88.6, 2434.0], [88.7, 2435.0], [88.8, 2438.0], [88.9, 2446.0], [89.0, 2450.0], [89.1, 2453.0], [89.2, 2456.0], [89.3, 2462.0], [89.4, 2468.0], [89.5, 2473.0], [89.6, 2473.0], [89.7, 2477.0], [89.8, 2483.0], [89.9, 2487.0], [90.0, 2488.0], [90.1, 2491.0], [90.2, 2493.0], [90.3, 2498.0], [90.4, 2506.0], [90.5, 2512.0], [90.6, 2512.0], [90.7, 2514.0], [90.8, 2517.0], [90.9, 2522.0], [91.0, 2530.0], [91.1, 2530.0], [91.2, 2531.0], [91.3, 2532.0], [91.4, 2536.0], [91.5, 2542.0], [91.6, 2542.0], [91.7, 2550.0], [91.8, 2552.0], [91.9, 2557.0], [92.0, 2559.0], [92.1, 2561.0], [92.2, 2568.0], [92.3, 2571.0], [92.4, 2572.0], [92.5, 2572.0], [92.6, 2584.0], [92.7, 2591.0], [92.8, 2594.0], [92.9, 2597.0], [93.0, 2601.0], [93.1, 2611.0], [93.2, 2615.0], [93.3, 2621.0], [93.4, 2624.0], [93.5, 2624.0], [93.6, 2630.0], [93.7, 2640.0], [93.8, 2643.0], [93.9, 2649.0], [94.0, 2655.0], [94.1, 2656.0], [94.2, 2663.0], [94.3, 2674.0], [94.4, 2676.0], [94.5, 2679.0], [94.6, 2695.0], [94.7, 2696.0], [94.8, 2702.0], [94.9, 2712.0], [95.0, 2714.0], [95.1, 2721.0], [95.2, 2727.0], [95.3, 2732.0], [95.4, 2736.0], [95.5, 2736.0], [95.6, 2742.0], [95.7, 2755.0], [95.8, 2766.0], [95.9, 2769.0], [96.0, 2794.0], [96.1, 2796.0], [96.2, 2811.0], [96.3, 2814.0], [96.4, 2825.0], [96.5, 2834.0], [96.6, 2836.0], [96.7, 2846.0], [96.8, 2850.0], [96.9, 2864.0], [97.0, 2876.0], [97.1, 2900.0], [97.2, 2923.0], [97.3, 2944.0], [97.4, 2958.0], [97.5, 2983.0], [97.6, 2993.0], [97.7, 3003.0], [97.8, 3010.0], [97.9, 3036.0], [98.0, 3057.0], [98.1, 3073.0], [98.2, 3091.0], [98.3, 3108.0], [98.4, 3120.0], [98.5, 3128.0], [98.6, 3136.0], [98.7, 3138.0], [98.8, 3169.0], [98.9, 3189.0], [99.0, 3208.0], [99.1, 3228.0], [99.2, 3248.0], [99.3, 3267.0], [99.4, 3286.0], [99.5, 3307.0], [99.6, 3320.0], [99.7, 3335.0], [99.8, 3355.0], [99.9, 3374.0]], "isOverall": false, "label": "Actuator-Info", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 800.0, "maxY": 124.0, "series": [{"data": [[2200.0, 1.0], [2500.0, 33.0], [2600.0, 37.0], [2700.0, 63.0], [2800.0, 36.0], [2900.0, 96.0], [3000.0, 79.0], [3100.0, 63.0], [3300.0, 29.0], [3200.0, 2.0], [3400.0, 22.0], [3500.0, 7.0], [3700.0, 13.0], [3600.0, 16.0], [3800.0, 29.0], [3900.0, 54.0], [4000.0, 56.0], [4100.0, 55.0], [4300.0, 58.0], [4200.0, 69.0], [4400.0, 55.0], [4600.0, 6.0], [4500.0, 8.0], [4700.0, 29.0], [4800.0, 2.0], [4900.0, 19.0], [5000.0, 22.0], [5100.0, 32.0], [5300.0, 2.0], [5200.0, 7.0]], "isOverall": false, "label": "Actuator-health", "isController": false}, {"data": [[800.0, 17.0], [900.0, 14.0], [1000.0, 27.0], [1100.0, 35.0], [1200.0, 30.0], [1300.0, 59.0], [1400.0, 25.0], [1500.0, 47.0], [1600.0, 60.0], [1700.0, 70.0], [1800.0, 60.0], [1900.0, 101.0], [2000.0, 124.0], [2100.0, 81.0], [2300.0, 48.0], [2200.0, 73.0], [2400.0, 33.0], [2500.0, 26.0], [2600.0, 18.0], [2700.0, 14.0], [2800.0, 9.0], [2900.0, 6.0], [3000.0, 6.0], [3100.0, 7.0], [3300.0, 5.0], [3200.0, 5.0]], "isOverall": false, "label": "Actuator-Info", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 5300.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 207.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1793.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 207.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1793.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 329.2009132420096, "minX": 1.68061998E12, "maxY": 802.68279970216, "series": [{"data": [[1.68062004E12, 329.2009132420096], [1.68061998E12, 802.68279970216]], "isOverall": false, "label": "Actuator", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68062004E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 860.6666666666666, "minX": 2.0, "maxY": 5295.5, "series": [{"data": [[2.0, 3172.0], [3.0, 3168.0], [4.0, 3167.0], [5.0, 3167.0], [6.0, 3164.0], [7.0, 3161.0], [8.0, 3148.0], [9.0, 3149.0], [10.0, 3172.0], [11.0, 3148.0], [12.0, 3141.0], [13.0, 3159.0], [14.0, 3157.0], [15.0, 3158.0], [16.0, 3156.0], [17.0, 3185.0], [18.0, 3186.0], [19.0, 3156.0], [20.0, 3184.0], [21.0, 3184.0], [22.0, 3186.0], [23.0, 3187.0], [24.0, 3187.0], [26.0, 3185.5], [27.0, 3192.0], [28.0, 3190.0], [29.0, 3087.0], [32.0, 2886.5], [35.0, 2987.0], [34.0, 2743.0], [37.0, 2580.0], [36.0, 2768.0], [39.0, 3185.0], [38.0, 2578.0], [41.0, 3183.0], [40.0, 3183.0], [43.0, 2764.0], [42.0, 2578.0], [45.0, 2765.0], [44.0, 2765.0], [47.0, 3078.0], [46.0, 3079.0], [49.0, 2739.0], [48.0, 3159.0], [51.0, 2739.0], [50.0, 2740.0], [53.0, 2550.0], [52.0, 3053.0], [55.0, 2550.0], [54.0, 3084.0], [57.0, 2736.0], [59.0, 2956.5], [61.0, 2528.0], [60.0, 2807.5], [62.0, 3061.0], [67.0, 2883.0], [65.0, 3153.0], [64.0, 3154.0], [71.0, 3054.0], [70.0, 2715.0], [69.0, 3053.0], [68.0, 3151.0], [75.0, 2707.0], [74.0, 2579.0], [73.0, 2864.0], [72.0, 2581.0], [79.0, 2689.0], [78.0, 2563.0], [77.0, 3131.0], [76.0, 3141.0], [83.0, 3028.0], [82.0, 3027.0], [81.0, 2692.0], [80.0, 2555.0], [86.0, 2568.0], [85.0, 3022.0], [84.0, 3020.0], [91.0, 2556.0], [90.0, 2534.0], [89.0, 3130.0], [88.0, 3114.0], [95.0, 2628.5], [93.0, 2701.0], [92.0, 2702.0], [98.0, 2699.0], [97.0, 2899.5], [103.0, 3109.0], [102.0, 3016.0], [101.0, 2699.0], [100.0, 3067.0], [106.0, 2526.0], [105.0, 3098.0], [104.0, 3110.0], [110.0, 2833.0], [108.0, 3048.5], [115.0, 2997.0], [114.0, 3003.0], [113.0, 2597.5], [112.0, 2524.0], [119.0, 2977.0], [118.0, 3085.0], [117.0, 2668.0], [116.0, 2996.0], [123.0, 2977.0], [122.0, 2970.0], [121.0, 2655.0], [120.0, 3080.0], [126.0, 3070.0], [125.0, 2656.0], [124.0, 2666.0], [134.0, 2931.0], [132.0, 3072.0], [129.0, 2653.0], [128.0, 3044.0], [143.0, 3071.0], [142.0, 2749.6666666666665], [139.0, 3076.0], [138.0, 2649.0], [137.0, 2985.0], [136.0, 2770.3333333333335], [151.0, 2620.0], [150.0, 2943.0], [149.0, 2944.0], [148.0, 3057.0], [147.0, 3057.0], [146.0, 2625.0], [145.0, 3063.0], [144.0, 2954.0], [159.0, 2636.0], [158.0, 3139.0], [157.0, 3141.0], [156.0, 3044.0], [155.0, 3044.0], [154.0, 2612.0], [153.0, 2616.0], [152.0, 3052.0], [167.0, 3124.0], [166.0, 3037.0], [165.0, 3037.0], [164.0, 2627.0], [163.0, 2627.0], [162.0, 2924.0], [161.0, 3046.0], [160.0, 2926.0], [175.0, 3120.0], [174.0, 3099.0], [173.0, 3100.0], [172.0, 2600.0], [171.0, 2606.0], [170.0, 2898.0], [169.0, 2899.0], [168.0, 3028.0], [183.0, 3024.0], [182.0, 3100.0], [181.0, 3106.0], [180.0, 3031.0], [179.0, 2889.0], [178.0, 2890.0], [177.0, 2884.0], [176.0, 3041.0], [191.0, 3012.0], [190.0, 2879.0], [189.0, 2881.0], [188.0, 3088.0], [187.0, 3089.0], [186.0, 3019.0], [185.0, 2890.0], [184.0, 3023.0], [199.0, 2997.0], [198.0, 3078.0], [197.0, 2867.0], [196.0, 3082.0], [195.0, 3083.0], [194.0, 3075.0], [193.0, 2874.0], [192.0, 3011.0], [207.0, 2852.0], [206.0, 2979.0], [205.0, 2979.0], [204.0, 2865.0], [203.0, 3106.0], [202.0, 2867.0], [201.0, 2858.0], [200.0, 2994.0], [215.0, 3075.0], [214.0, 3075.0], [213.0, 2837.0], [212.0, 2837.0], [211.0, 2977.0], [210.0, 2978.0], [209.0, 3084.0], [208.0, 3089.0], [223.0, 3060.0], [222.0, 3061.0], [221.0, 2844.0], [220.0, 2845.0], [219.0, 2824.0], [218.0, 2965.0], [217.0, 2967.0], [216.0, 3070.0], [231.0, 2967.0], [230.0, 3047.0], [229.0, 3047.0], [228.0, 2832.0], [227.0, 2833.0], [226.0, 2981.0], [225.0, 2957.0], [224.0, 2957.0], [238.0, 2953.0], [237.0, 3006.0], [234.0, 2815.0], [233.0, 2966.0], [232.0, 2820.0], [247.0, 2938.0], [246.0, 2818.0], [245.0, 2820.0], [244.0, 3026.0], [243.0, 3026.0], [242.0, 3029.0], [241.0, 2953.0], [240.0, 2818.0], [255.0, 2804.0], [254.0, 2951.0], [253.0, 2927.0], [252.0, 3040.0], [251.0, 3041.0], [250.0, 2812.0], [249.0, 2935.0], [248.0, 2936.0], [270.0, 2780.0], [271.0, 3008.0], [269.0, 2780.0], [268.0, 2782.0], [267.0, 3205.0], [266.0, 2935.0], [265.0, 3207.0], [264.0, 3022.0], [263.0, 2938.0], [257.0, 3033.0], [256.0, 3184.0], [259.0, 3027.0], [258.0, 2798.0], [262.0, 3174.0], [261.0, 2940.0], [260.0, 2796.0], [286.0, 3173.0], [287.0, 2795.0], [285.0, 2993.0], [284.0, 2993.0], [283.0, 3176.0], [282.0, 2991.0], [281.0, 2912.0], [280.0, 2911.0], [279.0, 3183.0], [272.0, 2923.0], [275.0, 3190.0], [274.0, 2964.0], [278.0, 2808.0], [277.0, 2810.0], [276.0, 3000.0], [302.0, 2600.0], [303.0, 2747.0], [301.0, 2603.0], [300.0, 2822.0], [299.0, 2755.0], [298.0, 2825.0], [297.0, 3015.0], [296.0, 2720.0], [295.0, 2612.0], [289.0, 3002.0], [288.0, 2905.0], [291.0, 2734.0], [290.0, 2624.0], [294.0, 2617.0], [293.0, 2994.0], [292.0, 2840.0], [318.0, 2784.0], [319.0, 2783.0], [317.0, 2573.0], [316.0, 2979.0], [315.0, 2980.0], [314.0, 2726.0], [313.0, 2984.0], [312.0, 2729.0], [311.0, 2587.0], [305.0, 2593.0], [304.0, 3001.0], [307.0, 2742.0], [306.0, 2999.0], [310.0, 2584.0], [309.0, 2807.0], [308.0, 2809.0], [334.0, 2958.0], [335.0, 2535.0], [333.0, 2678.0], [332.0, 2545.0], [331.0, 2545.0], [330.0, 2543.0], [329.0, 2971.0], [328.0, 2981.0], [327.0, 2701.0], [321.0, 2779.0], [320.0, 2996.0], [323.0, 2704.0], [322.0, 2705.0], [326.0, 2770.0], [325.0, 2771.0], [324.0, 2559.0], [350.0, 2743.0], [351.0, 2742.0], [349.0, 2744.0], [348.0, 2745.0], [347.0, 2951.0], [346.0, 2952.0], [345.0, 2513.0], [344.0, 2653.0], [343.0, 2960.0], [337.0, 2670.0], [336.0, 2772.0], [339.0, 2941.0], [338.0, 2769.0], [342.0, 2756.0], [341.0, 2518.0], [340.0, 2658.0], [366.0, 2758.0], [367.0, 2752.0], [365.0, 2927.0], [364.0, 2929.0], [363.0, 2929.0], [362.0, 2761.0], [361.0, 2765.0], [360.0, 2942.0], [359.0, 2944.0], [353.0, 2742.0], [352.0, 2943.0], [355.0, 2936.0], [354.0, 2942.0], [358.0, 2943.0], [357.0, 2741.0], [356.0, 2742.0], [382.0, 2959.0], [383.0, 2957.0], [381.0, 2924.0], [380.0, 2743.0], [379.0, 2744.0], [378.0, 2735.0], [377.0, 2933.0], [376.0, 2934.0], [375.0, 2924.0], [369.0, 2936.0], [368.0, 2750.0], [371.0, 2932.0], [370.0, 2934.0], [374.0, 2743.0], [373.0, 2742.0], [372.0, 2743.0], [397.0, 2962.0], [398.0, 2960.0], [396.0, 2936.0], [387.0, 2950.0], [386.0, 2762.0], [385.0, 2733.0], [384.0, 2737.0], [395.0, 2936.0], [394.0, 2937.0], [393.0, 2937.0], [392.0, 2939.0], [391.0, 2751.0], [390.0, 2758.0], [389.0, 2949.0], [388.0, 2949.0], [413.0, 3351.0], [414.0, 3352.0], [412.0, 3351.0], [403.0, 2985.0], [402.0, 2957.0], [401.0, 2986.0], [400.0, 2960.0], [411.0, 3351.0], [410.0, 3355.0], [409.0, 2974.0], [408.0, 3330.0], [407.0, 3329.0], [406.0, 3159.0], [404.0, 2983.0], [430.0, 3434.0], [431.0, 3361.0], [429.0, 3438.0], [428.0, 3440.5], [426.0, 3369.0], [425.0, 3369.0], [424.0, 3445.0], [423.0, 3375.0], [417.0, 3350.0], [416.0, 3349.0], [419.0, 3353.0], [418.0, 3422.0], [422.0, 3375.0], [421.0, 3376.0], [420.0, 3353.0], [446.0, 3437.0], [447.0, 3456.0], [445.0, 3387.0], [444.0, 3391.0], [443.0, 3394.5], [441.0, 3447.0], [440.0, 3395.0], [439.0, 3397.0], [433.0, 3376.0], [432.0, 3360.0], [435.0, 3456.0], [434.0, 3475.0], [438.0, 3451.0], [437.0, 3452.0], [436.0, 3472.0], [462.0, 3564.0], [463.0, 3562.0], [461.0, 3567.0], [460.0, 3562.0], [459.0, 3574.0], [458.0, 3457.0], [457.0, 3571.0], [456.0, 3426.0], [455.0, 3464.0], [449.0, 3432.0], [448.0, 3383.0], [451.0, 3374.0], [450.0, 3432.0], [454.0, 3468.0], [453.0, 3444.0], [452.0, 3446.0], [467.0, 3612.0], [479.0, 4212.5], [477.0, 4034.0], [466.0, 3609.0], [465.0, 3622.0], [464.0, 3552.0], [475.0, 4038.0], [473.0, 4425.0], [472.0, 3641.0], [471.0, 4430.0], [470.0, 3648.0], [469.0, 4437.0], [468.0, 3621.0], [494.0, 3658.0], [495.0, 3637.0], [493.0, 4401.0], [492.0, 4402.0], [491.0, 4405.0], [490.0, 3646.0], [489.0, 3663.5], [487.0, 3678.0], [481.0, 3691.0], [480.0, 4427.0], [483.0, 4425.0], [482.0, 3973.0], [486.0, 3968.0], [485.0, 4423.0], [484.0, 3666.0], [510.0, 3825.0], [511.0, 4129.0], [509.0, 3920.0], [508.0, 3923.0], [507.0, 4368.0], [506.0, 3930.0], [505.0, 4149.0], [504.0, 3935.0], [503.0, 4381.0], [497.0, 4392.0], [496.0, 3942.0], [499.0, 4387.0], [498.0, 3939.0], [502.0, 4381.0], [501.0, 3835.0], [500.0, 3944.0], [537.0, 4097.0], [542.0, 4321.0], [543.0, 3773.0], [528.0, 4112.0], [530.0, 3905.0], [529.0, 3783.0], [541.0, 4322.0], [539.0, 4092.0], [538.0, 3888.0], [536.0, 3886.5], [519.0, 4342.0], [518.0, 4346.0], [517.0, 3908.0], [516.0, 3818.0], [515.0, 4354.0], [514.0, 3917.0], [513.0, 3821.0], [512.0, 4387.0], [527.0, 4338.0], [526.0, 4116.0], [525.0, 4343.0], [524.0, 4343.0], [523.0, 3894.0], [522.0, 4126.0], [521.0, 3800.0], [520.0, 4128.0], [535.0, 3898.0], [531.0, 3780.0], [568.0, 3799.3333333333335], [572.0, 4031.0], [575.0, 3825.0], [561.0, 4053.0], [560.0, 3849.0], [574.0, 3820.0], [573.0, 4057.0], [571.0, 4284.0], [570.0, 4285.0], [569.0, 3725.0], [559.0, 3838.0], [545.0, 3873.0], [544.0, 3878.0], [548.0, 3977.5], [546.0, 3765.0], [551.0, 3755.0], [550.0, 4074.5], [558.0, 4297.0], [557.0, 3737.0], [556.0, 3737.0], [555.0, 3844.0], [554.0, 4303.0], [553.0, 4311.0], [552.0, 4301.0], [565.0, 4004.0], [563.0, 4049.5], [601.0, 4469.0], [606.0, 4223.5], [607.0, 4454.0], [593.0, 4229.0], [592.0, 4012.0], [595.0, 4476.0], [594.0, 4274.0], [597.0, 4012.0], [596.0, 3996.0], [604.0, 3993.0], [603.0, 4243.0], [602.0, 4245.0], [600.0, 4242.0], [583.0, 4254.0], [582.0, 4256.0], [581.0, 4038.0], [580.0, 4041.0], [579.0, 4042.0], [578.0, 4266.0], [577.0, 4267.0], [576.0, 3821.0], [591.0, 4538.0], [590.0, 4559.0], [589.0, 4548.0], [588.0, 4243.0], [587.0, 4024.0], [586.0, 4026.0], [585.0, 4537.0], [584.0, 3802.0], [599.0, 4471.0], [598.0, 4514.0], [632.0, 4186.0], [636.0, 4187.0], [639.0, 4406.0], [625.0, 4191.0], [627.0, 3945.0], [626.0, 4422.0], [638.0, 4181.0], [637.0, 4398.0], [635.0, 4404.0], [634.0, 3929.0], [633.0, 3930.0], [623.0, 4432.0], [609.0, 4236.0], [611.0, 4218.0], [610.0, 3980.0], [615.0, 4446.0], [614.0, 4134.0], [622.0, 4432.0], [621.0, 4209.0], [620.0, 3952.0], [619.0, 3955.0], [617.0, 4447.0], [616.0, 4211.0], [631.0, 4180.0], [630.0, 4178.0], [668.0, 4295.0], [671.0, 3823.0], [657.0, 4348.0], [656.0, 4126.0], [659.0, 4318.0], [658.0, 4339.0], [661.0, 4113.0], [660.0, 4086.0], [670.0, 4295.0], [669.0, 4093.0], [667.0, 4318.0], [666.0, 4322.0], [665.0, 4304.0], [664.0, 3842.0], [655.0, 4364.0], [641.0, 3906.0], [640.0, 4393.0], [643.0, 3905.0], [642.0, 3907.0], [645.0, 4387.0], [644.0, 4391.0], [647.0, 4157.0], [646.0, 4378.0], [654.0, 4134.0], [653.0, 3908.0], [652.0, 3910.0], [651.0, 4369.0], [650.0, 4374.0], [649.0, 4378.0], [648.0, 4153.0], [663.0, 3842.0], [662.0, 3844.0], [700.0, 4244.0], [703.0, 4023.0], [689.0, 4040.0], [688.0, 4041.0], [691.0, 4595.0], [690.0, 4597.0], [693.0, 4250.0], [692.0, 4258.0], [702.0, 4246.0], [701.0, 4252.0], [699.0, 4254.0], [698.0, 4255.0], [697.0, 4584.0], [696.0, 4043.0], [687.0, 4271.0], [673.0, 4300.0], [672.0, 3820.0], [675.0, 4078.0], [674.0, 4080.0], [677.0, 4287.0], [676.0, 3806.0], [679.0, 4273.0], [678.0, 4284.0], [686.0, 4257.0], [685.0, 4271.0], [684.0, 4614.0], [683.0, 4273.0], [682.0, 4055.0], [681.0, 3791.0], [680.0, 4273.0], [695.0, 4023.0], [694.0, 4258.0], [732.0, 4195.0], [735.0, 4175.0], [721.0, 4199.0], [720.0, 3984.0], [723.0, 4197.0], [722.0, 3983.0], [725.0, 4242.0], [724.0, 4209.0], [734.0, 4167.0], [733.0, 4191.0], [731.0, 3978.0], [730.0, 3961.0], [729.0, 3964.0], [728.0, 4227.0], [719.0, 4210.0], [705.0, 4239.0], [704.0, 4020.0], [707.0, 4237.0], [706.0, 4016.0], [709.0, 4243.0], [708.0, 4231.0], [711.0, 4223.0], [710.0, 4003.0], [718.0, 4212.0], [717.0, 4211.0], [716.0, 4210.0], [715.0, 3991.0], [714.0, 3994.0], [713.0, 4230.0], [712.0, 4231.0], [727.0, 4187.0], [726.0, 3976.0], [764.0, 4091.0], [767.0, 4396.0], [753.0, 4137.0], [752.0, 3916.0], [755.0, 4125.0], [754.0, 4128.0], [757.0, 3908.0], [756.0, 4131.0], [766.0, 4108.0], [765.0, 4109.0], [763.0, 4389.0], [762.0, 4395.0], [761.0, 4393.0], [760.0, 4107.0], [751.0, 4142.0], [737.0, 3966.0], [736.0, 4185.0], [739.0, 3951.0], [738.0, 4173.0], [741.0, 4155.0], [740.0, 4157.0], [743.0, 4168.0], [742.0, 4178.0], [750.0, 4146.0], [749.0, 4149.0], [748.0, 4176.0], [747.0, 3933.0], [746.0, 3930.0], [745.0, 3932.0], [744.0, 4148.0], [759.0, 4109.0], [758.0, 3905.0], [793.0, 4059.0], [798.0, 4322.0], [799.0, 4319.0], [785.0, 4079.0], [784.0, 4336.0], [787.0, 4326.0], [786.0, 4332.0], [789.0, 4047.0], [788.0, 4326.0], [797.0, 4328.0], [795.0, 4043.0], [794.0, 4057.0], [792.0, 4068.0], [775.0, 4368.0], [774.0, 4073.0], [773.0, 4080.0], [772.0, 4090.0], [771.0, 4074.0], [770.0, 4075.0], [769.0, 4076.0], [768.0, 4393.0], [783.0, 4067.0], [782.0, 4076.0], [781.0, 4071.0], [780.0, 4072.0], [779.0, 4076.0], [778.0, 4062.0], [777.0, 4364.0], [776.0, 4368.0], [791.0, 4060.0], [790.0, 4060.0], [825.0, 4297.0], [830.0, 2264.0], [831.0, 5136.333333333333], [817.0, 4288.0], [816.0, 3989.0], [819.0, 4277.0], [818.0, 4280.0], [821.0, 4270.0], [820.0, 4276.0], [828.0, 4735.0], [827.0, 4766.0], [826.0, 4289.0], [824.0, 4298.0], [807.0, 4291.0], [806.0, 4291.0], [805.0, 4300.0], [804.0, 4021.0], [803.0, 4029.0], [802.0, 4313.0], [801.0, 4025.0], [800.0, 4023.0], [815.0, 3972.0], [814.0, 4271.0], [813.0, 4275.0], [812.0, 3985.0], [811.0, 4283.0], [810.0, 4287.0], [809.0, 3998.0], [808.0, 4299.0], [823.0, 4298.0], [822.0, 4268.0], [861.0, 5014.5], [852.0, 4692.0], [862.0, 5050.0], [848.0, 5254.0], [851.0, 4745.0], [850.0, 5291.5], [859.0, 5023.0], [857.0, 5030.0], [856.0, 5164.0], [839.0, 5171.0], [838.0, 5171.0], [837.0, 5175.0], [836.0, 5142.0], [835.0, 5140.0], [834.0, 5138.0], [833.0, 4728.0], [832.0, 5140.0], [847.0, 5256.0], [846.0, 5254.0], [845.0, 5252.0], [844.0, 5295.5], [842.0, 5242.0], [841.0, 4754.0], [840.0, 4745.0], [855.0, 5045.0], [854.0, 5175.0], [853.0, 4727.0], [882.0, 5012.0], [878.0, 2508.0], [877.0, 5130.0], [876.0, 5122.0], [874.0, 5068.666666666667], [894.0, 4289.666666666667], [892.0, 5133.333333333333], [889.0, 5117.5], [871.0, 5005.0], [870.0, 5013.5], [869.0, 5003.333333333333], [867.0, 5007.0], [864.0, 5051.5], [879.0, 5135.0], [887.0, 5064.0], [886.0, 5061.0], [884.0, 5023.0], [881.0, 4994.0], [880.0, 5135.0], [921.0, 4793.0], [926.0, 4781.0], [927.0, 4783.0], [912.0, 4941.0], [914.0, 4939.0], [913.0, 4943.0], [916.0, 4949.0], [915.0, 4940.0], [925.0, 4793.5], [923.0, 4791.0], [922.0, 4775.0], [920.0, 4768.0], [903.0, 4958.5], [901.0, 4950.0], [900.0, 4986.5], [898.0, 5150.0], [897.0, 5142.0], [896.0, 5139.0], [910.0, 4953.0], [909.0, 4946.0], [908.0, 4949.0], [907.0, 4947.0], [906.0, 5027.0], [904.0, 4970.0], [918.0, 4863.0], [917.0, 4877.0], [952.0, 4460.0], [957.0, 4460.0], [959.0, 4461.0], [945.0, 4435.0], [944.0, 4673.5], [947.0, 4439.0], [946.0, 4437.0], [956.0, 4470.5], [954.0, 4488.0], [953.0, 4462.0], [942.0, 4685.0], [929.0, 4780.0], [928.0, 4783.0], [931.0, 4789.0], [930.0, 4783.0], [933.0, 4783.0], [932.0, 4789.0], [935.0, 4759.0], [934.0, 4759.0], [941.0, 4684.0], [940.0, 4711.0], [939.0, 4716.0], [938.0, 4718.0], [937.0, 4719.0], [936.0, 4746.0], [951.0, 4460.0], [950.0, 4455.0], [949.0, 4454.0], [948.0, 4450.0], [986.0, 4169.0], [990.0, 4153.0], [991.0, 4118.0], [976.0, 4340.0], [978.0, 4331.0], [977.0, 4340.0], [989.0, 4185.0], [988.0, 4185.0], [987.0, 4170.0], [985.0, 4168.5], [967.0, 4435.0], [966.0, 4435.0], [965.0, 4427.0], [964.0, 4458.5], [962.0, 4457.5], [961.0, 4459.5], [975.0, 4366.0], [974.0, 4392.0], [973.0, 4380.0], [972.0, 4404.0], [971.0, 4406.0], [970.0, 4421.5], [968.0, 4406.0], [983.0, 4194.0], [981.0, 4191.0], [980.0, 4191.0], [979.0, 4180.0], [997.0, 3199.0], [996.0, 3890.0], [995.0, 3929.0], [994.0, 3920.0], [993.0, 3921.0], [992.0, 3898.0]], "isOverall": false, "label": "Actuator-health", "isController": false}, {"data": [[500.2950000000004, 3695.4909999999986]], "isOverall": false, "label": "Actuator-health-Aggregated", "isController": false}, {"data": [[374.0, 1315.0], [375.0, 1270.75], [376.0, 1254.0400000000002], [377.0, 1227.5], [378.0, 1156.0], [380.0, 1222.3999999999999], [381.0, 1384.0], [383.0, 1261.0666666666666], [386.0, 1174.5555555555557], [387.0, 1095.0], [398.0, 1102.0], [399.0, 1232.0], [388.0, 1205.2857142857142], [389.0, 1089.0], [390.0, 1102.0], [391.0, 1298.0], [392.0, 1134.4], [393.0, 1182.4444444444443], [394.0, 1200.8333333333335], [395.0, 1246.6666666666667], [401.0, 1080.7142857142858], [400.0, 961.0], [415.0, 938.5], [402.0, 918.3333333333334], [414.0, 1132.0], [411.0, 1202.0], [405.0, 886.0], [404.0, 908.8333333333334], [403.0, 860.6666666666666], [422.0, 1052.0], [489.0, 1275.5], [492.0, 1302.0], [498.0, 1277.0], [507.0, 1315.0], [598.0, 1772.3333333333333], [599.0, 1757.0], [606.0, 1740.0], [615.0, 1679.0], [612.0, 1677.5], [611.0, 1698.0], [613.0, 1665.5], [616.0, 1651.6666666666667], [623.0, 1610.888888888889], [627.0, 1592.0], [634.0, 1564.0], [632.0, 1597.0], [633.0, 1597.0], [628.0, 1602.0], [629.0, 1619.0], [667.0, 2095.0], [671.0, 2075.75], [679.0, 2023.0], [673.0, 2102.0], [672.0, 2019.75], [686.0, 1926.0], [687.0, 1938.0], [674.0, 2070.4], [677.0, 2015.0], [678.0, 2009.0], [688.0, 1960.9999999999998], [703.0, 1671.75], [701.0, 1732.6666666666667], [702.0, 1744.5], [699.0, 1806.0], [700.0, 1828.0], [697.0, 1826.0], [698.0, 1908.0], [689.0, 1946.7499999999998], [694.0, 1880.6], [695.0, 1844.4], [680.0, 1956.75], [682.0, 2028.0], [684.0, 1967.7142857142856], [685.0, 1948.0], [705.0, 1701.0], [704.0, 1760.3333333333333], [707.0, 1736.5], [708.0, 1606.6666666666667], [709.0, 1535.909090909091], [710.0, 1434.0], [720.0, 1367.0], [732.0, 2408.3333333333335], [733.0, 2354.5], [729.0, 2431.0], [731.0, 2424.5], [712.0, 1547.4], [715.0, 1526.0], [718.0, 1395.0], [719.0, 1376.0], [742.0, 2276.5], [736.0, 2331.25], [738.0, 2364.0], [741.0, 2308.4], [746.0, 2244.125], [752.0, 2244.0], [763.0, 2030.3333333333333], [760.0, 2185.0], [762.0, 2131.0], [753.0, 2255.0], [754.0, 2234.8], [757.0, 2210.6666666666665], [758.0, 2158.0], [759.0, 2143.0], [771.0, 1869.0], [769.0, 1901.5], [772.0, 1944.0], [773.0, 1828.5], [775.0, 1738.0], [792.0, 1375.0], [793.0, 1356.0], [799.0, 2325.8], [779.0, 1764.5], [768.0, 2117.0], [783.0, 1630.2], [786.0, 1505.375], [788.0, 1510.6666666666667], [789.0, 1623.0], [800.0, 2233.0], [807.0, 2200.0], [826.0, 1638.8750000000002], [830.0, 1563.5], [808.0, 2160.0], [809.0, 2086.5], [811.0, 2028.6666666666667], [812.0, 2011.2], [813.0, 2005.0], [816.0, 1908.0], [817.0, 1835.0], [823.0, 1775.0], [861.0, 2258.0], [862.0, 2196.0], [863.0, 2163.0], [866.0, 2069.8749999999995], [865.0, 2153.0], [871.0, 1989.6666666666667], [873.0, 1901.0], [875.0, 1867.0], [878.0, 1806.0], [884.0, 2141.5], [886.0, 2069.5], [889.0, 1992.0], [890.0, 1919.1666666666667], [894.0, 1875.0], [918.0, 2203.6666666666665], [917.0, 2144.3333333333335], [916.0, 2071.0], [915.0, 1990.857142857143], [913.0, 1913.0], [940.0, 2237.3076923076924], [932.0, 2035.5], [933.0, 1777.7142857142858], [935.0, 1933.0], [934.0, 1872.0], [936.0, 2034.6], [937.0, 2039.0], [939.0, 2135.0], [938.0, 2116.0], [945.0, 2113.0], [953.0, 2097.0], [955.0, 2098.0], [956.0, 2095.5], [942.0, 2393.8], [941.0, 2285.0], [990.0, 2344.714285714286], [968.0, 1852.7272727272727], [969.0, 2032.5], [991.0, 2432.220588235294], [989.0, 2574.5769230769224], [987.0, 1562.6], [975.0, 2154.916666666666], [964.0, 1474.6666666666665], [967.0, 1610.4285714285713], [965.0, 1600.5], [974.0, 2048.142857142857], [973.0, 1901.25], [972.0, 1868.058823529412], [971.0, 1730.5], [970.0, 1710.75], [983.0, 2782.8333333333335], [978.0, 2558.037037037037], [977.0, 2272.0], [976.0, 2195.0], [992.0, 2161.3333333333335], [997.0, 2160.2962962962956], [996.0, 2167.0555555555566], [995.0, 1981.6666666666665]], "isOverall": false, "label": "Actuator-Info", "isController": false}, {"data": [[793.9969999999994, 1906.8910000000026]], "isOverall": false, "label": "Actuator-Info-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 997.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 1248.3, "minX": 1.68061998E12, "maxY": 3794.2166666666667, "series": [{"data": [[1.68062004E12, 1248.3], [1.68061998E12, 2318.366666666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.68062004E12, 1872.45], [1.68061998E12, 3794.2166666666667]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68062004E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 1906.8910000000026, "minX": 1.68061998E12, "maxY": 4450.5364431486905, "series": [{"data": [[1.68062004E12, 3301.304414003049], [1.68061998E12, 4450.5364431486905]], "isOverall": false, "label": "Actuator-health", "isController": false}, {"data": [[1.68061998E12, 1906.8910000000026]], "isOverall": false, "label": "Actuator-Info", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68062004E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 1906.6550000000018, "minX": 1.68061998E12, "maxY": 4450.527696793004, "series": [{"data": [[1.68062004E12, 3301.280060882799], [1.68061998E12, 4450.527696793004]], "isOverall": false, "label": "Actuator-health", "isController": false}, {"data": [[1.68061998E12, 1906.6550000000018]], "isOverall": false, "label": "Actuator-Info", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68062004E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.68061998E12, "maxY": 43.71000000000003, "series": [{"data": [[1.68062004E12, 0.0], [1.68061998E12, 0.0]], "isOverall": false, "label": "Actuator-health", "isController": false}, {"data": [[1.68061998E12, 43.71000000000003]], "isOverall": false, "label": "Actuator-Info", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68062004E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 816.0, "minX": 1.68061998E12, "maxY": 5341.0, "series": [{"data": [[1.68062004E12, 4559.0], [1.68061998E12, 5341.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.68062004E12, 4268.400000000001], [1.68061998E12, 4458.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.68062004E12, 4483.139999999999], [1.68061998E12, 5167.92]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.68062004E12, 4398.3], [1.68061998E12, 4981.999999999999]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.68062004E12, 2513.0], [1.68061998E12, 816.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.68062004E12, 3081.0], [1.68061998E12, 2102.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68062004E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 1190.0, "minX": 135.0, "maxY": 4276.5, "series": [{"data": [[135.0, 2167.0], [268.0, 4276.5], [288.0, 2996.5], [157.0, 1960.0], [174.0, 1190.0], [369.0, 3646.0], [397.0, 2277.0], [212.0, 1928.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 397.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 1190.0, "minX": 135.0, "maxY": 4276.5, "series": [{"data": [[135.0, 2167.0], [268.0, 4276.5], [288.0, 2996.5], [157.0, 1960.0], [174.0, 1190.0], [369.0, 3646.0], [397.0, 2277.0], [212.0, 1928.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 397.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 33.333333333333336, "minX": 1.68061998E12, "maxY": 33.333333333333336, "series": [{"data": [[1.68061998E12, 33.333333333333336]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68061998E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 10.95, "minX": 1.68061998E12, "maxY": 22.383333333333333, "series": [{"data": [[1.68062004E12, 10.95], [1.68061998E12, 22.383333333333333]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68062004E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 5.716666666666667, "minX": 1.68061998E12, "maxY": 16.666666666666668, "series": [{"data": [[1.68062004E12, 10.95], [1.68061998E12, 5.716666666666667]], "isOverall": false, "label": "Actuator-health-success", "isController": false}, {"data": [[1.68061998E12, 16.666666666666668]], "isOverall": false, "label": "Actuator-Info-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68062004E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 10.95, "minX": 1.68061998E12, "maxY": 22.383333333333333, "series": [{"data": [[1.68062004E12, 10.95], [1.68061998E12, 22.383333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68062004E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

